apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: cas-ggircs-deploy-config-template
objects:

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${POSTGRES_IMAGE}
  spec:
    lookupPolicy:
      local: true
    tags:
    - from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/wksv3k-tools/${POSTGRES_IMAGE}:${POSTGRES_VERSION}
      importPolicy:
        scheduled: true
      name: ${POSTGRES_VERSION}
      referencePolicy:
        type: Source
  status: {}

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: cas-ggircs
  spec:
    lookupPolicy:
      local: true
    tags:
    - from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/wksv3k-tools/cas-ggircs:latest
      importPolicy:
        scheduled: true
      name: latest
      referencePolicy:
        type: Source
  status: {}

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: cas-ggircs-metabase
  spec:
    lookupPolicy:
      local: true
    tags:
    - from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/wksv3k-tools/metabase-dev:latest
      importPolicy:
        scheduled: true
      name: latest
      referencePolicy:
        type: Source
  status: {}

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}

- apiVersion: v1
  kind: Service
  metadata:
    name: cas-ggircs-metabase
  spec:
    ports:
    - name: cas-ggircs-metabase
      nodePort: 0
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      name: cas-ggircs-metabase
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: cas-ggircs-metabase
  spec:
    host: cas-ggircs-metabase.pathfinder.gov.bc.ca
    port:
      targetPort: cas-ggircs-metabase
    tls:
      termination: edge
    to:
      kind: Service
      name: cas-ggircs-metabase
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - type: Admitted
      host: cas-ggircs-metabase.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="cas-ggircs-postgres")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: cas-ggircs-postgres
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    storageClassName: gluster-file-db
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: cas-ggircs-data
  spec:
    storageClassName: gluster-file
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 10Gi

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: cas-ggircs-postgres
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: '1000'
          - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
            value: '1000'
          - name: POSTGRESQL_SHARED_BUFFERS
            value: 2GB
          - name: POSTGRESQL_EFFECTIVE_CACHE_SIZE
            value: 8GB
          image: ${POSTGRES_IMAGE}:${POSTGRES_VERSION}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: cas-ggircs-postgres
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: ${CPU_LIMIT}
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: cas-ggircs-postgres
          - mountPath: /opt/app-root/src/data
            name: cas-ggircs-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: cas-ggircs-postgres
          persistentVolumeClaim:
            claimName: cas-ggircs-postgres
        - name: cas-ggircs-data
          persistentVolumeClaim:
            claimName: cas-ggircs-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - cas-ggircs-postgres
        from:
          kind: ImageStreamTag
          name: ${POSTGRES_IMAGE}:${POSTGRES_VERSION}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: cas-ggircs-metabase
  spec:
    replicas: 2
    selector:
      name: cas-ggircs-metabase
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: cas-ggircs-metabase
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MB_DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MB_DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MB_DB_DBNAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          - name: MB_DB_TYPE
            value: postgres
          - name: MB_DB_PORT
            value: "5432"
          - name: MB_DB_HOST
            value: cas-ggircs-postgres
          - name: JAVA_TIMEZONE
            value: US/Pacific
          image: cas-ggircs-metabase:latest
          imagePullPolicy: IfNotPresent
          name: cas-ggircs-metabase
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            limits:
              cpu: 1000m
              memory: 4Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - cas-ggircs-metabase
        from:
          kind: ImageStreamTag
          name: cas-ggircs-metabase:latest
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: cas-ggircs
  spec:
    replicas: 1
    selector:
      name: cas-ggircs
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: cas-ggircs
      spec:
        containers:
        - capabilities: {}
          env:
          - name: SQITCH_TARGET
            value: "db:pg:"
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            value: cas-ggircs-postgres
          - name: SQITCH_FULLNAME
            value: OpenShift Deployer
          - name: SQITCH_EMAIL
            value: deployer@pathfinder.gov.bc.ca
          image: cas-ggircs:latest
          imagePullPolicy: IfNotPresent
          name: cas-ggircs
          resources:
            limits:
              cpu: 1000m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/app-root/src/data
            name: cas-ggircs-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: cas-ggircs-data
          persistentVolumeClaim:
            claimName: cas-ggircs-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - cas-ggircs
        from:
          kind: ImageStreamTag
          name: cas-ggircs:latest
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}

parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 16Gi
- description: Maximum amount of CPU the container can use.
  displayName: CPU Limit
  name: CPU_LIMIT
  required: true
  value: 4000m
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: cas-ggircs-postgres
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 20Gi
- description: Name of PostgreSQL image to be used (cas-ggircs-postgres for now).
  displayName: Name of PostgreSQL Image
  name: POSTGRES_IMAGE
  required: true
  value: "cas-ggircs-postgres"
- description: Version of PostgreSQL image to be used (10 for now).
  displayName: Version of PostgreSQL Image
  name: POSTGRES_VERSION
  required: true
  value: "latest"
- description: Name of Perl image to be used (perl for now).
  displayName: Name of Perl Image
  name: PERL_IMAGE
  required: true
  value: "registry.redhat.io/rhscl/perl-526-rhel7"
- description: Version of Perl image to be used (latest for now).
  displayName: Version of Perl Image
  name: PERL_VERSION
  required: true
  value: "latest"

