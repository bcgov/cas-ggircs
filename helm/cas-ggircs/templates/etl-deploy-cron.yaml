apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "cas-ggircs.fullname" . }}-etl-deploy
spec:
  suspend: true # This cron job is intended to be triggered manually
  schedule: "* * * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 3600
      template:
        metadata:
          labels:
            name: {{ template "cas-ggircs.fullname" . }}-etl-deploy
        spec:
          restartPolicy: Never
          containers:
            - env:
                - name: SQITCH_TARGET
                  value: "db:pg:"
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: {{ template "cas-ggircs.fullname" . }}
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: {{ template "cas-ggircs.fullname" . }}
                - name: PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: {{ template "cas-ggircs.fullname" . }}
                - name: PGPORT
                  value: "5432"
                - name: PGHOST
                  value: {{ template "cas-ggircs.fullname" . }}-patroni
                - name: SQITCH_FULLNAME
                  value: OpenShift Deployer
                - name: SQITCH_EMAIL
                  value: deployer@pathfinder.gov.bc.ca
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              name: {{ template "cas-ggircs.fullname" . }}-etl-deploy
              image: {{ .Values.image.etl.repository }}:{{ .Values.image.etl.tag }}
              resources:
                limits:
                  cpu: 1000m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 64Mi
              command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  set -euo pipefail;
                  sqitch deploy;
                  echo "Exporting data to 'swrs' schema";
                  if [[ "$(NAMESPACE)" == *-dev  ]]; then
                  echo "Inserting test XML reports in swrs_extract.eccc_xml_file"
                  psql <<EOF
                    insert into
                      swrs_extract.eccc_xml_file (id, xml_file)
                      overriding system value
                    values
                      (1,'$(sed -e "s/'/''/g" < test/data/Report_8614X.xml)'),
                      (2,'$(sed -e "s/'/''/g" < test/data/Report_9822X.xml)'),
                      (3,'$(sed -e "s/'/''/g" < test/data/Report_10255X.xml)'),
                      (4,'$(sed -e "s/'/''/g" < test/data/Report_10271X.xml)'),
                      (5,'$(sed -e "s/'/''/g" < test/data/Report_10692X.xml)'),
                      (6,'$(sed -e "s/'/''/g" < test/data/Report_10759X.xml)'),
                      (7,'$(sed -e "s/'/''/g" < test/data/Report_11033X.xml)'),
                      (8,'$(sed -e "s/'/''/g" < test/data/Report_11233X.xml)'),
                      (9,'$(sed -e "s/'/''/g" < test/data/Report_11266X.xml)'),
                      (10,'$(sed -e "s/'/''/g" < test/data/Report_11324X.xml)')
                    on conflict(id) do update set xml_file=excluded.xml_file;
                  EOF
                  fi
                  psql -c "select swrs_transform.load()";
