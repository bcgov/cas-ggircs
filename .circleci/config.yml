version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0
  gcp-gcr: circleci/gcp-gcr@0.7.1
  helm: circleci/helm@0.2.3
jobs:
  test:
    docker:
      - image: wenzowski/sqitch:0.9999
      - image: wenzowski/postgres:11.2
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init
      - run:
          name: Create testing db
          command: |
            RETRIES=5
            until psql -h localhost -U postgres -d postgres -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
              echo "Waiting for postgres server, $((RETRIES--)) remaining attempts..."
              sleep 1
            done
            createuser sqitch  -U postgres -h localhost
            createdb -O sqitch sqitch -U postgres -h localhost
            createdb -O sqitch ggircs_test -U postgres -h localhost
      - run:
          name: Test database using Make
          command: make test PSQL="psql -h localhost" CI_NO_PIPELINE=true

  test-local-cluster:
    executor: redhat-openshift/machine-for-local-cluster
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: Add Docker registry to /etc/hosts
          command: echo "172.30.1.1 docker-registry.default.svc" | sudo tee -a /etc/hosts
      - redhat-openshift/create-local-cluster-with-oc:
          skip-registry-check: true

      - run:
          command: docker login -u "$RED_HAT_DOCKER_USERNAME" -p "$RED_HAT_DOCKER_PASSWORD" "$RED_HAT_DOCKER_SERVER"
          name: Log in to Red Hat docker registry
      - run:
          name: Login as cluster admin
          command: oc login -u system:admin
      - run:
          command: make mock_storageclass
          name: Mock the storage classes
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 4.x
          password: password
          server-address: "https://127.0.0.1:8443"
          username: dev1
      - run:
          command: make provision
          name: Provision the cluster project set
      - helm/install-helm-client:
          version: v3.4.2
      - run:
          name: Helm dep up
          command: |
            helm dep up ./helm/cas-ggircs
      - run:
          name: Deploy to dev
          command: |
            helm install --atomic --timeout 900s --namespace "9212c9-dev" \
            --set image.etl.tag="$CIRCLE_SHA1" \
            --set cas-postgres.patroni.walE.enable=false \
            --set networkSecurityPolicies.enable=false \
            --set airflowDagTrigger.enable=false \
            --set swrsImportBucket.enable=false \
            cas-ggircs ./helm/cas-ggircs
      - run:
          command: |
            oc -n 9212c9-dev get all
          name: Print namespace contents
      - run:
          command: |
            helm test cas-ggircs --timeout 1200s --namespace "9212c9-dev"
          name: Test helm chart
          no_output_timeout: 21m

  lint:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - helm/install-helm-client:
          version: v3.2.1
      - run:
          command: helm lint ./helm/cas-ggircs
          name: Lint the helm charts

  eccc-upload__test:
    parameters:
      cache_version:
        type: integer
        default: 1
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/cas-ggircs/docker/eccc-upload
    steps:
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-cas-ggircs-eccc-upload-{{ .Branch }}
          paths:
            - /tmp/cas-ggircs-eccc-upload.tar
      - setup_remote_docker
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /tmp/cas-ggircs-eccc-upload.tar | true
      - run:
          name: Write GCS credentials to json file
          command: |
            echo "$GCLOUD_SERVICE_KEY_DEV" > /tmp/gcs_credentials.json
      - run:
          name: Test Docker image
          environment:
            DEPTH: 2
            WEBSITE: https://nodejs.org/dist/
            FILTER: \.png|\.svg
          command: |
            docker run -it cas-ggircs-eccc-upload -v /tmp/gcs_credentials.json:/app/gcs-key.json --env GOOGLE_APPLICATION_CREDENTIALS=/app/gcs-key.json ./test.sh eccc-upload-test$CIRCLE_WORKFLOW_ID

  build_cache_and_push:
    executor: gcp-gcr/default
    parameters:
      image_name:
        type: string
      image_tag:
        type: string
      dockerfile_directory:
        type: string
        default: "cas-ggircs"
      cache_version:
        type: integer
        default: 1
      should_push:
        type: boolean
        default: true
    working_directory: ~/<< parameters.dockerfile_directory >>
    steps:
      - checkout:
          path: ~/cas-ggircs # checkout path defaults to working directory
      - gcp-gcr/gcr-auth
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /tmp/<< parameters.image_name >>.tar | true
      - run:
          name: Log in to DockerHub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin registry.hub.docker.com
      - when:
          condition: << parameters.should_push >>
          steps:
            - run:
                name: Build application Docker image
                command: |
                  docker build --cache-from=<< parameters.image_name >> -t << parameters.image_name >>:latest -t gcr.io/${GOOGLE_PROJECT_ID}/<< parameters.image_name >>:<< parameters.image_tag >> .
      - when:
          condition:
            not: << parameters.should_push >>
          steps:
            - run:
                name: Build application test docker image
                command: |
                  docker build --cache-from=<< parameters.image_name >> -t << parameters.image_name >>:latest .
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o /tmp/<< parameters.image_name >>.tar << parameters.image_name >>:latest
      - save_cache:
          key: v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - when:
          condition:
            equal: [true, << parameters.should_push >>]
          steps:
            - gcp-gcr/push-image:
                image: << parameters.image_name >>
                tag: << parameters.image_tag >>
                digest-path: /tmp/digest.txt
            - run:
                command: |
                  echo "Digest is: $(</tmp/digest.txt)"

workflows:
  version: 2
  test:
    jobs:
      - test
      - lint:
          filters:
            tags:
              only: /^v.*/
      - build_cache_and_push:
          name: cas-ggircs-etl__sha1_build_and_push
          image_name: cas-ggircs-etl
          dockerfile_directory: cas-ggircs
          context: cas-pipeline
          image_tag: ${CIRCLE_SHA1}
          requires:
            - lint
      - test-local-cluster:
          context: cas-pipeline
          requires:
            - cas-ggircs-etl__sha1_build_and_push
      - build_cache_and_push:
          name: cas-ggircs-etl__tag_build_and_push
          context: cas-pipeline
          image_tag: ${CIRCLE_TAG/v/}
          image_name: cas-ggircs-etl
          dockerfile_directory: cas-ggircs
          requires:
            - lint
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_cache_and_push:
          name: eccc-extract__sha1_build_and_push
          image_name: cas-ggircs-eccc-extract
          image_tag: ${CIRCLE_SHA1}
          dockerfile_directory: cas-ggircs/eccc/extract
          context: cas-pipeline
      - build_cache_and_push:
          name: extract-zips-to-ggircs__tag_build_and_push
          image_name: cas-ggircs-eccc-extract
          image_tag: ${CIRCLE_TAG/v/}
          context: cas-pipeline
          dockerfile_directory: cas-ggircs/docker/extract-zips-to-ggircs
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_cache_and_push:
          name: eccc-upload__test_build
          image_name: cas-ggircs-eccc-upload
          image_tag: "test"
          dockerfile_directory: cas-ggircs/eccc/upload
          should_push: false
          context: cas-pipeline
          filters:
            tags:
              only: /^v.*/
      - eccc-upload__test:
          requires:
            - eccc-upload__test_build
          filters:
            tags:
              only: /^v.*/
      - build_cache_and_push:
          name: eccc-upload__sha1_build_and_push
          requires:
            - eccc-upload__test
          image_name: cas-ggircs-eccc-upload
          image_tag: ${CIRCLE_SHA1}
          dockerfile_directory: cas-ggircs/eccc/upload
          context: cas-pipeline
      - build_cache_and_push:
          name: eccc-upload__tag_build_and_push
          requires:
            - eccc-upload__test
          image_name: cas-ggircs-eccc-upload
          image_tag: ${CIRCLE_TAG/v/}
          dockerfile_directory: cas-ggircs/eccc/upload
          context: cas-pipeline
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

notify:
  webhooks:
    - url: https://outlook.office.com/webhook/a00d3135-7e96-47a0-817e-0086ec993205@55bc71c2-5150-4ff8-bbcd-d94bc32bf20c/CircleCI/4dd288af085245bf96cc07dce642e3ed/c436c63a-5475-4837-ae24-c21c300bd4e1
