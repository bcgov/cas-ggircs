version: 2.1

orbs:
  redhat-openshift: circleci/redhat-openshift@0.2.0
  helm: circleci/helm@1.2.0
jobs:
  etl_db_test:
    environment:
      PGUSER: postgres
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs
    steps:
      - run:
          name: install libdbd-pg-perl
          command: |
            sudo apt-get update
            sudo apt-get install libdbd-pg-perl
      - attach_workspace:
          at: ~/
      - run:
          name: Create testing db
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb ggircs_test
      - run:
          name: Test database using Make
          command: |
            source ~/.bashrc
            make test PSQL="psql -h localhost"
  helm_lint:
    machine:
      image: ubuntu-2004:2024.05.1
    steps:
      - checkout
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 4.x
          server-address: $OC_SILVER_SERVER_ADDRESS
          token: $OC_SILVER_TOKEN
      - helm/install-helm-client:
          version: v3.2.1
      - run:
          command: make lint_chart
          name: Lint the helm charts
  tools:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs
    steps:
      - checkout:
          path: ~/cas-ggircs
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule update --init
      - run:
          name: Ensure python has OpenSSL
          command: |
            # @see https://github.com/pyenv/pyenv/wiki/Common-build-problems
            sudo apt-get update
            sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget libdbd-pg-perl uuid-dev bison flex
      - restore_cache:
          name: Restore asdf Tools Cache
          keys:
            - tool-versions-{{ checksum ".tool-versions" }}-v2
      - run:
          name: Install tools via asdf
          environment:
            PGUSER: postgres
          command: |
            [[ -d ~/.asdf ]] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.1
            pushd ~/.asdf && git checkout v0.14.1 && popd
            echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
            echo -e '\nexport BASH_ENV="~/.asdf/asdf.sh"' >> ~/.bashrc
            source ~/.bashrc
            make install_asdf_tools
            pg_ctl start
            make install_pgtap
            pg_ctl stop
      - save_cache:
          name: Save asdf Tools Cache
          key: tool-versions-{{ checksum ".tool-versions" }}-v3
          paths:
            - ~/.asdf
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "ggircs-app/app/yarn.lock" }}-v1
      - run:
          name: Install Yarn Dependencies
          command: |
            source ~/.bashrc
            pushd ggircs-app/app
            yarn install --frozen-lockfile
            popd
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "ggircs-app/app/yarn.lock" }}-v1
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
      - run:
          name: Configure Cpan
          command: |
            echo | cpan # accept cpan defaults
      - restore_cache:
          name: Restore Cpan Package Cache
          keys:
            - cpanm-packages-{{ checksum "cpanfile" }}-v2
      - run:
          name: Install Cpan Dependencies
          command: |
            source ~/.bashrc # load perl config (just written by cpan) & asdf
            cat .tool-versions | xargs -n2 asdf global # make this project's versions global
            make install_cpanm
            make install_cpandeps
      - save_cache:
          name: Save Cpan Package Cache
          key: cpanm-packages-{{ checksum "cpanfile" }}-v2
          paths:
            - ~/perl5
      - persist_to_workspace:
          root: ~/
          paths:
            - .asdf
            - .bashrc
            - .cache/Cypress # contains the cypress binary. Needed for the e2e job
            - cas-ggircs
            - perl5
  lint:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Verify style with pre-commit
          command: |
            source ~/.asdf/asdf.sh
            asdf reshim
            pre-commit run --all-files
      - run:
          name: Check if there is some unformatted code
          command: git diff --exit-code || (echo 'These files are not formatted correctly. Did you forget to \"yarn format\"?' && false)
  ggircs_app_audit:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Audit Dependencies
          command: |
            source ~/.asdf/asdf.sh
            yarn run improved-yarn-audit
  ggircs_app_schema:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app
    environment:
      PGUSER: postgres
    steps:
      - run:
          name: install libdbd-pg-perl
          command: |
            sudo apt-get update
            sudo apt-get install libdbd-pg-perl
      - attach_workspace:
          at: ~/
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
            createdb ggircs
      - run:
          name: deploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch deploy
            sqitch verify
            popd
            pushd ../
            sqitch deploy
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `ggircs-app/app/schema/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)
      - run:
          name: redeploy schema
          command: |
            source ~/.bashrc
            pushd schema
            sqitch rebase
            sqitch verify
            popd
            pushd ../
            sqitch rebase
            sqitch verify
            popd
      - run:
          name: regenerate schema via introspection
          command: |
            source ~/.bashrc
            pushd app
            yarn build:schema
            popd
      - run:
          name: check for inconsistency between schema ddl & graphql
          command: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/schema/schema.graphql`. Did you forget to \"yarn build:relay\"?' && false)
  ggircs_app_compile:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Compile for production
          command: |
            source ~/.asdf/asdf.sh
            yarn build:relay # ensure relay modules are compiled from committed schema
            yarn build:next # ensure next.js can compile a production build
      - persist_to_workspace:
          root: ~/
          paths:
            - cas-ggircs/ggircs-app # persist the build for e2e tests
  ggircs_app_unit:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run unit tests
          command: |
            source ~/.asdf/asdf.sh
            yarn test
  ggircs_app_test_database:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app
    environment:
      PGUSER: postgres
    steps:
      - run:
          name: install libdbd-pg-perl
          command: |
            sudo apt-get update
            sudo apt-get install libdbd-pg-perl
      - attach_workspace:
          at: ~/
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
      - run:
          name: Test database using Make
          command: |
            source ~/.bashrc
            pushd schema
            make test PSQL="psql -h localhost" CI_NO_PIPELINE=true
            popd
  ggircs_app_e2e-snapshots:
    machine:
      image: ubuntu-2004:2024.05.1
    working_directory: ~/cas-ggircs/ggircs-app
    environment:
      PGUSER: postgres
    steps:
      - run:
          # From https://docs.cypress.io/guides/continuous-integration/introduction#Dependencies
          name: install cypress dependencies + libdbd-pg-perl
          command: |
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb libdbd-pg-perl
      - attach_workspace:
          at: ~/
      - run:
          name: start postgres
          command: |
            source ~/.bashrc
            pg_ctl start
            createdb `whoami`
            createdb ggircs
      - run:
          name: deploy schemas and data
          command: |
            source ~/.bashrc
            pushd ../
            sqitch deploy
            popd
            pushd schema
            sqitch deploy
            popd
      - run:
          name: run end-to-end tests with happo and cypress
          environment:
            SAMPLE_ENV_VAR: variable
          command: |
            source ~/.asdf/asdf.sh
            pushd app
            yarn start AS_CYPRESS & yarn wait-on http://localhost:3004
            yarn test:e2e
            popd

workflows:
  version: 2
  test:
    jobs:
      - etl_db_test:
          requires:
            - tools
      - helm_lint:
          context: cas-pipeline
          filters:
            tags:
              only: /^v.*/
      - tools
      - lint:
          requires:
            - tools
      - ggircs_app_unit:
          requires:
            - tools
      - ggircs_app_audit:
          requires:
            - tools
      - ggircs_app_schema:
          requires:
            - tools
      - ggircs_app_test_database:
          requires:
            - tools
      - ggircs_app_compile:
          requires:
            - tools
      - ggircs_app_e2e-snapshots:
          requires:
            - ggircs_app_compile
