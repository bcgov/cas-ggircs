"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""All input for the create `EcccFileDownloadLog` mutation."""
input CreateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` to be created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLogInput!
}

"""The output of our create `EcccFileDownloadLog` mutation."""
type CreateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createGgircsUserFromSession` mutation."""
input CreateGgircsUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createGgircsUserFromSession` mutation."""
type CreateGgircsUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GgircsUser` mutation."""
input CreateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GgircsUser` to be created by this mutation."""
  ggircsUser: GgircsUserInput!
}

"""The output of our create `GgircsUser` mutation."""
type CreateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was created by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteEcccFileDownloadLogByRowId` mutation."""
input DeleteEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `deleteEcccFileDownloadLog` mutation."""
input DeleteEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EcccFileDownloadLog` mutation."""
type DeleteEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEcccFileDownloadLogId: ID

  """The `EcccFileDownloadLog` that was deleted by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGgircsUserByRowId` mutation."""
input DeleteGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteGgircsUser` mutation."""
input DeleteGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GgircsUser` mutation."""
type DeleteGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGgircsUserId: ID

  """The `GgircsUser` that was deleted by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
An immutable log of which user downloaded which ECCC files using the GGIRCS app
"""
type EcccFileDownloadLog implements Node {
  """The time at which the download was initiated"""
  downloadedAt: Datetime!

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""
A condition to be used against `EcccFileDownloadLog` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EcccFileDownloadLogCondition {
  """Checks for equality with the object’s `downloadedAt` field."""
  downloadedAt: Datetime

  """Checks for equality with the object’s `downloadedBy` field."""
  downloadedBy: Int

  """Checks for equality with the object’s `ecccIndividualFilePath` field."""
  ecccIndividualFilePath: String

  """Checks for equality with the object’s `ecccZipFileName` field."""
  ecccZipFileName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `EcccFileDownloadLog`"""
input EcccFileDownloadLogInput {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""
Represents an update to a `EcccFileDownloadLog`. Fields that are set will be updated.
"""
input EcccFileDownloadLogPatch {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""A connection to a list of `EcccFileDownloadLog` values."""
type EcccFileDownloadLogsConnection {
  """
  A list of edges which contains the `EcccFileDownloadLog` and cursor to aid in pagination.
  """
  edges: [EcccFileDownloadLogsEdge!]!

  """A list of `EcccFileDownloadLog` objects."""
  nodes: [EcccFileDownloadLog]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EcccFileDownloadLog` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EcccFileDownloadLog` edge in the connection."""
type EcccFileDownloadLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccFileDownloadLog` at the end of the edge."""
  node: EcccFileDownloadLog
}

"""Methods to use when ordering `EcccFileDownloadLog`."""
enum EcccFileDownloadLogsOrderBy {
  DOWNLOADED_AT_ASC
  DOWNLOADED_AT_DESC
  DOWNLOADED_BY_ASC
  DOWNLOADED_BY_DESC
  ECCC_INDIVIDUAL_FILE_PATH_ASC
  ECCC_INDIVIDUAL_FILE_PATH_DESC
  ECCC_ZIP_FILE_NAME_ASC
  ECCC_ZIP_FILE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The raw xml files imported from ECCC"""
type EcccXmlFile implements Node {
  """Reads a single `EcccZipFile` that is related to this `EcccXmlFile`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime!

  """Reads and enables pagination through a set of `Report`."""
  reportsByEcccXmlFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file"""
  xmlFile: String!

  """The unique md5 hash of the xml file"""
  xmlFileMd5Hash: String

  """The name of the xml file"""
  xmlFileName: String

  """The id of the zip file the xml file is in, if applicable"""
  zipFileId: Int
}

"""
A condition to be used against `EcccXmlFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccXmlFileCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String

  """Checks for equality with the object’s `xmlFileMd5Hash` field."""
  xmlFileMd5Hash: String

  """Checks for equality with the object’s `xmlFileName` field."""
  xmlFileName: String

  """Checks for equality with the object’s `zipFileId` field."""
  zipFileId: Int
}

"""A connection to a list of `EcccXmlFile` values."""
type EcccXmlFilesConnection {
  """
  A list of edges which contains the `EcccXmlFile` and cursor to aid in pagination.
  """
  edges: [EcccXmlFilesEdge!]!

  """A list of `EcccXmlFile` objects."""
  nodes: [EcccXmlFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccXmlFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccXmlFile` edge in the connection."""
type EcccXmlFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccXmlFile` at the end of the edge."""
  node: EcccXmlFile
}

"""Methods to use when ordering `EcccXmlFile`."""
enum EcccXmlFilesOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
  XML_FILE_MD5_HASH_ASC
  XML_FILE_MD5_HASH_DESC
  XML_FILE_NAME_ASC
  XML_FILE_NAME_DESC
  ZIP_FILE_ID_ASC
  ZIP_FILE_ID_DESC
}

"""The table listing the zip files imported from ECCC"""
type EcccZipFile implements Node {
  """Reads and enables pagination through a set of `EcccXmlFile`."""
  ecccXmlFilesByZipFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """The unique md5 hash of the file"""
  zipFileMd5Hash: String

  """The name of the zip file"""
  zipFileName: String
}

"""
A condition to be used against `EcccZipFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccZipFileCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `zipFileMd5Hash` field."""
  zipFileMd5Hash: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""A connection to a list of `EcccZipFile` values."""
type EcccZipFilesConnection {
  """
  A list of edges which contains the `EcccZipFile` and cursor to aid in pagination.
  """
  edges: [EcccZipFilesEdge!]!

  """A list of `EcccZipFile` objects."""
  nodes: [EcccZipFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccZipFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccZipFile` edge in the connection."""
type EcccZipFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccZipFile` at the end of the edge."""
  node: EcccZipFile
}

"""Methods to use when ordering `EcccZipFile`."""
enum EcccZipFilesOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ZIP_FILE_MD5_HASH_ASC
  ZIP_FILE_MD5_HASH_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

"""Table containing the benchmark and eligibility threshold for a product"""
type GgircsUser implements Node {
  """The date this record was inserted"""
  createdAt: Datetime!

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  ecccFileDownloadLogsByDownloadedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection!

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Unique ID for the user"""
  rowId: Int!

  """The date this record was last updated"""
  updatedAt: Datetime!

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A condition to be used against `GgircsUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GgircsUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""An input for mutations affecting `GgircsUser`"""
input GgircsUserInput {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
Represents an update to a `GgircsUser`. Fields that are set will be updated.
"""
input GgircsUserPatch {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""A connection to a list of `GgircsUser` values."""
type GgircsUsersConnection {
  """
  A list of edges which contains the `GgircsUser` and cursor to aid in pagination.
  """
  edges: [GgircsUsersEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection."""
type GgircsUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""Methods to use when ordering `GgircsUser`."""
enum GgircsUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""
The raw xml files imported from existing legacy GHGR database in Oracle
"""
type GhgrImport implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  xmlFile: String!
}

"""
A condition to be used against `GhgrImport` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GhgrImportCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String
}

"""A connection to a list of `GhgrImport` values."""
type GhgrImportsConnection {
  """
  A list of edges which contains the `GhgrImport` and cursor to aid in pagination.
  """
  edges: [GhgrImportsEdge!]!

  """A list of `GhgrImport` objects."""
  nodes: [GhgrImport]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GhgrImport` you could get from the connection."""
  totalCount: Int!
}

"""A `GhgrImport` edge in the connection."""
type GhgrImportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GhgrImport` at the end of the edge."""
  node: GhgrImport
}

"""Methods to use when ordering `GhgrImport`."""
enum GhgrImportsOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
}

type JwtToken {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String

  """Reads a single `GgircsUser` that is related to this `JwtToken`."""
  ggircsUserBySub: GgircsUser
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `EcccFileDownloadLog`."""
  createEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEcccFileDownloadLogInput!
  ): CreateEcccFileDownloadLogPayload

  """Creates a single `GgircsUser`."""
  createGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserInput!
  ): CreateGgircsUserPayload
  createGgircsUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserFromSessionInput!
  ): CreateGgircsUserFromSessionPayload

  """Deletes a single `EcccFileDownloadLog` using its globally unique id."""
  deleteEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `EcccFileDownloadLog` using a unique key."""
  deleteEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogByRowIdInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `GgircsUser` using its globally unique id."""
  deleteGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserInput!
  ): DeleteGgircsUserPayload

  """Deletes a single `GgircsUser` using a unique key."""
  deleteGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserByRowIdInput!
  ): DeleteGgircsUserPayload

  """
  Updates a single `EcccFileDownloadLog` using its globally unique id and a patch.
  """
  updateEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogInput!
  ): UpdateEcccFileDownloadLogPayload

  """Updates a single `EcccFileDownloadLog` using a unique key and a patch."""
  updateEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogByRowIdInput!
  ): UpdateEcccFileDownloadLogPayload

  """
  Updates a single `GgircsUser` using its globally unique id and a patch.
  """
  updateGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserInput!
  ): UpdateGgircsUserPayload

  """Updates a single `GgircsUser` using a unique key and a patch."""
  updateGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserByRowIdInput!
  ): UpdateGgircsUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  allEcccFileDownloadLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection

  """Reads and enables pagination through a set of `EcccXmlFile`."""
  allEcccXmlFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection

  """Reads and enables pagination through a set of `EcccZipFile`."""
  allEcccZipFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccZipFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccZipFile`."""
    orderBy: [EcccZipFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccZipFilesConnection

  """Reads and enables pagination through a set of `GgircsUser`."""
  allGgircsUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection

  """Reads and enables pagination through a set of `GhgrImport`."""
  allGhgrImports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GhgrImportCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GhgrImport`."""
    orderBy: [GhgrImportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GhgrImportsConnection

  """Reads and enables pagination through a set of `ReportAttachment`."""
  allReportAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection

  """Reads and enables pagination through a set of `Report`."""
  allReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection

  """Reads a single `EcccFileDownloadLog` using its globally unique `ID`."""
  ecccFileDownloadLog(
    """
    The globally unique `ID` to be used in selecting a single `EcccFileDownloadLog`.
    """
    id: ID!
  ): EcccFileDownloadLog
  ecccFileDownloadLogByRowId(rowId: Int!): EcccFileDownloadLog

  """Reads a single `EcccXmlFile` using its globally unique `ID`."""
  ecccXmlFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccXmlFile`.
    """
    id: ID!
  ): EcccXmlFile
  ecccXmlFileByRowId(rowId: Int!): EcccXmlFile

  """Reads a single `EcccZipFile` using its globally unique `ID`."""
  ecccZipFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccZipFile`.
    """
    id: ID!
  ): EcccZipFile
  ecccZipFileByRowId(rowId: Int!): EcccZipFile

  """Reads a single `GgircsUser` using its globally unique `ID`."""
  ggircsUser(
    """
    The globally unique `ID` to be used in selecting a single `GgircsUser`.
    """
    id: ID!
  ): GgircsUser
  ggircsUserByRowId(rowId: Int!): GgircsUser

  """Reads a single `GhgrImport` using its globally unique `ID`."""
  ghgrImport(
    """
    The globally unique `ID` to be used in selecting a single `GhgrImport`.
    """
    id: ID!
  ): GhgrImport
  ghgrImportByRowId(rowId: Int!): GhgrImport

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Report` using its globally unique `ID`."""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    id: ID!
  ): Report

  """Reads a single `ReportAttachment` using its globally unique `ID`."""
  reportAttachment(
    """
    The globally unique `ID` to be used in selecting a single `ReportAttachment`.
    """
    id: ID!
  ): ReportAttachment
  reportAttachmentByRowId(rowId: Int!): ReportAttachment
  reportByRowId(rowId: Int!): Report
  session: JwtToken
}

"""The table housing all report data, derived from eccc_xml_file table"""
type Report implements Node {
  co2Bioc: BigFloat

  """Reads a single `EcccXmlFile` that is related to this `Report`."""
  ecccXmlFileByEcccXmlFileId: EcccXmlFile

  """The internal primary key for the file"""
  ecccXmlFileId: Int
  grandTotalLessCo2Bioc: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime

  """The person who last modified the report"""
  lastModifiedBy: String

  """The timestamp recorded in SWRS when the report was last modified"""
  lastModifiedDate: Datetime

  """Computed column returns the latest report ordered by zip_file_name"""
  latestSwrsReport: Report

  """The prepop report id"""
  prepopReportId: Int

  """Reads and enables pagination through a set of `ReportAttachment`."""
  reportAttachmentsByReportId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection!

  """The type of report"""
  reportType: String
  reportingOnlyGrandTotal: BigFloat

  """The length of the reporting period contained in report"""
  reportingPeriodDuration: Int

  """The primary key"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  sourceXml: String

  """The status of the report"""
  status: String

  """The date the report was submitted"""
  submissionDate: Datetime

  """The ID for the reporting facility"""
  swrsFacilityId: Int

  """The ID for the reporting organisation"""
  swrsOrganisationId: Int

  """The swrs report id"""
  swrsReportId: Int!

  """
  The total quantity of CO2bioC reported in this report. Used by compliance and enforcement
  """
  updateComment: String

  """The report version"""
  version: String
}

"""The table housing all attachments for reports"""
type ReportAttachment implements Node {
  """The file_number corresponds to the type of attachment"""
  fileNumber: Int

  """The complete filepath to the attachment within zip_file_name"""
  filePath: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Denotes whether or not this attachment is required. Can be one of [Optional, Required]
  """
  informationRequirement: String

  """The md5 hash of the attachment"""
  md5Hash: String

  """
  The process_name in this context describes the type of attachment (ie: Process Flow Diagram)
  """
  processName: String

  """Reads a single `Report` that is related to this `ReportAttachment`."""
  reportByReportId: Report

  """The foreign key to the report this attachment belongs to"""
  reportId: Int

  """A generated index used for keying in the ggircs schema"""
  rowId: Int!

  """
  The sub_process_name in this context is a more in-depth description of this attachment
  """
  subProcessName: String

  """The date of upload"""
  uploadedAt: Datetime

  """The name of the user who uploaded the attachment file"""
  uploadedBy: String

  """The name of the attachment file that was uploaded"""
  uploadedFileName: String

  """The name of the zip file containing the attachment"""
  zipFileName: String
}

"""
A condition to be used against `ReportAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportAttachmentCondition {
  """Checks for equality with the object’s `fileNumber` field."""
  fileNumber: Int

  """Checks for equality with the object’s `filePath` field."""
  filePath: String

  """Checks for equality with the object’s `informationRequirement` field."""
  informationRequirement: String

  """Checks for equality with the object’s `md5Hash` field."""
  md5Hash: String

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subProcessName` field."""
  subProcessName: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Datetime

  """Checks for equality with the object’s `uploadedBy` field."""
  uploadedBy: String

  """Checks for equality with the object’s `uploadedFileName` field."""
  uploadedFileName: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""A connection to a list of `ReportAttachment` values."""
type ReportAttachmentsConnection {
  """
  A list of edges which contains the `ReportAttachment` and cursor to aid in pagination.
  """
  edges: [ReportAttachmentsEdge!]!

  """A list of `ReportAttachment` objects."""
  nodes: [ReportAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReportAttachment` edge in the connection."""
type ReportAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportAttachment` at the end of the edge."""
  node: ReportAttachment
}

"""Methods to use when ordering `ReportAttachment`."""
enum ReportAttachmentsOrderBy {
  FILE_NUMBER_ASC
  FILE_NUMBER_DESC
  FILE_PATH_ASC
  FILE_PATH_DESC
  ID_ASC
  ID_DESC
  INFORMATION_REQUIREMENT_ASC
  INFORMATION_REQUIREMENT_DESC
  MD5_HASH_ASC
  MD5_HASH_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_PROCESS_NAME_ASC
  SUB_PROCESS_NAME_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  UPLOADED_BY_ASC
  UPLOADED_BY_DESC
  UPLOADED_FILE_NAME_ASC
  UPLOADED_FILE_NAME_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

"""
A condition to be used against `Report` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReportCondition {
  """Checks for equality with the object’s `co2Bioc` field."""
  co2Bioc: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `grandTotalLessCo2Bioc` field."""
  grandTotalLessCo2Bioc: BigFloat

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `lastModifiedBy` field."""
  lastModifiedBy: String

  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Datetime

  """Checks for equality with the object’s `prepopReportId` field."""
  prepopReportId: Int

  """Checks for equality with the object’s `reportType` field."""
  reportType: String

  """Checks for equality with the object’s `reportingOnlyGrandTotal` field."""
  reportingOnlyGrandTotal: BigFloat

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sourceXml` field."""
  sourceXml: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `version` field."""
  version: String
}

"""A connection to a list of `Report` values."""
type ReportsConnection {
  """
  A list of edges which contains the `Report` and cursor to aid in pagination.
  """
  edges: [ReportsEdge!]!

  """A list of `Report` objects."""
  nodes: [Report]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Report` you could get from the connection."""
  totalCount: Int!
}

"""A `Report` edge in the connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Report` at the end of the edge."""
  node: Report
}

"""Methods to use when ordering `Report`."""
enum ReportsOrderBy {
  CO2BIOC_ASC
  CO2BIOC_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  GRAND_TOTAL_LESS_CO2BIOC_ASC
  GRAND_TOTAL_LESS_CO2BIOC_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  LAST_MODIFIED_BY_ASC
  LAST_MODIFIED_BY_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  NATURAL
  PREPOP_REPORT_ID_ASC
  PREPOP_REPORT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_ONLY_GRAND_TOTAL_ASC
  REPORTING_ONLY_GRAND_TOTAL_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_DESC
  SOURCE_XML_ASC
  SOURCE_XML_DESC
  STATUS_ASC
  STATUS_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  VERSION_ASC
  VERSION_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateEcccFileDownloadLogByRowId` mutation."""
input UpdateEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `updateEcccFileDownloadLog` mutation."""
input UpdateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be updated.
  """
  id: ID!
}

"""The output of our update `EcccFileDownloadLog` mutation."""
type UpdateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was updated by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGgircsUserByRowId` mutation."""
input UpdateGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateGgircsUser` mutation."""
input UpdateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be updated.
  """
  id: ID!
}

"""The output of our update `GgircsUser` mutation."""
type UpdateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was updated by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
