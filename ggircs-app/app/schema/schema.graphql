"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""
Table contains the list of fuels as defined by the carbon tax act https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/08040_01
"""
type CarbonTaxActFuelType implements Node {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String!

  """Reads and enables pagination through a set of `FuelCarbonTaxDetail`."""
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCarbonTaxDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelCarbonTaxDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsConnection!

  """Reads and enables pagination through a set of `FuelCharge`."""
  fuelChargesByCarbonTaxActFuelTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelChargeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelChargeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The internal primary key"""
  rowId: Int!
}

"""
A condition to be used against `CarbonTaxActFuelType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeCondition {
  """Checks for equality with the object’s `carbonTaxFuelType` field."""
  carbonTaxFuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `CarbonTaxActFuelType` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeFilter {
  """Checks for all expressions in this list."""
  and: [CarbonTaxActFuelTypeFilter!]

  """Filter by the object’s `carbonTaxFuelType` field."""
  carbonTaxFuelType: StringFilter

  """
  Filter by the object’s `fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId` relation.
  """
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeToManyFuelCarbonTaxDetailFilter

  """Some related `fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId` exist."""
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeIdExist: Boolean

  """Filter by the object’s `fuelChargesByCarbonTaxActFuelTypeId` relation."""
  fuelChargesByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeToManyFuelChargeFilter

  """Some related `fuelChargesByCarbonTaxActFuelTypeId` exist."""
  fuelChargesByCarbonTaxActFuelTypeIdExist: Boolean

  """Negates the expression."""
  not: CarbonTaxActFuelTypeFilter

  """Checks for any expressions in this list."""
  or: [CarbonTaxActFuelTypeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `CarbonTaxActFuelType`"""
input CarbonTaxActFuelTypeInput {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String!
}

"""
Represents an update to a `CarbonTaxActFuelType`. Fields that are set will be updated.
"""
input CarbonTaxActFuelTypePatch {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String
}

"""
A filter to be used against many `FuelCarbonTaxDetail` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeToManyFuelCarbonTaxDetailFilter {
  """
  Every related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelCarbonTaxDetailFilter

  """
  No related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelCarbonTaxDetailFilter

  """
  Some related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelCarbonTaxDetailFilter
}

"""
A filter to be used against many `FuelCharge` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeToManyFuelChargeFilter {
  """
  Every related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelChargeFilter

  """
  No related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelChargeFilter

  """
  Some related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelChargeFilter
}

"""A connection to a list of `CarbonTaxActFuelType` values."""
type CarbonTaxActFuelTypesConnection {
  """
  A list of edges which contains the `CarbonTaxActFuelType` and cursor to aid in pagination.
  """
  edges: [CarbonTaxActFuelTypesEdge!]!

  """A list of `CarbonTaxActFuelType` objects."""
  nodes: [CarbonTaxActFuelType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CarbonTaxActFuelType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CarbonTaxActFuelType` edge in the connection."""
type CarbonTaxActFuelTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxActFuelType` at the end of the edge."""
  node: CarbonTaxActFuelType
}

"""Methods to use when ordering `CarbonTaxActFuelType`."""
enum CarbonTaxActFuelTypesOrderBy {
  CARBON_TAX_FUEL_TYPE_ASC
  CARBON_TAX_FUEL_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `CarbonTaxActFuelType` mutation."""
input CreateCarbonTaxActFuelTypeInput {
  """The `CarbonTaxActFuelType` to be created by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelTypeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CarbonTaxActFuelType` mutation."""
type CreateCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was created by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EcccAttachment` mutation."""
input CreateEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EcccAttachment` to be created by this mutation."""
  ecccAttachment: EcccAttachmentInput!
}

"""The output of our create `EcccAttachment` mutation."""
type CreateEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccAttachment` that was created by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EcccFileDownloadLog` mutation."""
input CreateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` to be created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLogInput!
}

"""The output of our create `EcccFileDownloadLog` mutation."""
type CreateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionCategory` mutation."""
input CreateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionCategory` to be created by this mutation."""
  emissionCategory: EmissionCategoryInput!
}

"""The output of our create `EmissionCategory` mutation."""
type CreateEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was created by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelCarbonTaxDetail` mutation."""
input CreateFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` to be created by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetailInput!
}

"""The output of our create `FuelCarbonTaxDetail` mutation."""
type CreateFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` that was created by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelCharge` mutation."""
input CreateFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelCharge` to be created by this mutation."""
  fuelCharge: FuelChargeInput!
}

"""The output of our create `FuelCharge` mutation."""
type CreateFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCharge` that was created by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createFuelMappingCascade` mutation."""
input CreateFuelMappingCascadeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fuelCarbonTaxDetailIdInput: Int!
  fuelTypeInput: String!
}

"""The output of our `createFuelMappingCascade` mutation."""
type CreateFuelMappingCascadePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetail
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelMapping` mutation."""
input CreateFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelMapping` to be created by this mutation."""
  fuelMapping: FuelMappingInput!
}

"""The output of our create `FuelMapping` mutation."""
type CreateFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetail

  """The `FuelMapping` that was created by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createGgircsUserFromSession` mutation."""
input CreateGgircsUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createGgircsUserFromSession` mutation."""
type CreateGgircsUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GgircsUser` mutation."""
input CreateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GgircsUser` to be created by this mutation."""
  ggircsUser: GgircsUserInput!
}

"""The output of our create `GgircsUser` mutation."""
type CreateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was created by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsCategory` mutation."""
input CreateNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsCategory` to be created by this mutation."""
  naicsCategory: NaicsCategoryInput!
}

"""The output of our create `NaicsCategory` mutation."""
type CreateNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategory` that was created by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsNaicsCategory` mutation."""
input CreateNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsNaicsCategory` to be created by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategoryInput!
}

"""The output of our create `NaicsNaicsCategory` mutation."""
type CreateNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `NaicsCategory` that is related to this `NaicsNaicsCategory`.
  """
  naicsCategoryByCategoryId: NaicsCategory

  """The `NaicsNaicsCategory` that was created by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TaxedVentingEmissionType` mutation."""
input CreateTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TaxedVentingEmissionType` to be created by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionTypeInput!
}

"""The output of our create `TaxedVentingEmissionType` mutation."""
type CreateTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was created by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  equalTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteCarbonTaxActFuelTypeByRowId` mutation."""
input DeleteCarbonTaxActFuelTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `deleteCarbonTaxActFuelType` mutation."""
input DeleteCarbonTaxActFuelTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxActFuelType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CarbonTaxActFuelType` mutation."""
type DeleteCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was deleted by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCarbonTaxActFuelTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEcccAttachmentByRowId` mutation."""
input DeleteEcccAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the file"""
  rowId: Int!
}

"""All input for the `deleteEcccAttachment` mutation."""
input DeleteEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EcccAttachment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EcccAttachment` mutation."""
type DeleteEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEcccAttachmentId: ID

  """The `EcccAttachment` that was deleted by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEcccFileDownloadLogByRowId` mutation."""
input DeleteEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `deleteEcccFileDownloadLog` mutation."""
input DeleteEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EcccFileDownloadLog` mutation."""
type DeleteEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEcccFileDownloadLogId: ID

  """The `EcccFileDownloadLog` that was deleted by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionCategoryByRowId` mutation."""
input DeleteEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""
All input for the `deleteEmissionCategoryBySwrsEmissionCategory` mutation.
"""
input DeleteEmissionCategoryBySwrsEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String!
}

"""All input for the `deleteEmissionCategory` mutation."""
input DeleteEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionCategory` mutation."""
type DeleteEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionCategoryId: ID

  """The `EmissionCategory` that was deleted by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelCarbonTaxDetailByRowId` mutation."""
input DeleteFuelCarbonTaxDetailByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteFuelCarbonTaxDetail` mutation."""
input DeleteFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelCarbonTaxDetail` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelCarbonTaxDetail` mutation."""
type DeleteFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelCarbonTaxDetailId: ID

  """The `FuelCarbonTaxDetail` that was deleted by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelChargeByRowId` mutation."""
input DeleteFuelChargeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `deleteFuelCharge` mutation."""
input DeleteFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelCharge` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelCharge` mutation."""
type DeleteFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelChargeId: ID

  """The `FuelCharge` that was deleted by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelMappingByRowId` mutation."""
input DeleteFuelMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteFuelMapping` mutation."""
input DeleteFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelMapping` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelMapping` mutation."""
type DeleteFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelMappingId: ID

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetail

  """The `FuelMapping` that was deleted by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGgircsUserByRowId` mutation."""
input DeleteGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteGgircsUser` mutation."""
input DeleteGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GgircsUser` mutation."""
type DeleteGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGgircsUserId: ID

  """The `GgircsUser` that was deleted by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsCategoryByRowId` mutation."""
input DeleteNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsCategory` mutation."""
input DeleteNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsCategory` mutation."""
type DeleteNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsCategoryId: ID

  """The `NaicsCategory` that was deleted by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsNaicsCategoryByRowId` mutation."""
input DeleteNaicsNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsNaicsCategory` mutation."""
input DeleteNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsNaicsCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsNaicsCategory` mutation."""
type DeleteNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsNaicsCategoryId: ID

  """
  Reads a single `NaicsCategory` that is related to this `NaicsNaicsCategory`.
  """
  naicsCategoryByCategoryId: NaicsCategory

  """The `NaicsNaicsCategory` that was deleted by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTaxedVentingEmissionTypeByRowId` mutation."""
input DeleteTaxedVentingEmissionTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!
}

"""All input for the `deleteTaxedVentingEmissionType` mutation."""
input DeleteTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaxedVentingEmissionType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `TaxedVentingEmissionType` mutation."""
type DeleteTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTaxedVentingEmissionTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was deleted by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}

"""
This table containes the list of files containd in the zip files imported from ECCC, excluding XML files (which can be found in the eccc_xml_file table) and other zip files that may be contained in the outer zip file.
"""
type EcccAttachment implements Node {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int!
}

"""
A condition to be used against `EcccAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EcccAttachmentCondition {
  """Checks for equality with the object’s `attachmentFileMd5Hash` field."""
  attachmentFileMd5Hash: String

  """Checks for equality with the object’s `attachmentFilePath` field."""
  attachmentFilePath: String

  """
  Checks for equality with the object’s `attachmentUploadedFileName` field.
  """
  attachmentUploadedFileName: String

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sourceTypeId` field."""
  sourceTypeId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `zipFileId` field."""
  zipFileId: Int
}

"""
A filter to be used against `EcccAttachment` object types. All fields are combined with a logical ‘and.’
"""
input EcccAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [EcccAttachmentFilter!]

  """Filter by the object’s `attachmentFileMd5Hash` field."""
  attachmentFileMd5Hash: StringFilter

  """Filter by the object’s `attachmentFilePath` field."""
  attachmentFilePath: StringFilter

  """Filter by the object’s `attachmentUploadedFileName` field."""
  attachmentUploadedFileName: StringFilter

  """Filter by the object’s `ecccZipFileByZipFileId` relation."""
  ecccZipFileByZipFileId: EcccZipFileFilter

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccAttachmentFilter

  """Checks for any expressions in this list."""
  or: [EcccAttachmentFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sourceTypeId` field."""
  sourceTypeId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter

  """Filter by the object’s `zipFileId` field."""
  zipFileId: IntFilter
}

"""An input for mutations affecting `EcccAttachment`"""
input EcccAttachmentInput {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int!
}

"""
Represents an update to a `EcccAttachment`. Fields that are set will be updated.
"""
input EcccAttachmentPatch {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int
}

"""A connection to a list of `EcccAttachment` values."""
type EcccAttachmentsConnection {
  """
  A list of edges which contains the `EcccAttachment` and cursor to aid in pagination.
  """
  edges: [EcccAttachmentsEdge!]!

  """A list of `EcccAttachment` objects."""
  nodes: [EcccAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccAttachment` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccAttachment` edge in the connection."""
type EcccAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccAttachment` at the end of the edge."""
  node: EcccAttachment
}

"""Methods to use when ordering `EcccAttachment`."""
enum EcccAttachmentsOrderBy {
  ATTACHMENT_FILE_MD5_HASH_ASC
  ATTACHMENT_FILE_MD5_HASH_DESC
  ATTACHMENT_FILE_PATH_ASC
  ATTACHMENT_FILE_PATH_DESC
  ATTACHMENT_UPLOADED_FILE_NAME_ASC
  ATTACHMENT_UPLOADED_FILE_NAME_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_TYPE_ID_ASC
  SOURCE_TYPE_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  ZIP_FILE_ID_ASC
  ZIP_FILE_ID_DESC
}

"""
An immutable log of which user downloaded which ECCC files using the GGIRCS app
"""
type EcccFileDownloadLog implements Node {
  """The time at which the download was initiated"""
  downloadedAt: Datetime!

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""
A condition to be used against `EcccFileDownloadLog` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EcccFileDownloadLogCondition {
  """Checks for equality with the object’s `downloadedAt` field."""
  downloadedAt: Datetime

  """Checks for equality with the object’s `downloadedBy` field."""
  downloadedBy: Int

  """Checks for equality with the object’s `ecccIndividualFilePath` field."""
  ecccIndividualFilePath: String

  """Checks for equality with the object’s `ecccZipFileName` field."""
  ecccZipFileName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `EcccFileDownloadLog` object types. All fields are combined with a logical ‘and.’
"""
input EcccFileDownloadLogFilter {
  """Checks for all expressions in this list."""
  and: [EcccFileDownloadLogFilter!]

  """Filter by the object’s `downloadedAt` field."""
  downloadedAt: DatetimeFilter

  """Filter by the object’s `downloadedBy` field."""
  downloadedBy: IntFilter

  """Filter by the object’s `ecccIndividualFilePath` field."""
  ecccIndividualFilePath: StringFilter

  """Filter by the object’s `ecccZipFileName` field."""
  ecccZipFileName: StringFilter

  """Filter by the object’s `ggircsUserByDownloadedBy` relation."""
  ggircsUserByDownloadedBy: GgircsUserFilter

  """A related `ggircsUserByDownloadedBy` exists."""
  ggircsUserByDownloadedByExists: Boolean

  """Negates the expression."""
  not: EcccFileDownloadLogFilter

  """Checks for any expressions in this list."""
  or: [EcccFileDownloadLogFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `EcccFileDownloadLog`"""
input EcccFileDownloadLogInput {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""
Represents an update to a `EcccFileDownloadLog`. Fields that are set will be updated.
"""
input EcccFileDownloadLogPatch {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""A connection to a list of `EcccFileDownloadLog` values."""
type EcccFileDownloadLogsConnection {
  """
  A list of edges which contains the `EcccFileDownloadLog` and cursor to aid in pagination.
  """
  edges: [EcccFileDownloadLogsEdge!]!

  """A list of `EcccFileDownloadLog` objects."""
  nodes: [EcccFileDownloadLog]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EcccFileDownloadLog` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EcccFileDownloadLog` edge in the connection."""
type EcccFileDownloadLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccFileDownloadLog` at the end of the edge."""
  node: EcccFileDownloadLog
}

"""Methods to use when ordering `EcccFileDownloadLog`."""
enum EcccFileDownloadLogsOrderBy {
  DOWNLOADED_AT_ASC
  DOWNLOADED_AT_DESC
  DOWNLOADED_BY_ASC
  DOWNLOADED_BY_DESC
  ECCC_INDIVIDUAL_FILE_PATH_ASC
  ECCC_INDIVIDUAL_FILE_PATH_DESC
  ECCC_ZIP_FILE_NAME_ASC
  ECCC_ZIP_FILE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The raw xml files imported from ECCC"""
type EcccXmlFile implements Node {
  """Reads a single `EcccZipFile` that is related to this `EcccXmlFile`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime!

  """Reads and enables pagination through a set of `Report`."""
  reportsByEcccXmlFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file"""
  xmlFile: String!

  """The unique md5 hash of the xml file"""
  xmlFileMd5Hash: String

  """The name of the xml file"""
  xmlFileName: String

  """The id of the zip file the xml file is in, if applicable"""
  zipFileId: Int
}

"""
A condition to be used against `EcccXmlFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccXmlFileCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String

  """Checks for equality with the object’s `xmlFileMd5Hash` field."""
  xmlFileMd5Hash: String

  """Checks for equality with the object’s `xmlFileName` field."""
  xmlFileName: String

  """Checks for equality with the object’s `zipFileId` field."""
  zipFileId: Int
}

"""
A filter to be used against `EcccXmlFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccXmlFileFilter {
  """Checks for all expressions in this list."""
  and: [EcccXmlFileFilter!]

  """Filter by the object’s `ecccZipFileByZipFileId` relation."""
  ecccZipFileByZipFileId: EcccZipFileFilter

  """A related `ecccZipFileByZipFileId` exists."""
  ecccZipFileByZipFileIdExists: Boolean

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccXmlFileFilter

  """Checks for any expressions in this list."""
  or: [EcccXmlFileFilter!]

  """Filter by the object’s `reportsByEcccXmlFileId` relation."""
  reportsByEcccXmlFileId: EcccXmlFileToManyReportFilter

  """Some related `reportsByEcccXmlFileId` exist."""
  reportsByEcccXmlFileIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `xmlFileMd5Hash` field."""
  xmlFileMd5Hash: StringFilter

  """Filter by the object’s `xmlFileName` field."""
  xmlFileName: StringFilter

  """Filter by the object’s `zipFileId` field."""
  zipFileId: IntFilter
}

"""
A filter to be used against many `Report` object types. All fields are combined with a logical ‘and.’
"""
input EcccXmlFileToManyReportFilter {
  """
  Every related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportFilter

  """
  No related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportFilter

  """
  Some related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportFilter
}

"""A connection to a list of `EcccXmlFile` values."""
type EcccXmlFilesConnection {
  """
  A list of edges which contains the `EcccXmlFile` and cursor to aid in pagination.
  """
  edges: [EcccXmlFilesEdge!]!

  """A list of `EcccXmlFile` objects."""
  nodes: [EcccXmlFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccXmlFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccXmlFile` edge in the connection."""
type EcccXmlFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccXmlFile` at the end of the edge."""
  node: EcccXmlFile
}

"""Methods to use when ordering `EcccXmlFile`."""
enum EcccXmlFilesOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
  XML_FILE_MD5_HASH_ASC
  XML_FILE_MD5_HASH_DESC
  XML_FILE_NAME_ASC
  XML_FILE_NAME_DESC
  ZIP_FILE_ID_ASC
  ZIP_FILE_ID_DESC
}

"""The table listing the zip files imported from ECCC"""
type EcccZipFile implements Node {
  """number of errors recorded while extracting attachments"""
  attachmentsExtractErrorCount: Int

  """
  true if all attachments contained in the zip file were inserted in the eccc_attachment table
  """
  attachmentsExtracted: Boolean

  """Reads and enables pagination through a set of `EcccAttachment`."""
  ecccAttachmentsByZipFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsConnection!

  """Reads and enables pagination through a set of `EcccXmlFile`."""
  ecccXmlFilesByZipFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccXmlFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """number of errors recorded while extracting xml files"""
  xmlFilesExtractErrorCount: Int

  """
  true if all xml files contained in the zip file were inserted in the eccc_xml_file table
  """
  xmlFilesExtracted: Boolean

  """The unique md5 hash of the file"""
  zipFileMd5Hash: String

  """The name of the zip file"""
  zipFileName: String
}

"""
A condition to be used against `EcccZipFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccZipFileCondition {
  """
  Checks for equality with the object’s `attachmentsExtractErrorCount` field.
  """
  attachmentsExtractErrorCount: Int

  """Checks for equality with the object’s `attachmentsExtracted` field."""
  attachmentsExtracted: Boolean

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """
  Checks for equality with the object’s `xmlFilesExtractErrorCount` field.
  """
  xmlFilesExtractErrorCount: Int

  """Checks for equality with the object’s `xmlFilesExtracted` field."""
  xmlFilesExtracted: Boolean

  """Checks for equality with the object’s `zipFileMd5Hash` field."""
  zipFileMd5Hash: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""
A filter to be used against `EcccZipFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileFilter {
  """Checks for all expressions in this list."""
  and: [EcccZipFileFilter!]

  """Filter by the object’s `attachmentsExtractErrorCount` field."""
  attachmentsExtractErrorCount: IntFilter

  """Filter by the object’s `attachmentsExtracted` field."""
  attachmentsExtracted: BooleanFilter

  """Filter by the object’s `ecccAttachmentsByZipFileId` relation."""
  ecccAttachmentsByZipFileId: EcccZipFileToManyEcccAttachmentFilter

  """Some related `ecccAttachmentsByZipFileId` exist."""
  ecccAttachmentsByZipFileIdExist: Boolean

  """Filter by the object’s `ecccXmlFilesByZipFileId` relation."""
  ecccXmlFilesByZipFileId: EcccZipFileToManyEcccXmlFileFilter

  """Some related `ecccXmlFilesByZipFileId` exist."""
  ecccXmlFilesByZipFileIdExist: Boolean

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccZipFileFilter

  """Checks for any expressions in this list."""
  or: [EcccZipFileFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `xmlFilesExtractErrorCount` field."""
  xmlFilesExtractErrorCount: IntFilter

  """Filter by the object’s `xmlFilesExtracted` field."""
  xmlFilesExtracted: BooleanFilter

  """Filter by the object’s `zipFileMd5Hash` field."""
  zipFileMd5Hash: StringFilter

  """Filter by the object’s `zipFileName` field."""
  zipFileName: StringFilter
}

"""
A filter to be used against many `EcccAttachment` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileToManyEcccAttachmentFilter {
  """
  Every related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccAttachmentFilter

  """
  No related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccAttachmentFilter

  """
  Some related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccAttachmentFilter
}

"""
A filter to be used against many `EcccXmlFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileToManyEcccXmlFileFilter {
  """
  Every related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccXmlFileFilter

  """
  No related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccXmlFileFilter

  """
  Some related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccXmlFileFilter
}

"""A connection to a list of `EcccZipFile` values."""
type EcccZipFilesConnection {
  """
  A list of edges which contains the `EcccZipFile` and cursor to aid in pagination.
  """
  edges: [EcccZipFilesEdge!]!

  """A list of `EcccZipFile` objects."""
  nodes: [EcccZipFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccZipFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccZipFile` edge in the connection."""
type EcccZipFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccZipFile` at the end of the edge."""
  node: EcccZipFile
}

"""Methods to use when ordering `EcccZipFile`."""
enum EcccZipFilesOrderBy {
  ATTACHMENTS_EXTRACTED_ASC
  ATTACHMENTS_EXTRACTED_DESC
  ATTACHMENTS_EXTRACT_ERROR_COUNT_ASC
  ATTACHMENTS_EXTRACT_ERROR_COUNT_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILES_EXTRACTED_ASC
  XML_FILES_EXTRACTED_DESC
  XML_FILES_EXTRACT_ERROR_COUNT_ASC
  XML_FILES_EXTRACT_ERROR_COUNT_DESC
  ZIP_FILE_MD5_HASH_ASC
  ZIP_FILE_MD5_HASH_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

"""A connection to a list of `EmissionCategory` values."""
type EmissionCategoriesConnection {
  """
  A list of edges which contains the `EmissionCategory` and cursor to aid in pagination.
  """
  edges: [EmissionCategoriesEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionCategory` edge in the connection."""
type EmissionCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""Methods to use when ordering `EmissionCategory`."""
enum EmissionCategoriesOrderBy {
  CARBON_TAXED_ASC
  CARBON_TAXED_DESC
  CATEGORY_DEFINITION_ASC
  CATEGORY_DEFINITION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SWRS_EMISSION_CATEGORY_ASC
  SWRS_EMISSION_CATEGORY_DESC
}

"""
Table of emission categories used in the CIIP program as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
"""
type EmissionCategory implements Node {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the emission_category"""
  rowId: Int!

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""
A condition to be used against `EmissionCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmissionCategoryCondition {
  """Checks for equality with the object’s `carbonTaxed` field."""
  carbonTaxed: Boolean

  """Checks for equality with the object’s `categoryDefinition` field."""
  categoryDefinition: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: String
}

"""
A filter to be used against `EmissionCategory` object types. All fields are combined with a logical ‘and.’
"""
input EmissionCategoryFilter {
  """Checks for all expressions in this list."""
  and: [EmissionCategoryFilter!]

  """Filter by the object’s `carbonTaxed` field."""
  carbonTaxed: BooleanFilter

  """Filter by the object’s `categoryDefinition` field."""
  categoryDefinition: StringFilter

  """Negates the expression."""
  not: EmissionCategoryFilter

  """Checks for any expressions in this list."""
  or: [EmissionCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: StringFilter
}

"""An input for mutations affecting `EmissionCategory`"""
input EmissionCategoryInput {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""
Represents an update to a `EmissionCategory`. Fields that are set will be updated.
"""
input EmissionCategoryPatch {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""The fuel mapping table that maps fuel type with carbon tax rates"""
type FuelCarbonTaxDetail implements Node {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """The foreign key that maps to the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByFuelCarbonTaxDetailId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The internal primary key for the mapping"""
  rowId: Int!

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
A condition to be used against `FuelCarbonTaxDetail` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailCondition {
  """Checks for equality with the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: Int

  """Checks for equality with the object’s `ctaRateUnits` field."""
  ctaRateUnits: String

  """Checks for equality with the object’s `normalizedFuelType` field."""
  normalizedFuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `unitConversionFactor` field."""
  unitConversionFactor: BigFloat
}

"""
A filter to be used against `FuelCarbonTaxDetail` object types. All fields are combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailFilter {
  """Checks for all expressions in this list."""
  and: [FuelCarbonTaxDetailFilter!]

  """
  Filter by the object’s `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` relation.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeFilter

  """A related `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` exists."""
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeIdExists: Boolean

  """Filter by the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: IntFilter

  """Filter by the object’s `ctaRateUnits` field."""
  ctaRateUnits: StringFilter

  """Filter by the object’s `fuelMappingsByFuelCarbonTaxDetailId` relation."""
  fuelMappingsByFuelCarbonTaxDetailId: FuelCarbonTaxDetailToManyFuelMappingFilter

  """Some related `fuelMappingsByFuelCarbonTaxDetailId` exist."""
  fuelMappingsByFuelCarbonTaxDetailIdExist: Boolean

  """Filter by the object’s `normalizedFuelType` field."""
  normalizedFuelType: StringFilter

  """Negates the expression."""
  not: FuelCarbonTaxDetailFilter

  """Checks for any expressions in this list."""
  or: [FuelCarbonTaxDetailFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `unitConversionFactor` field."""
  unitConversionFactor: BigFloatFilter
}

"""An input for mutations affecting `FuelCarbonTaxDetail`"""
input FuelCarbonTaxDetailInput {
  """The foreign key that maps to the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
Represents an update to a `FuelCarbonTaxDetail`. Fields that are set will be updated.
"""
input FuelCarbonTaxDetailPatch {
  """The foreign key that maps to the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
A filter to be used against many `FuelMapping` object types. All fields are combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailToManyFuelMappingFilter {
  """
  Every related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelMappingFilter

  """
  No related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelMappingFilter

  """
  Some related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelMappingFilter
}

"""A connection to a list of `FuelCarbonTaxDetail` values."""
type FuelCarbonTaxDetailsConnection {
  """
  A list of edges which contains the `FuelCarbonTaxDetail` and cursor to aid in pagination.
  """
  edges: [FuelCarbonTaxDetailsEdge!]!

  """A list of `FuelCarbonTaxDetail` objects."""
  nodes: [FuelCarbonTaxDetail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FuelCarbonTaxDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FuelCarbonTaxDetail` edge in the connection."""
type FuelCarbonTaxDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelCarbonTaxDetail` at the end of the edge."""
  node: FuelCarbonTaxDetail
}

"""Methods to use when ordering `FuelCarbonTaxDetail`."""
enum FuelCarbonTaxDetailsOrderBy {
  CARBON_TAX_ACT_FUEL_TYPE_ID_ASC
  CARBON_TAX_ACT_FUEL_TYPE_ID_DESC
  CTA_RATE_UNITS_ASC
  CTA_RATE_UNITS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NORMALIZED_FUEL_TYPE_ASC
  NORMALIZED_FUEL_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATE_ASC
  STATE_DESC
  UNIT_CONVERSION_FACTOR_ASC
  UNIT_CONVERSION_FACTOR_DESC
}

"""
The fuel charge table contains the carbon tax fuel charge rate band for each fuel
"""
type FuelCharge implements Node {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The internal primary key"""
  rowId: Int!

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""
A condition to be used against `FuelCharge` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FuelChargeCondition {
  """Checks for equality with the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: Int

  """Checks for equality with the object’s `endDate` field."""
  endDate: Date

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `metadata` field."""
  metadata: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date
}

"""
A filter to be used against `FuelCharge` object types. All fields are combined with a logical ‘and.’
"""
input FuelChargeFilter {
  """Checks for all expressions in this list."""
  and: [FuelChargeFilter!]

  """
  Filter by the object’s `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` relation.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeFilter

  """A related `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` exists."""
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeIdExists: Boolean

  """Filter by the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: IntFilter

  """Filter by the object’s `endDate` field."""
  endDate: DateFilter

  """Filter by the object’s `fuelCharge` field."""
  fuelCharge: BigFloatFilter

  """Filter by the object’s `metadata` field."""
  metadata: StringFilter

  """Negates the expression."""
  not: FuelChargeFilter

  """Checks for any expressions in this list."""
  or: [FuelChargeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `startDate` field."""
  startDate: DateFilter
}

"""An input for mutations affecting `FuelCharge`"""
input FuelChargeInput {
  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""
Represents an update to a `FuelCharge`. Fields that are set will be updated.
"""
input FuelChargePatch {
  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""A connection to a list of `FuelCharge` values."""
type FuelChargesConnection {
  """
  A list of edges which contains the `FuelCharge` and cursor to aid in pagination.
  """
  edges: [FuelChargesEdge!]!

  """A list of `FuelCharge` objects."""
  nodes: [FuelCharge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelCharge` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelCharge` edge in the connection."""
type FuelChargesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelCharge` at the end of the edge."""
  node: FuelCharge
}

"""Methods to use when ordering `FuelCharge`."""
enum FuelChargesOrderBy {
  CARBON_TAX_ACT_FUEL_TYPE_ID_ASC
  CARBON_TAX_ACT_FUEL_TYPE_ID_DESC
  END_DATE_ASC
  END_DATE_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  START_DATE_ASC
  START_DATE_DESC
}

"""
The fuel mapping table that maps all reported fuel types from swrs to a normalized fuel type with carbon tax details
"""
type FuelMapping implements Node {
  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetail

  """The foreign key to ggircs_parameters.fuel_carbon_tax_detail"""
  fuelCarbonTaxDetailId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `FuelMapping` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FuelMappingCondition {
  """Checks for equality with the object’s `fuelCarbonTaxDetailId` field."""
  fuelCarbonTaxDetailId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `FuelMapping` object types. All fields are combined with a logical ‘and.’
"""
input FuelMappingFilter {
  """Checks for all expressions in this list."""
  and: [FuelMappingFilter!]

  """
  Filter by the object’s `fuelCarbonTaxDetailByFuelCarbonTaxDetailId` relation.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetailFilter

  """A related `fuelCarbonTaxDetailByFuelCarbonTaxDetailId` exists."""
  fuelCarbonTaxDetailByFuelCarbonTaxDetailIdExists: Boolean

  """Filter by the object’s `fuelCarbonTaxDetailId` field."""
  fuelCarbonTaxDetailId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: FuelMappingFilter

  """Checks for any expressions in this list."""
  or: [FuelMappingFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `FuelMapping`"""
input FuelMappingInput {
  """The foreign key to ggircs_parameters.fuel_carbon_tax_detail"""
  fuelCarbonTaxDetailId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String
}

"""
Represents an update to a `FuelMapping`. Fields that are set will be updated.
"""
input FuelMappingPatch {
  """The foreign key to ggircs_parameters.fuel_carbon_tax_detail"""
  fuelCarbonTaxDetailId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String
}

"""A connection to a list of `FuelMapping` values."""
type FuelMappingsConnection {
  """
  A list of edges which contains the `FuelMapping` and cursor to aid in pagination.
  """
  edges: [FuelMappingsEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection."""
type FuelMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""Methods to use when ordering `FuelMapping`."""
enum FuelMappingsOrderBy {
  FUEL_CARBON_TAX_DETAIL_ID_ASC
  FUEL_CARBON_TAX_DETAIL_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Table containing the benchmark and eligibility threshold for a product"""
type GgircsUser implements Node {
  """The date this record was inserted"""
  createdAt: Datetime!

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  ecccFileDownloadLogsByDownloadedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccFileDownloadLogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection!

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Unique ID for the user"""
  rowId: Int!

  """The date this record was last updated"""
  updatedAt: Datetime!

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A condition to be used against `GgircsUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GgircsUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `GgircsUser` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserFilter {
  """Checks for all expressions in this list."""
  and: [GgircsUserFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `ecccFileDownloadLogsByDownloadedBy` relation."""
  ecccFileDownloadLogsByDownloadedBy: GgircsUserToManyEcccFileDownloadLogFilter

  """Some related `ecccFileDownloadLogsByDownloadedBy` exist."""
  ecccFileDownloadLogsByDownloadedByExist: Boolean

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `ggircsUserByCreatedBy` relation."""
  ggircsUserByCreatedBy: GgircsUserFilter

  """A related `ggircsUserByCreatedBy` exists."""
  ggircsUserByCreatedByExists: Boolean

  """Filter by the object’s `ggircsUserByDeletedBy` relation."""
  ggircsUserByDeletedBy: GgircsUserFilter

  """A related `ggircsUserByDeletedBy` exists."""
  ggircsUserByDeletedByExists: Boolean

  """Filter by the object’s `ggircsUserByUpdatedBy` relation."""
  ggircsUserByUpdatedBy: GgircsUserFilter

  """A related `ggircsUserByUpdatedBy` exists."""
  ggircsUserByUpdatedByExists: Boolean

  """Filter by the object’s `ggircsUsersByCreatedBy` relation."""
  ggircsUsersByCreatedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByCreatedBy` exist."""
  ggircsUsersByCreatedByExist: Boolean

  """Filter by the object’s `ggircsUsersByDeletedBy` relation."""
  ggircsUsersByDeletedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByDeletedBy` exist."""
  ggircsUsersByDeletedByExist: Boolean

  """Filter by the object’s `ggircsUsersByUpdatedBy` relation."""
  ggircsUsersByUpdatedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByUpdatedBy` exist."""
  ggircsUsersByUpdatedByExist: Boolean

  """Filter by the object’s `jwtTokensBySub` relation."""
  jwtTokensBySub: GgircsUserToManyJwtTokenFilter

  """Some related `jwtTokensBySub` exist."""
  jwtTokensBySubExist: Boolean

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: GgircsUserFilter

  """Checks for any expressions in this list."""
  or: [GgircsUserFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""An input for mutations affecting `GgircsUser`"""
input GgircsUserInput {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
Represents an update to a `GgircsUser`. Fields that are set will be updated.
"""
input GgircsUserPatch {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""
A filter to be used against many `EcccFileDownloadLog` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyEcccFileDownloadLogFilter {
  """
  Every related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccFileDownloadLogFilter

  """
  No related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccFileDownloadLogFilter

  """
  Some related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccFileDownloadLogFilter
}

"""
A filter to be used against many `GgircsUser` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyGgircsUserFilter {
  """
  Every related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GgircsUserFilter

  """
  No related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GgircsUserFilter

  """
  Some related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GgircsUserFilter
}

"""
A filter to be used against many `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyJwtTokenFilter {
  """
  Every related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JwtTokenFilter

  """
  No related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JwtTokenFilter

  """
  Some related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JwtTokenFilter
}

"""A connection to a list of `GgircsUser` values."""
type GgircsUsersConnection {
  """
  A list of edges which contains the `GgircsUser` and cursor to aid in pagination.
  """
  edges: [GgircsUsersEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection."""
type GgircsUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""Methods to use when ordering `GgircsUser`."""
enum GgircsUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""
The raw xml files imported from existing legacy GHGR database in Oracle
"""
type GhgrImport implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  xmlFile: String!
}

"""
A condition to be used against `GhgrImport` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GhgrImportCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String
}

"""
A filter to be used against `GhgrImport` object types. All fields are combined with a logical ‘and.’
"""
input GhgrImportFilter {
  """Checks for all expressions in this list."""
  and: [GhgrImportFilter!]

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: GhgrImportFilter

  """Checks for any expressions in this list."""
  or: [GhgrImportFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""A connection to a list of `GhgrImport` values."""
type GhgrImportsConnection {
  """
  A list of edges which contains the `GhgrImport` and cursor to aid in pagination.
  """
  edges: [GhgrImportsEdge!]!

  """A list of `GhgrImport` objects."""
  nodes: [GhgrImport]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GhgrImport` you could get from the connection."""
  totalCount: Int!
}

"""A `GhgrImport` edge in the connection."""
type GhgrImportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GhgrImport` at the end of the edge."""
  node: GhgrImport
}

"""Methods to use when ordering `GhgrImport`."""
enum GhgrImportsOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type JwtToken {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String

  """Reads a single `GgircsUser` that is related to this `JwtToken`."""
  ggircsUserBySub: GgircsUser
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input JwtTokenFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [JwtTokenFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `ggircsUserBySub` relation."""
  ggircsUserBySub: GgircsUserFilter

  """A related `ggircsUserBySub` exists."""
  ggircsUserBySubExists: Boolean

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: JwtTokenFilter

  """Checks for any expressions in this list."""
  or: [JwtTokenFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `CarbonTaxActFuelType`."""
  createCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCarbonTaxActFuelTypeInput!
  ): CreateCarbonTaxActFuelTypePayload

  """Creates a single `EcccAttachment`."""
  createEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEcccAttachmentInput!
  ): CreateEcccAttachmentPayload

  """Creates a single `EcccFileDownloadLog`."""
  createEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEcccFileDownloadLogInput!
  ): CreateEcccFileDownloadLogPayload

  """Creates a single `EmissionCategory`."""
  createEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionCategoryInput!
  ): CreateEmissionCategoryPayload

  """Creates a single `FuelCarbonTaxDetail`."""
  createFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelCarbonTaxDetailInput!
  ): CreateFuelCarbonTaxDetailPayload

  """Creates a single `FuelCharge`."""
  createFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelChargeInput!
  ): CreateFuelChargePayload

  """Creates a single `FuelMapping`."""
  createFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelMappingInput!
  ): CreateFuelMappingPayload
  createFuelMappingCascade(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelMappingCascadeInput!
  ): CreateFuelMappingCascadePayload

  """Creates a single `GgircsUser`."""
  createGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserInput!
  ): CreateGgircsUserPayload
  createGgircsUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserFromSessionInput!
  ): CreateGgircsUserFromSessionPayload

  """Creates a single `NaicsCategory`."""
  createNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsCategoryInput!
  ): CreateNaicsCategoryPayload

  """Creates a single `NaicsNaicsCategory`."""
  createNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsNaicsCategoryInput!
  ): CreateNaicsNaicsCategoryPayload

  """Creates a single `TaxedVentingEmissionType`."""
  createTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaxedVentingEmissionTypeInput!
  ): CreateTaxedVentingEmissionTypePayload

  """Deletes a single `CarbonTaxActFuelType` using its globally unique id."""
  deleteCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxActFuelTypeInput!
  ): DeleteCarbonTaxActFuelTypePayload

  """Deletes a single `CarbonTaxActFuelType` using a unique key."""
  deleteCarbonTaxActFuelTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxActFuelTypeByRowIdInput!
  ): DeleteCarbonTaxActFuelTypePayload

  """Deletes a single `EcccAttachment` using its globally unique id."""
  deleteEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccAttachmentInput!
  ): DeleteEcccAttachmentPayload

  """Deletes a single `EcccAttachment` using a unique key."""
  deleteEcccAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccAttachmentByRowIdInput!
  ): DeleteEcccAttachmentPayload

  """Deletes a single `EcccFileDownloadLog` using its globally unique id."""
  deleteEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `EcccFileDownloadLog` using a unique key."""
  deleteEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogByRowIdInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `EmissionCategory` using its globally unique id."""
  deleteEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategory` using a unique key."""
  deleteEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryByRowIdInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategory` using a unique key."""
  deleteEmissionCategoryBySwrsEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryBySwrsEmissionCategoryInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `FuelCarbonTaxDetail` using its globally unique id."""
  deleteFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelCarbonTaxDetailInput!
  ): DeleteFuelCarbonTaxDetailPayload

  """Deletes a single `FuelCarbonTaxDetail` using a unique key."""
  deleteFuelCarbonTaxDetailByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelCarbonTaxDetailByRowIdInput!
  ): DeleteFuelCarbonTaxDetailPayload

  """Deletes a single `FuelCharge` using its globally unique id."""
  deleteFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelChargeInput!
  ): DeleteFuelChargePayload

  """Deletes a single `FuelCharge` using a unique key."""
  deleteFuelChargeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelChargeByRowIdInput!
  ): DeleteFuelChargePayload

  """Deletes a single `FuelMapping` using its globally unique id."""
  deleteFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelMappingInput!
  ): DeleteFuelMappingPayload

  """Deletes a single `FuelMapping` using a unique key."""
  deleteFuelMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelMappingByRowIdInput!
  ): DeleteFuelMappingPayload

  """Deletes a single `GgircsUser` using its globally unique id."""
  deleteGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserInput!
  ): DeleteGgircsUserPayload

  """Deletes a single `GgircsUser` using a unique key."""
  deleteGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserByRowIdInput!
  ): DeleteGgircsUserPayload

  """Deletes a single `NaicsCategory` using its globally unique id."""
  deleteNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryInput!
  ): DeleteNaicsCategoryPayload

  """Deletes a single `NaicsCategory` using a unique key."""
  deleteNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryByRowIdInput!
  ): DeleteNaicsCategoryPayload

  """Deletes a single `NaicsNaicsCategory` using its globally unique id."""
  deleteNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsNaicsCategoryInput!
  ): DeleteNaicsNaicsCategoryPayload

  """Deletes a single `NaicsNaicsCategory` using a unique key."""
  deleteNaicsNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsNaicsCategoryByRowIdInput!
  ): DeleteNaicsNaicsCategoryPayload

  """
  Deletes a single `TaxedVentingEmissionType` using its globally unique id.
  """
  deleteTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxedVentingEmissionTypeInput!
  ): DeleteTaxedVentingEmissionTypePayload

  """Deletes a single `TaxedVentingEmissionType` using a unique key."""
  deleteTaxedVentingEmissionTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxedVentingEmissionTypeByRowIdInput!
  ): DeleteTaxedVentingEmissionTypePayload

  """
  Updates a single `CarbonTaxActFuelType` using its globally unique id and a patch.
  """
  updateCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxActFuelTypeInput!
  ): UpdateCarbonTaxActFuelTypePayload

  """
  Updates a single `CarbonTaxActFuelType` using a unique key and a patch.
  """
  updateCarbonTaxActFuelTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxActFuelTypeByRowIdInput!
  ): UpdateCarbonTaxActFuelTypePayload

  """
  Updates a single `EcccAttachment` using its globally unique id and a patch.
  """
  updateEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccAttachmentInput!
  ): UpdateEcccAttachmentPayload

  """Updates a single `EcccAttachment` using a unique key and a patch."""
  updateEcccAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccAttachmentByRowIdInput!
  ): UpdateEcccAttachmentPayload

  """
  Updates a single `EcccFileDownloadLog` using its globally unique id and a patch.
  """
  updateEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogInput!
  ): UpdateEcccFileDownloadLogPayload

  """Updates a single `EcccFileDownloadLog` using a unique key and a patch."""
  updateEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogByRowIdInput!
  ): UpdateEcccFileDownloadLogPayload

  """
  Updates a single `EmissionCategory` using its globally unique id and a patch.
  """
  updateEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `EmissionCategory` using a unique key and a patch."""
  updateEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryByRowIdInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `EmissionCategory` using a unique key and a patch."""
  updateEmissionCategoryBySwrsEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryBySwrsEmissionCategoryInput!
  ): UpdateEmissionCategoryPayload

  """
  Updates a single `FuelCarbonTaxDetail` using its globally unique id and a patch.
  """
  updateFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelCarbonTaxDetailInput!
  ): UpdateFuelCarbonTaxDetailPayload

  """Updates a single `FuelCarbonTaxDetail` using a unique key and a patch."""
  updateFuelCarbonTaxDetailByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelCarbonTaxDetailByRowIdInput!
  ): UpdateFuelCarbonTaxDetailPayload

  """
  Updates a single `FuelCharge` using its globally unique id and a patch.
  """
  updateFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelChargeInput!
  ): UpdateFuelChargePayload

  """Updates a single `FuelCharge` using a unique key and a patch."""
  updateFuelChargeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelChargeByRowIdInput!
  ): UpdateFuelChargePayload

  """
  Updates a single `FuelMapping` using its globally unique id and a patch.
  """
  updateFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelMappingInput!
  ): UpdateFuelMappingPayload

  """Updates a single `FuelMapping` using a unique key and a patch."""
  updateFuelMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelMappingByRowIdInput!
  ): UpdateFuelMappingPayload

  """
  Updates a single `GgircsUser` using its globally unique id and a patch.
  """
  updateGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserInput!
  ): UpdateGgircsUserPayload

  """Updates a single `GgircsUser` using a unique key and a patch."""
  updateGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserByRowIdInput!
  ): UpdateGgircsUserPayload

  """
  Updates a single `NaicsCategory` using its globally unique id and a patch.
  """
  updateNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryInput!
  ): UpdateNaicsCategoryPayload

  """Updates a single `NaicsCategory` using a unique key and a patch."""
  updateNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryByRowIdInput!
  ): UpdateNaicsCategoryPayload

  """
  Updates a single `NaicsNaicsCategory` using its globally unique id and a patch.
  """
  updateNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsNaicsCategoryInput!
  ): UpdateNaicsNaicsCategoryPayload

  """Updates a single `NaicsNaicsCategory` using a unique key and a patch."""
  updateNaicsNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsNaicsCategoryByRowIdInput!
  ): UpdateNaicsNaicsCategoryPayload

  """
  Updates a single `TaxedVentingEmissionType` using its globally unique id and a patch.
  """
  updateTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxedVentingEmissionTypeInput!
  ): UpdateTaxedVentingEmissionTypePayload

  """
  Updates a single `TaxedVentingEmissionType` using a unique key and a patch.
  """
  updateTaxedVentingEmissionTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxedVentingEmissionTypeByRowIdInput!
  ): UpdateTaxedVentingEmissionTypePayload
}

"""A connection to a list of `NaicsCategory` values."""
type NaicsCategoriesConnection {
  """
  A list of edges which contains the `NaicsCategory` and cursor to aid in pagination.
  """
  edges: [NaicsCategoriesEdge!]!

  """A list of `NaicsCategory` objects."""
  nodes: [NaicsCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NaicsCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `NaicsCategory` edge in the connection."""
type NaicsCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsCategory` at the end of the edge."""
  node: NaicsCategory
}

"""Methods to use when ordering `NaicsCategory`."""
enum NaicsCategoriesOrderBy {
  ID_ASC
  ID_DESC
  NAICS_CATEGORY_ASC
  NAICS_CATEGORY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The fuel mapping table that maps naics codes with hhw and irc categories
"""
type NaicsCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The naics category"""
  naicsCategory: String

  """Reads and enables pagination through a set of `NaicsNaicsCategory`."""
  naicsNaicsCategoriesByCategoryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsNaicsCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsNaicsCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesConnection!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsCategoryCondition {
  """Checks for equality with the object’s `naicsCategory` field."""
  naicsCategory: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsCategory` object types. All fields are combined with a logical ‘and.’
"""
input NaicsCategoryFilter {
  """Checks for all expressions in this list."""
  and: [NaicsCategoryFilter!]

  """Filter by the object’s `naicsCategory` field."""
  naicsCategory: StringFilter

  """Filter by the object’s `naicsNaicsCategoriesByCategoryId` relation."""
  naicsNaicsCategoriesByCategoryId: NaicsCategoryToManyNaicsNaicsCategoryFilter

  """Some related `naicsNaicsCategoriesByCategoryId` exist."""
  naicsNaicsCategoriesByCategoryIdExist: Boolean

  """Negates the expression."""
  not: NaicsCategoryFilter

  """Checks for any expressions in this list."""
  or: [NaicsCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsCategory`"""
input NaicsCategoryInput {
  """The naics category"""
  naicsCategory: String
}

"""
Represents an update to a `NaicsCategory`. Fields that are set will be updated.
"""
input NaicsCategoryPatch {
  """The naics category"""
  naicsCategory: String
}

"""
A filter to be used against many `NaicsNaicsCategory` object types. All fields are combined with a logical ‘and.’
"""
input NaicsCategoryToManyNaicsNaicsCategoryFilter {
  """
  Every related `NaicsNaicsCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NaicsNaicsCategoryFilter

  """
  No related `NaicsNaicsCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NaicsNaicsCategoryFilter

  """
  Some related `NaicsNaicsCategory` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NaicsNaicsCategoryFilter
}

"""A connection to a list of `NaicsNaicsCategory` values."""
type NaicsNaicsCategoriesConnection {
  """
  A list of edges which contains the `NaicsNaicsCategory` and cursor to aid in pagination.
  """
  edges: [NaicsNaicsCategoriesEdge!]!

  """A list of `NaicsNaicsCategory` objects."""
  nodes: [NaicsNaicsCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NaicsNaicsCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NaicsNaicsCategory` edge in the connection."""
type NaicsNaicsCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsNaicsCategory` at the end of the edge."""
  node: NaicsNaicsCategory
}

"""Methods to use when ordering `NaicsNaicsCategory`."""
enum NaicsNaicsCategoriesOrderBy {
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  ID_ASC
  ID_DESC
  NAICS_CODE_PATTERN_ASC
  NAICS_CODE_PATTERN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The fuel mapping table that maps naics codes with hhw and irc categories
"""
type NaicsNaicsCategory implements Node {
  """The foreign key for the category"""
  categoryId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `NaicsCategory` that is related to this `NaicsNaicsCategory`.
  """
  naicsCategoryByCategoryId: NaicsCategory

  """The naics code pattern"""
  naicsCodePattern: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsNaicsCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsNaicsCategoryCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `naicsCodePattern` field."""
  naicsCodePattern: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsNaicsCategory` object types. All fields are combined with a logical ‘and.’
"""
input NaicsNaicsCategoryFilter {
  """Checks for all expressions in this list."""
  and: [NaicsNaicsCategoryFilter!]

  """Filter by the object’s `categoryId` field."""
  categoryId: IntFilter

  """Filter by the object’s `naicsCategoryByCategoryId` relation."""
  naicsCategoryByCategoryId: NaicsCategoryFilter

  """A related `naicsCategoryByCategoryId` exists."""
  naicsCategoryByCategoryIdExists: Boolean

  """Filter by the object’s `naicsCodePattern` field."""
  naicsCodePattern: StringFilter

  """Negates the expression."""
  not: NaicsNaicsCategoryFilter

  """Checks for any expressions in this list."""
  or: [NaicsNaicsCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsNaicsCategory`"""
input NaicsNaicsCategoryInput {
  """The foreign key for the category"""
  categoryId: Int

  """The naics code pattern"""
  naicsCodePattern: String
}

"""
Represents an update to a `NaicsNaicsCategory`. Fields that are set will be updated.
"""
input NaicsNaicsCategoryPatch {
  """The foreign key for the category"""
  categoryId: Int

  """The naics code pattern"""
  naicsCodePattern: String
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `CarbonTaxActFuelType`."""
  allCarbonTaxActFuelTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarbonTaxActFuelTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CarbonTaxActFuelTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesConnection

  """Reads and enables pagination through a set of `EcccAttachment`."""
  allEcccAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsConnection

  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  allEcccFileDownloadLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccFileDownloadLogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection

  """Reads and enables pagination through a set of `EcccXmlFile`."""
  allEcccXmlFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccXmlFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection

  """Reads and enables pagination through a set of `EcccZipFile`."""
  allEcccZipFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccZipFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccZipFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccZipFile`."""
    orderBy: [EcccZipFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccZipFilesConnection

  """Reads and enables pagination through a set of `EmissionCategory`."""
  allEmissionCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection

  """Reads and enables pagination through a set of `FuelCarbonTaxDetail`."""
  allFuelCarbonTaxDetails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCarbonTaxDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelCarbonTaxDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsConnection

  """Reads and enables pagination through a set of `FuelCharge`."""
  allFuelCharges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelChargeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelChargeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesConnection

  """Reads and enables pagination through a set of `FuelMapping`."""
  allFuelMappings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsConnection

  """Reads and enables pagination through a set of `GgircsUser`."""
  allGgircsUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection

  """Reads and enables pagination through a set of `GhgrImport`."""
  allGhgrImports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GhgrImportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GhgrImportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GhgrImport`."""
    orderBy: [GhgrImportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GhgrImportsConnection

  """Reads and enables pagination through a set of `NaicsCategory`."""
  allNaicsCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesConnection

  """Reads and enables pagination through a set of `NaicsNaicsCategory`."""
  allNaicsNaicsCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsNaicsCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsNaicsCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesConnection

  """Reads and enables pagination through a set of `ReportAttachment`."""
  allReportAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection

  """Reads and enables pagination through a set of `Report`."""
  allReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection

  """
  Reads and enables pagination through a set of `TaxedVentingEmissionType`.
  """
  allTaxedVentingEmissionTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaxedVentingEmissionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaxedVentingEmissionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesConnection

  """Reads a single `CarbonTaxActFuelType` using its globally unique `ID`."""
  carbonTaxActFuelType(
    """
    The globally unique `ID` to be used in selecting a single `CarbonTaxActFuelType`.
    """
    id: ID!
  ): CarbonTaxActFuelType
  carbonTaxActFuelTypeByRowId(rowId: Int!): CarbonTaxActFuelType

  """Reads a single `EcccAttachment` using its globally unique `ID`."""
  ecccAttachment(
    """
    The globally unique `ID` to be used in selecting a single `EcccAttachment`.
    """
    id: ID!
  ): EcccAttachment
  ecccAttachmentByRowId(rowId: Int!): EcccAttachment

  """Reads a single `EcccFileDownloadLog` using its globally unique `ID`."""
  ecccFileDownloadLog(
    """
    The globally unique `ID` to be used in selecting a single `EcccFileDownloadLog`.
    """
    id: ID!
  ): EcccFileDownloadLog
  ecccFileDownloadLogByRowId(rowId: Int!): EcccFileDownloadLog

  """Reads a single `EcccXmlFile` using its globally unique `ID`."""
  ecccXmlFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccXmlFile`.
    """
    id: ID!
  ): EcccXmlFile
  ecccXmlFileByRowId(rowId: Int!): EcccXmlFile

  """Reads a single `EcccZipFile` using its globally unique `ID`."""
  ecccZipFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccZipFile`.
    """
    id: ID!
  ): EcccZipFile
  ecccZipFileByRowId(rowId: Int!): EcccZipFile

  """Reads a single `EmissionCategory` using its globally unique `ID`."""
  emissionCategory(
    """
    The globally unique `ID` to be used in selecting a single `EmissionCategory`.
    """
    id: ID!
  ): EmissionCategory
  emissionCategoryByRowId(rowId: Int!): EmissionCategory
  emissionCategoryBySwrsEmissionCategory(swrsEmissionCategory: String!): EmissionCategory

  """Reads a single `FuelCarbonTaxDetail` using its globally unique `ID`."""
  fuelCarbonTaxDetail(
    """
    The globally unique `ID` to be used in selecting a single `FuelCarbonTaxDetail`.
    """
    id: ID!
  ): FuelCarbonTaxDetail
  fuelCarbonTaxDetailByRowId(rowId: Int!): FuelCarbonTaxDetail

  """Reads a single `FuelCharge` using its globally unique `ID`."""
  fuelCharge(
    """
    The globally unique `ID` to be used in selecting a single `FuelCharge`.
    """
    id: ID!
  ): FuelCharge
  fuelChargeByRowId(rowId: Int!): FuelCharge

  """Reads a single `FuelMapping` using its globally unique `ID`."""
  fuelMapping(
    """
    The globally unique `ID` to be used in selecting a single `FuelMapping`.
    """
    id: ID!
  ): FuelMapping
  fuelMappingByRowId(rowId: Int!): FuelMapping

  """Reads a single `GgircsUser` using its globally unique `ID`."""
  ggircsUser(
    """
    The globally unique `ID` to be used in selecting a single `GgircsUser`.
    """
    id: ID!
  ): GgircsUser
  ggircsUserByRowId(rowId: Int!): GgircsUser

  """Reads a single `GhgrImport` using its globally unique `ID`."""
  ghgrImport(
    """
    The globally unique `ID` to be used in selecting a single `GhgrImport`.
    """
    id: ID!
  ): GhgrImport
  ghgrImportByRowId(rowId: Int!): GhgrImport

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Reads a single `NaicsCategory` using its globally unique `ID`."""
  naicsCategory(
    """
    The globally unique `ID` to be used in selecting a single `NaicsCategory`.
    """
    id: ID!
  ): NaicsCategory
  naicsCategoryByRowId(rowId: Int!): NaicsCategory

  """Reads a single `NaicsNaicsCategory` using its globally unique `ID`."""
  naicsNaicsCategory(
    """
    The globally unique `ID` to be used in selecting a single `NaicsNaicsCategory`.
    """
    id: ID!
  ): NaicsNaicsCategory
  naicsNaicsCategoryByRowId(rowId: Int!): NaicsNaicsCategory

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Report` using its globally unique `ID`."""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    id: ID!
  ): Report

  """Reads a single `ReportAttachment` using its globally unique `ID`."""
  reportAttachment(
    """
    The globally unique `ID` to be used in selecting a single `ReportAttachment`.
    """
    id: ID!
  ): ReportAttachment
  reportAttachmentByRowId(rowId: Int!): ReportAttachment
  reportByRowId(rowId: Int!): Report
  session: JwtToken

  """
  Reads a single `TaxedVentingEmissionType` using its globally unique `ID`.
  """
  taxedVentingEmissionType(
    """
    The globally unique `ID` to be used in selecting a single `TaxedVentingEmissionType`.
    """
    id: ID!
  ): TaxedVentingEmissionType
  taxedVentingEmissionTypeByRowId(rowId: Int!): TaxedVentingEmissionType

  """
  A custom function to return fuel types that are not mapped to a fuel type in the fuel_mapping table.
  """
  unmappedFuel(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnmappedFuelRecordFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UnmappedFuelConnection
}

type Report implements Node {
  co2Bioc: BigFloat

  """Reads a single `EcccXmlFile` that is related to this `Report`."""
  ecccXmlFileByEcccXmlFileId: EcccXmlFile

  """The internal primary key for the file"""
  ecccXmlFileId: Int
  grandTotalLessCo2Bioc: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime

  """The person who last modified the report"""
  lastModifiedBy: String

  """The timestamp recorded in SWRS when the report was last modified"""
  lastModifiedDate: Datetime
  latestSwrsReport: Report

  """The prepop report id"""
  prepopReportId: Int

  """Reads and enables pagination through a set of `ReportAttachment`."""
  reportAttachmentsByReportId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection!

  """The type of report"""
  reportType: String
  reportingOnlyGrandTotal: BigFloat

  """The length of the reporting period contained in report"""
  reportingPeriodDuration: Int

  """The primary key"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  sourceXml: String

  """The status of the report"""
  status: String

  """The date the report was submitted"""
  submissionDate: Datetime

  """The ID for the reporting facility"""
  swrsFacilityId: Int

  """The ID for the reporting organisation"""
  swrsOrganisationId: Int

  """The swrs report id"""
  swrsReportId: Int!

  """
  The total quantity of CO2bioC reported in this report. Used by compliance and enforcement
  """
  updateComment: String

  """The report version"""
  version: String
}

type ReportAttachment implements Node {
  comment: String

  """The file_number corresponds to the type of attachment"""
  fileNumber: Int

  """The complete filepath to the attachment within zip_file_name"""
  filePath: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Denotes whether or not this attachment is required. Can be one of [Optional, Required]
  """
  informationRequirement: String

  """Comments relating to a specific attachment or the report itself"""
  md5Hash: String

  """
  The process_name in this context describes the type of attachment (ie: Process Flow Diagram)
  """
  processName: String

  """Reads a single `Report` that is related to this `ReportAttachment`."""
  reportByReportId: Report

  """The foreign key to the report this attachment belongs to"""
  reportId: Int

  """A generated index used for keying in the ggircs schema"""
  rowId: Int!

  """
  The sub_process_name in this context is a more in-depth description of this attachment
  """
  subProcessName: String

  """The date of upload"""
  uploadedAt: Datetime

  """The name of the user who uploaded the attachment file"""
  uploadedBy: String

  """The name of the attachment file that was uploaded"""
  uploadedFileName: String

  """The name of the zip file containing the attachment"""
  zipFileName: String
}

"""
A condition to be used against `ReportAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportAttachmentCondition {
  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `fileNumber` field."""
  fileNumber: Int

  """Checks for equality with the object’s `filePath` field."""
  filePath: String

  """Checks for equality with the object’s `informationRequirement` field."""
  informationRequirement: String

  """Checks for equality with the object’s `md5Hash` field."""
  md5Hash: String

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subProcessName` field."""
  subProcessName: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Datetime

  """Checks for equality with the object’s `uploadedBy` field."""
  uploadedBy: String

  """Checks for equality with the object’s `uploadedFileName` field."""
  uploadedFileName: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""
A filter to be used against `ReportAttachment` object types. All fields are combined with a logical ‘and.’
"""
input ReportAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [ReportAttachmentFilter!]

  """Filter by the object’s `comment` field."""
  comment: StringFilter

  """Filter by the object’s `fileNumber` field."""
  fileNumber: IntFilter

  """Filter by the object’s `filePath` field."""
  filePath: StringFilter

  """Filter by the object’s `informationRequirement` field."""
  informationRequirement: StringFilter

  """Filter by the object’s `md5Hash` field."""
  md5Hash: StringFilter

  """Negates the expression."""
  not: ReportAttachmentFilter

  """Checks for any expressions in this list."""
  or: [ReportAttachmentFilter!]

  """Filter by the object’s `processName` field."""
  processName: StringFilter

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """A related `reportByReportId` exists."""
  reportByReportIdExists: Boolean

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subProcessName` field."""
  subProcessName: StringFilter

  """Filter by the object’s `uploadedAt` field."""
  uploadedAt: DatetimeFilter

  """Filter by the object’s `uploadedBy` field."""
  uploadedBy: StringFilter

  """Filter by the object’s `uploadedFileName` field."""
  uploadedFileName: StringFilter

  """Filter by the object’s `zipFileName` field."""
  zipFileName: StringFilter
}

"""A connection to a list of `ReportAttachment` values."""
type ReportAttachmentsConnection {
  """
  A list of edges which contains the `ReportAttachment` and cursor to aid in pagination.
  """
  edges: [ReportAttachmentsEdge!]!

  """A list of `ReportAttachment` objects."""
  nodes: [ReportAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReportAttachment` edge in the connection."""
type ReportAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportAttachment` at the end of the edge."""
  node: ReportAttachment
}

"""Methods to use when ordering `ReportAttachment`."""
enum ReportAttachmentsOrderBy {
  COMMENT_ASC
  COMMENT_DESC
  FILE_NUMBER_ASC
  FILE_NUMBER_DESC
  FILE_PATH_ASC
  FILE_PATH_DESC
  ID_ASC
  ID_DESC
  INFORMATION_REQUIREMENT_ASC
  INFORMATION_REQUIREMENT_DESC
  MD5_HASH_ASC
  MD5_HASH_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_PROCESS_NAME_ASC
  SUB_PROCESS_NAME_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  UPLOADED_BY_ASC
  UPLOADED_BY_DESC
  UPLOADED_FILE_NAME_ASC
  UPLOADED_FILE_NAME_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

"""
A condition to be used against `Report` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReportCondition {
  """Checks for equality with the object’s `co2Bioc` field."""
  co2Bioc: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `grandTotalLessCo2Bioc` field."""
  grandTotalLessCo2Bioc: BigFloat

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `lastModifiedBy` field."""
  lastModifiedBy: String

  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Datetime

  """Checks for equality with the object’s `prepopReportId` field."""
  prepopReportId: Int

  """Checks for equality with the object’s `reportType` field."""
  reportType: String

  """Checks for equality with the object’s `reportingOnlyGrandTotal` field."""
  reportingOnlyGrandTotal: BigFloat

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sourceXml` field."""
  sourceXml: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `version` field."""
  version: String
}

"""
A filter to be used against `Report` object types. All fields are combined with a logical ‘and.’
"""
input ReportFilter {
  """Checks for all expressions in this list."""
  and: [ReportFilter!]

  """Filter by the object’s `co2Bioc` field."""
  co2Bioc: BigFloatFilter

  """Filter by the object’s `ecccXmlFileByEcccXmlFileId` relation."""
  ecccXmlFileByEcccXmlFileId: EcccXmlFileFilter

  """A related `ecccXmlFileByEcccXmlFileId` exists."""
  ecccXmlFileByEcccXmlFileIdExists: Boolean

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `grandTotalLessCo2Bioc` field."""
  grandTotalLessCo2Bioc: BigFloatFilter

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Filter by the object’s `lastModifiedBy` field."""
  lastModifiedBy: StringFilter

  """Filter by the object’s `lastModifiedDate` field."""
  lastModifiedDate: DatetimeFilter

  """Negates the expression."""
  not: ReportFilter

  """Checks for any expressions in this list."""
  or: [ReportFilter!]

  """Filter by the object’s `prepopReportId` field."""
  prepopReportId: IntFilter

  """Filter by the object’s `reportAttachmentsByReportId` relation."""
  reportAttachmentsByReportId: ReportToManyReportAttachmentFilter

  """Some related `reportAttachmentsByReportId` exist."""
  reportAttachmentsByReportIdExist: Boolean

  """Filter by the object’s `reportType` field."""
  reportType: StringFilter

  """Filter by the object’s `reportingOnlyGrandTotal` field."""
  reportingOnlyGrandTotal: BigFloatFilter

  """Filter by the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `submissionDate` field."""
  submissionDate: DatetimeFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter

  """Filter by the object’s `updateComment` field."""
  updateComment: StringFilter

  """Filter by the object’s `version` field."""
  version: StringFilter
}

"""
A filter to be used against many `ReportAttachment` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyReportAttachmentFilter {
  """
  Every related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportAttachmentFilter

  """
  No related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportAttachmentFilter

  """
  Some related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportAttachmentFilter
}

"""A connection to a list of `Report` values."""
type ReportsConnection {
  """
  A list of edges which contains the `Report` and cursor to aid in pagination.
  """
  edges: [ReportsEdge!]!

  """A list of `Report` objects."""
  nodes: [Report]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Report` you could get from the connection."""
  totalCount: Int!
}

"""A `Report` edge in the connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Report` at the end of the edge."""
  node: Report
}

"""Methods to use when ordering `Report`."""
enum ReportsOrderBy {
  CO2BIOC_ASC
  CO2BIOC_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  GRAND_TOTAL_LESS_CO2BIOC_ASC
  GRAND_TOTAL_LESS_CO2BIOC_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  LAST_MODIFIED_BY_ASC
  LAST_MODIFIED_BY_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  NATURAL
  PREPOP_REPORT_ID_ASC
  PREPOP_REPORT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_ONLY_GRAND_TOTAL_ASC
  REPORTING_ONLY_GRAND_TOTAL_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_DESC
  SOURCE_XML_ASC
  SOURCE_XML_DESC
  STATUS_ASC
  STATUS_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  VERSION_ASC
  VERSION_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
Table of emission types that are carbon taxed in relation to venting as per https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA
"""
type TaxedVentingEmissionType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!

  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""
A condition to be used against `TaxedVentingEmissionType` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TaxedVentingEmissionTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `taxedEmissionType` field."""
  taxedEmissionType: String
}

"""
A filter to be used against `TaxedVentingEmissionType` object types. All fields are combined with a logical ‘and.’
"""
input TaxedVentingEmissionTypeFilter {
  """Checks for all expressions in this list."""
  and: [TaxedVentingEmissionTypeFilter!]

  """Negates the expression."""
  not: TaxedVentingEmissionTypeFilter

  """Checks for any expressions in this list."""
  or: [TaxedVentingEmissionTypeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `taxedEmissionType` field."""
  taxedEmissionType: StringFilter
}

"""An input for mutations affecting `TaxedVentingEmissionType`"""
input TaxedVentingEmissionTypeInput {
  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""
Represents an update to a `TaxedVentingEmissionType`. Fields that are set will be updated.
"""
input TaxedVentingEmissionTypePatch {
  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""A connection to a list of `TaxedVentingEmissionType` values."""
type TaxedVentingEmissionTypesConnection {
  """
  A list of edges which contains the `TaxedVentingEmissionType` and cursor to aid in pagination.
  """
  edges: [TaxedVentingEmissionTypesEdge!]!

  """A list of `TaxedVentingEmissionType` objects."""
  nodes: [TaxedVentingEmissionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TaxedVentingEmissionType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TaxedVentingEmissionType` edge in the connection."""
type TaxedVentingEmissionTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TaxedVentingEmissionType` at the end of the edge."""
  node: TaxedVentingEmissionType
}

"""Methods to use when ordering `TaxedVentingEmissionType`."""
enum TaxedVentingEmissionTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAXED_EMISSION_TYPE_ASC
  TAXED_EMISSION_TYPE_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""A connection to a list of `UnmappedFuelRecord` values."""
type UnmappedFuelConnection {
  """
  A list of edges which contains the `UnmappedFuelRecord` and cursor to aid in pagination.
  """
  edges: [UnmappedFuelEdge!]!

  """A list of `UnmappedFuelRecord` objects."""
  nodes: [UnmappedFuelRecord]!

  """
  The count of *all* `UnmappedFuelRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UnmappedFuelRecord` edge in the connection."""
type UnmappedFuelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UnmappedFuelRecord` at the end of the edge."""
  node: UnmappedFuelRecord
}

"""The return type of our `unmappedFuel` query."""
type UnmappedFuelRecord {
  fuelMappingId: Int
  fuelType: String
}

"""
A filter to be used against `UnmappedFuelRecord` object types. All fields are combined with a logical ‘and.’
"""
input UnmappedFuelRecordFilter {
  """Checks for all expressions in this list."""
  and: [UnmappedFuelRecordFilter!]

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: UnmappedFuelRecordFilter

  """Checks for any expressions in this list."""
  or: [UnmappedFuelRecordFilter!]
}

"""All input for the `updateCarbonTaxActFuelTypeByRowId` mutation."""
input UpdateCarbonTaxActFuelTypeByRowIdInput {
  """
  An object where the defined keys will be set on the `CarbonTaxActFuelType` being updated.
  """
  carbonTaxActFuelTypePatch: CarbonTaxActFuelTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `updateCarbonTaxActFuelType` mutation."""
input UpdateCarbonTaxActFuelTypeInput {
  """
  An object where the defined keys will be set on the `CarbonTaxActFuelType` being updated.
  """
  carbonTaxActFuelTypePatch: CarbonTaxActFuelTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxActFuelType` to be updated.
  """
  id: ID!
}

"""The output of our update `CarbonTaxActFuelType` mutation."""
type UpdateCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was updated by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEcccAttachmentByRowId` mutation."""
input UpdateEcccAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccAttachment` being updated.
  """
  ecccAttachmentPatch: EcccAttachmentPatch!

  """The internal primary key for the file"""
  rowId: Int!
}

"""All input for the `updateEcccAttachment` mutation."""
input UpdateEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccAttachment` being updated.
  """
  ecccAttachmentPatch: EcccAttachmentPatch!

  """
  The globally unique `ID` which will identify a single `EcccAttachment` to be updated.
  """
  id: ID!
}

"""The output of our update `EcccAttachment` mutation."""
type UpdateEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccAttachment` that was updated by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEcccFileDownloadLogByRowId` mutation."""
input UpdateEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `updateEcccFileDownloadLog` mutation."""
input UpdateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be updated.
  """
  id: ID!
}

"""The output of our update `EcccFileDownloadLog` mutation."""
type UpdateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was updated by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionCategoryByRowId` mutation."""
input UpdateEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""
All input for the `updateEmissionCategoryBySwrsEmissionCategory` mutation.
"""
input UpdateEmissionCategoryBySwrsEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String!
}

"""All input for the `updateEmissionCategory` mutation."""
input UpdateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionCategory` mutation."""
type UpdateEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was updated by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelCarbonTaxDetailByRowId` mutation."""
input UpdateFuelCarbonTaxDetailByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCarbonTaxDetail` being updated.
  """
  fuelCarbonTaxDetailPatch: FuelCarbonTaxDetailPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateFuelCarbonTaxDetail` mutation."""
input UpdateFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCarbonTaxDetail` being updated.
  """
  fuelCarbonTaxDetailPatch: FuelCarbonTaxDetailPatch!

  """
  The globally unique `ID` which will identify a single `FuelCarbonTaxDetail` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelCarbonTaxDetail` mutation."""
type UpdateFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` that was updated by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelChargeByRowId` mutation."""
input UpdateFuelChargeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCharge` being updated.
  """
  fuelChargePatch: FuelChargePatch!

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `updateFuelCharge` mutation."""
input UpdateFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCharge` being updated.
  """
  fuelChargePatch: FuelChargePatch!

  """
  The globally unique `ID` which will identify a single `FuelCharge` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelCharge` mutation."""
type UpdateFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCharge` that was updated by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelMappingByRowId` mutation."""
input UpdateFuelMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelMapping` being updated.
  """
  fuelMappingPatch: FuelMappingPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateFuelMapping` mutation."""
input UpdateFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelMapping` being updated.
  """
  fuelMappingPatch: FuelMappingPatch!

  """
  The globally unique `ID` which will identify a single `FuelMapping` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelMapping` mutation."""
type UpdateFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailId: FuelCarbonTaxDetail

  """The `FuelMapping` that was updated by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGgircsUserByRowId` mutation."""
input UpdateGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateGgircsUser` mutation."""
input UpdateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be updated.
  """
  id: ID!
}

"""The output of our update `GgircsUser` mutation."""
type UpdateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was updated by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsCategoryByRowId` mutation."""
input UpdateNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsCategory` being updated.
  """
  naicsCategoryPatch: NaicsCategoryPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsCategory` mutation."""
input UpdateNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategory` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsCategory` being updated.
  """
  naicsCategoryPatch: NaicsCategoryPatch!
}

"""The output of our update `NaicsCategory` mutation."""
type UpdateNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategory` that was updated by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsNaicsCategoryByRowId` mutation."""
input UpdateNaicsNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsNaicsCategory` being updated.
  """
  naicsNaicsCategoryPatch: NaicsNaicsCategoryPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsNaicsCategory` mutation."""
input UpdateNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsNaicsCategory` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsNaicsCategory` being updated.
  """
  naicsNaicsCategoryPatch: NaicsNaicsCategoryPatch!
}

"""The output of our update `NaicsNaicsCategory` mutation."""
type UpdateNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `NaicsCategory` that is related to this `NaicsNaicsCategory`.
  """
  naicsCategoryByCategoryId: NaicsCategory

  """The `NaicsNaicsCategory` that was updated by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTaxedVentingEmissionTypeByRowId` mutation."""
input UpdateTaxedVentingEmissionTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!

  """
  An object where the defined keys will be set on the `TaxedVentingEmissionType` being updated.
  """
  taxedVentingEmissionTypePatch: TaxedVentingEmissionTypePatch!
}

"""All input for the `updateTaxedVentingEmissionType` mutation."""
input UpdateTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaxedVentingEmissionType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `TaxedVentingEmissionType` being updated.
  """
  taxedVentingEmissionTypePatch: TaxedVentingEmissionTypePatch!
}

"""The output of our update `TaxedVentingEmissionType` mutation."""
type UpdateTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was updated by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}
