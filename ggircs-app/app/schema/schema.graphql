"""A connection to a list of `AdditionalDatum` values."""
type AdditionalDataConnection {
  """
  A list of edges which contains the `AdditionalDatum` and cursor to aid in pagination.
  """
  edges: [AdditionalDataEdge!]!

  """A list of `AdditionalDatum` objects."""
  nodes: [AdditionalDatum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalDatum` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AdditionalDatum` edge in the connection."""
type AdditionalDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalDatum` at the end of the edge."""
  node: AdditionalDatum
}

"""Methods to use when ordering `AdditionalDatum`."""
enum AdditionalDataOrderBy {
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  ATTRIBUTE_ASC
  ATTRIBUTE_DESC
  ATTR_VALUE_ASC
  ATTR_VALUE_DESC
  CLASS_ASC
  CLASS_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  GRANDPARENT_ASC
  GRANDPARENT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NODE_VALUE_ASC
  NODE_VALUE_DESC
  PARENT_ASC
  PARENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
}

type AdditionalDatum implements Node {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the node immediately after ReportData"""
  activityName: String

  """The value of the attributes on this node concatenated"""
  attrValue: String

  """The name of any attributes on this node"""
  attribute: String

  """The name of the node itself"""
  class: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The name of the grandparent node"""
  grandparent: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The text value of the node"""
  nodeValue: String

  """The name of the parent node"""
  parent: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!
}

"""
A condition to be used against `AdditionalDatum` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AdditionalDatumCondition {
  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """Checks for equality with the object’s `attrValue` field."""
  attrValue: String

  """Checks for equality with the object’s `attribute` field."""
  attribute: String

  """Checks for equality with the object’s `class` field."""
  class: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `grandparent` field."""
  grandparent: String

  """Checks for equality with the object’s `nodeValue` field."""
  nodeValue: String

  """Checks for equality with the object’s `parent` field."""
  parent: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `AdditionalDatum` object types. All fields are combined with a logical ‘and.’
"""
input AdditionalDatumFilter {
  """Filter by the object’s `activityId` field."""
  activityId: IntFilter

  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Checks for all expressions in this list."""
  and: [AdditionalDatumFilter!]

  """Filter by the object’s `attrValue` field."""
  attrValue: StringFilter

  """Filter by the object’s `attribute` field."""
  attribute: StringFilter

  """Filter by the object’s `class` field."""
  class: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `grandparent` field."""
  grandparent: StringFilter

  """Filter by the object’s `nodeValue` field."""
  nodeValue: StringFilter

  """Negates the expression."""
  not: AdditionalDatumFilter

  """Checks for any expressions in this list."""
  or: [AdditionalDatumFilter!]

  """Filter by the object’s `parent` field."""
  parent: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `AdditionalDatum`"""
input AdditionalDatumInput {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the node immediately after ReportData"""
  activityName: String

  """The value of the attributes on this node concatenated"""
  attrValue: String

  """The name of any attributes on this node"""
  attribute: String

  """The name of the node itself"""
  class: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The name of the grandparent node"""
  grandparent: String

  """The text value of the node"""
  nodeValue: String

  """The name of the parent node"""
  parent: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!
}

"""
Represents an update to a `AdditionalDatum`. Fields that are set will be updated.
"""
input AdditionalDatumPatch {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the node immediately after ReportData"""
  activityName: String

  """The value of the attributes on this node concatenated"""
  attrValue: String

  """The name of any attributes on this node"""
  attribute: String

  """The name of the node itself"""
  class: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The name of the grandparent node"""
  grandparent: String

  """The text value of the node"""
  nodeValue: String

  """The name of the parent node"""
  parent: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int
}

type Address implements Node {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByAddressId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """The foreign key that references swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByContactAddressIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressFacilitiesByContactAddressIdAndFacilityIdManyToManyConnection!

  """Reads a single `Facility` that is related to this `Address`."""
  facilityByFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The latitude of the address"""
  geographicAddressLatitude: BigFloat

  """The longitude of the address"""
  geographicAddressLongitude: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The additional information attached to the mailing address"""
  mailingAddressAdditionalInformation: String

  """The country according to the mailing address"""
  mailingAddressCountry: String

  """The delivery mode according to the mailing address"""
  mailingAddressDeliveryMode: String

  """The municipality according to the mailing address"""
  mailingAddressMunicipality: String

  """The po box number according to the mailing address"""
  mailingAddressPoBoxNumber: String

  """The postal code according to the mailing address"""
  mailingAddressPostalCodeZipCode: String

  """The province or territory according to the mailing address"""
  mailingAddressProvTerrState: String

  """The rural route number according to the mailing address"""
  mailingAddressRuralRouteNumber: String

  """The street direction according to the mailing address"""
  mailingAddressStreetDirection: String

  """The street name according to the mailing address"""
  mailingAddressStreetName: String

  """The street number according to the mailing address"""
  mailingAddressStreetNumber: String

  """The street number suffix according to the mailing address"""
  mailingAddressStreetNumberSuffix: String

  """The street type according to the mailing address"""
  mailingAddressStreetType: String

  """The unit number according to the mailing address"""
  mailingAddressUnitNumber: String

  """Reads a single `Organisation` that is related to this `Address`."""
  organisationByOrganisationId: Organisation

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """Reads a single `ParentOrganisation` that is related to this `Address`."""
  parentOrganisationByParentOrganisationId: ParentOrganisation

  """A foreign key reference to swrs.parent_organisation"""
  parentOrganisationId: Int

  """The ancestor path context (VerifyTombstone or RegistrationData)"""
  pathContext: String

  """The additional information attached to the phsyical address"""
  physicalAddressAdditionalInformation: String

  """The country according to the phsyical address"""
  physicalAddressCountry: String

  """The land survey description according to the phsyical address"""
  physicalAddressLandSurveyDescription: String

  """The municipality according to the phsyical address"""
  physicalAddressMunicipality: String

  """
  The national topographical description according to the phsyical address
  """
  physicalAddressNationalTopographicalDescription: String

  """The postal code according to the phsyical address"""
  physicalAddressPostalCodeZipCode: String

  """The province or territory according to the phsyical address"""
  physicalAddressProvTerrState: String

  """The street direction according to the phsyical address"""
  physicalAddressStreetDirection: String

  """The street name according to the phsyical address"""
  physicalAddressStreetName: String

  """The street number according to the phsyical address"""
  physicalAddressStreetNumber: String

  """The street number suffix according to the phsyical address"""
  physicalAddressStreetNumberSuffix: String

  """The street type according to the phsyical address"""
  physicalAddressStreetType: String

  """The unit number according to the phsyical address"""
  physicalAddressUnitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The foreign key that references swrs.facility"""
  swrsFacilityId: Int

  """The foreign key that references swrs.organisation"""
  swrsOrganisationId: Int

  """What the address belongs to (facility, organisation, contact)"""
  type: String
}

"""
A condition to be used against `Address` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AddressCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """
  Checks for equality with the object’s `geographicAddressLatitude` field.
  """
  geographicAddressLatitude: BigFloat

  """
  Checks for equality with the object’s `geographicAddressLongitude` field.
  """
  geographicAddressLongitude: BigFloat

  """
  Checks for equality with the object’s `mailingAddressAdditionalInformation` field.
  """
  mailingAddressAdditionalInformation: String

  """Checks for equality with the object’s `mailingAddressCountry` field."""
  mailingAddressCountry: String

  """
  Checks for equality with the object’s `mailingAddressDeliveryMode` field.
  """
  mailingAddressDeliveryMode: String

  """
  Checks for equality with the object’s `mailingAddressMunicipality` field.
  """
  mailingAddressMunicipality: String

  """
  Checks for equality with the object’s `mailingAddressPoBoxNumber` field.
  """
  mailingAddressPoBoxNumber: String

  """
  Checks for equality with the object’s `mailingAddressPostalCodeZipCode` field.
  """
  mailingAddressPostalCodeZipCode: String

  """
  Checks for equality with the object’s `mailingAddressProvTerrState` field.
  """
  mailingAddressProvTerrState: String

  """
  Checks for equality with the object’s `mailingAddressRuralRouteNumber` field.
  """
  mailingAddressRuralRouteNumber: String

  """
  Checks for equality with the object’s `mailingAddressStreetDirection` field.
  """
  mailingAddressStreetDirection: String

  """
  Checks for equality with the object’s `mailingAddressStreetName` field.
  """
  mailingAddressStreetName: String

  """
  Checks for equality with the object’s `mailingAddressStreetNumber` field.
  """
  mailingAddressStreetNumber: String

  """
  Checks for equality with the object’s `mailingAddressStreetNumberSuffix` field.
  """
  mailingAddressStreetNumberSuffix: String

  """
  Checks for equality with the object’s `mailingAddressStreetType` field.
  """
  mailingAddressStreetType: String

  """
  Checks for equality with the object’s `mailingAddressUnitNumber` field.
  """
  mailingAddressUnitNumber: String

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `parentOrganisationId` field."""
  parentOrganisationId: Int

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """
  Checks for equality with the object’s `physicalAddressAdditionalInformation` field.
  """
  physicalAddressAdditionalInformation: String

  """Checks for equality with the object’s `physicalAddressCountry` field."""
  physicalAddressCountry: String

  """
  Checks for equality with the object’s `physicalAddressLandSurveyDescription` field.
  """
  physicalAddressLandSurveyDescription: String

  """
  Checks for equality with the object’s `physicalAddressMunicipality` field.
  """
  physicalAddressMunicipality: String

  """
  Checks for equality with the object’s `physicalAddressNationalTopographicalDescription` field.
  """
  physicalAddressNationalTopographicalDescription: String

  """
  Checks for equality with the object’s `physicalAddressPostalCodeZipCode` field.
  """
  physicalAddressPostalCodeZipCode: String

  """
  Checks for equality with the object’s `physicalAddressProvTerrState` field.
  """
  physicalAddressProvTerrState: String

  """
  Checks for equality with the object’s `physicalAddressStreetDirection` field.
  """
  physicalAddressStreetDirection: String

  """
  Checks for equality with the object’s `physicalAddressStreetName` field.
  """
  physicalAddressStreetName: String

  """
  Checks for equality with the object’s `physicalAddressStreetNumber` field.
  """
  physicalAddressStreetNumber: String

  """
  Checks for equality with the object’s `physicalAddressStreetNumberSuffix` field.
  """
  physicalAddressStreetNumberSuffix: String

  """
  Checks for equality with the object’s `physicalAddressStreetType` field.
  """
  physicalAddressStreetType: String

  """
  Checks for equality with the object’s `physicalAddressUnitNumber` field.
  """
  physicalAddressUnitNumber: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `type` field."""
  type: String
}

"""A connection to a list of `Facility` values, with data from `Contact`."""
type AddressFacilitiesByContactAddressIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [AddressFacilitiesByContactAddressIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Contact`."""
type AddressFacilitiesByContactAddressIdAndFacilityIdManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Address` object types. All fields are combined with a logical ‘and.’
"""
input AddressFilter {
  """Checks for all expressions in this list."""
  and: [AddressFilter!]

  """Filter by the object’s `contactsByAddressId` relation."""
  contactsByAddressId: AddressToManyContactFilter

  """Some related `contactsByAddressId` exist."""
  contactsByAddressIdExist: Boolean

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `geographicAddressLatitude` field."""
  geographicAddressLatitude: BigFloatFilter

  """Filter by the object’s `geographicAddressLongitude` field."""
  geographicAddressLongitude: BigFloatFilter

  """Filter by the object’s `mailingAddressAdditionalInformation` field."""
  mailingAddressAdditionalInformation: StringFilter

  """Filter by the object’s `mailingAddressCountry` field."""
  mailingAddressCountry: StringFilter

  """Filter by the object’s `mailingAddressDeliveryMode` field."""
  mailingAddressDeliveryMode: StringFilter

  """Filter by the object’s `mailingAddressMunicipality` field."""
  mailingAddressMunicipality: StringFilter

  """Filter by the object’s `mailingAddressPoBoxNumber` field."""
  mailingAddressPoBoxNumber: StringFilter

  """Filter by the object’s `mailingAddressPostalCodeZipCode` field."""
  mailingAddressPostalCodeZipCode: StringFilter

  """Filter by the object’s `mailingAddressProvTerrState` field."""
  mailingAddressProvTerrState: StringFilter

  """Filter by the object’s `mailingAddressRuralRouteNumber` field."""
  mailingAddressRuralRouteNumber: StringFilter

  """Filter by the object’s `mailingAddressStreetDirection` field."""
  mailingAddressStreetDirection: StringFilter

  """Filter by the object’s `mailingAddressStreetName` field."""
  mailingAddressStreetName: StringFilter

  """Filter by the object’s `mailingAddressStreetNumber` field."""
  mailingAddressStreetNumber: StringFilter

  """Filter by the object’s `mailingAddressStreetNumberSuffix` field."""
  mailingAddressStreetNumberSuffix: StringFilter

  """Filter by the object’s `mailingAddressStreetType` field."""
  mailingAddressStreetType: StringFilter

  """Filter by the object’s `mailingAddressUnitNumber` field."""
  mailingAddressUnitNumber: StringFilter

  """Negates the expression."""
  not: AddressFilter

  """Checks for any expressions in this list."""
  or: [AddressFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """A related `organisationByOrganisationId` exists."""
  organisationByOrganisationIdExists: Boolean

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """
  Filter by the object’s `parentOrganisationByParentOrganisationId` relation.
  """
  parentOrganisationByParentOrganisationId: ParentOrganisationFilter

  """A related `parentOrganisationByParentOrganisationId` exists."""
  parentOrganisationByParentOrganisationIdExists: Boolean

  """Filter by the object’s `parentOrganisationId` field."""
  parentOrganisationId: IntFilter

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `physicalAddressAdditionalInformation` field."""
  physicalAddressAdditionalInformation: StringFilter

  """Filter by the object’s `physicalAddressCountry` field."""
  physicalAddressCountry: StringFilter

  """Filter by the object’s `physicalAddressLandSurveyDescription` field."""
  physicalAddressLandSurveyDescription: StringFilter

  """Filter by the object’s `physicalAddressMunicipality` field."""
  physicalAddressMunicipality: StringFilter

  """
  Filter by the object’s `physicalAddressNationalTopographicalDescription` field.
  """
  physicalAddressNationalTopographicalDescription: StringFilter

  """Filter by the object’s `physicalAddressPostalCodeZipCode` field."""
  physicalAddressPostalCodeZipCode: StringFilter

  """Filter by the object’s `physicalAddressProvTerrState` field."""
  physicalAddressProvTerrState: StringFilter

  """Filter by the object’s `physicalAddressStreetDirection` field."""
  physicalAddressStreetDirection: StringFilter

  """Filter by the object’s `physicalAddressStreetName` field."""
  physicalAddressStreetName: StringFilter

  """Filter by the object’s `physicalAddressStreetNumber` field."""
  physicalAddressStreetNumber: StringFilter

  """Filter by the object’s `physicalAddressStreetNumberSuffix` field."""
  physicalAddressStreetNumberSuffix: StringFilter

  """Filter by the object’s `physicalAddressStreetType` field."""
  physicalAddressStreetType: StringFilter

  """Filter by the object’s `physicalAddressUnitNumber` field."""
  physicalAddressUnitNumber: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `type` field."""
  type: StringFilter
}

"""An input for mutations affecting `Address`"""
input AddressInput {
  """The foreign key that references swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The latitude of the address"""
  geographicAddressLatitude: BigFloat

  """The longitude of the address"""
  geographicAddressLongitude: BigFloat

  """The additional information attached to the mailing address"""
  mailingAddressAdditionalInformation: String

  """The country according to the mailing address"""
  mailingAddressCountry: String

  """The delivery mode according to the mailing address"""
  mailingAddressDeliveryMode: String

  """The municipality according to the mailing address"""
  mailingAddressMunicipality: String

  """The po box number according to the mailing address"""
  mailingAddressPoBoxNumber: String

  """The postal code according to the mailing address"""
  mailingAddressPostalCodeZipCode: String

  """The province or territory according to the mailing address"""
  mailingAddressProvTerrState: String

  """The rural route number according to the mailing address"""
  mailingAddressRuralRouteNumber: String

  """The street direction according to the mailing address"""
  mailingAddressStreetDirection: String

  """The street name according to the mailing address"""
  mailingAddressStreetName: String

  """The street number according to the mailing address"""
  mailingAddressStreetNumber: String

  """The street number suffix according to the mailing address"""
  mailingAddressStreetNumberSuffix: String

  """The street type according to the mailing address"""
  mailingAddressStreetType: String

  """The unit number according to the mailing address"""
  mailingAddressUnitNumber: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """A foreign key reference to swrs.parent_organisation"""
  parentOrganisationId: Int

  """The ancestor path context (VerifyTombstone or RegistrationData)"""
  pathContext: String

  """The additional information attached to the phsyical address"""
  physicalAddressAdditionalInformation: String

  """The country according to the phsyical address"""
  physicalAddressCountry: String

  """The land survey description according to the phsyical address"""
  physicalAddressLandSurveyDescription: String

  """The municipality according to the phsyical address"""
  physicalAddressMunicipality: String

  """
  The national topographical description according to the phsyical address
  """
  physicalAddressNationalTopographicalDescription: String

  """The postal code according to the phsyical address"""
  physicalAddressPostalCodeZipCode: String

  """The province or territory according to the phsyical address"""
  physicalAddressProvTerrState: String

  """The street direction according to the phsyical address"""
  physicalAddressStreetDirection: String

  """The street name according to the phsyical address"""
  physicalAddressStreetName: String

  """The street number according to the phsyical address"""
  physicalAddressStreetNumber: String

  """The street number suffix according to the phsyical address"""
  physicalAddressStreetNumberSuffix: String

  """The street type according to the phsyical address"""
  physicalAddressStreetType: String

  """The unit number according to the phsyical address"""
  physicalAddressUnitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The foreign key that references swrs.facility"""
  swrsFacilityId: Int

  """The foreign key that references swrs.organisation"""
  swrsOrganisationId: Int

  """What the address belongs to (facility, organisation, contact)"""
  type: String
}

"""
Represents an update to a `Address`. Fields that are set will be updated.
"""
input AddressPatch {
  """The foreign key that references swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The latitude of the address"""
  geographicAddressLatitude: BigFloat

  """The longitude of the address"""
  geographicAddressLongitude: BigFloat

  """The additional information attached to the mailing address"""
  mailingAddressAdditionalInformation: String

  """The country according to the mailing address"""
  mailingAddressCountry: String

  """The delivery mode according to the mailing address"""
  mailingAddressDeliveryMode: String

  """The municipality according to the mailing address"""
  mailingAddressMunicipality: String

  """The po box number according to the mailing address"""
  mailingAddressPoBoxNumber: String

  """The postal code according to the mailing address"""
  mailingAddressPostalCodeZipCode: String

  """The province or territory according to the mailing address"""
  mailingAddressProvTerrState: String

  """The rural route number according to the mailing address"""
  mailingAddressRuralRouteNumber: String

  """The street direction according to the mailing address"""
  mailingAddressStreetDirection: String

  """The street name according to the mailing address"""
  mailingAddressStreetName: String

  """The street number according to the mailing address"""
  mailingAddressStreetNumber: String

  """The street number suffix according to the mailing address"""
  mailingAddressStreetNumberSuffix: String

  """The street type according to the mailing address"""
  mailingAddressStreetType: String

  """The unit number according to the mailing address"""
  mailingAddressUnitNumber: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """A foreign key reference to swrs.parent_organisation"""
  parentOrganisationId: Int

  """The ancestor path context (VerifyTombstone or RegistrationData)"""
  pathContext: String

  """The additional information attached to the phsyical address"""
  physicalAddressAdditionalInformation: String

  """The country according to the phsyical address"""
  physicalAddressCountry: String

  """The land survey description according to the phsyical address"""
  physicalAddressLandSurveyDescription: String

  """The municipality according to the phsyical address"""
  physicalAddressMunicipality: String

  """
  The national topographical description according to the phsyical address
  """
  physicalAddressNationalTopographicalDescription: String

  """The postal code according to the phsyical address"""
  physicalAddressPostalCodeZipCode: String

  """The province or territory according to the phsyical address"""
  physicalAddressProvTerrState: String

  """The street direction according to the phsyical address"""
  physicalAddressStreetDirection: String

  """The street name according to the phsyical address"""
  physicalAddressStreetName: String

  """The street number according to the phsyical address"""
  physicalAddressStreetNumber: String

  """The street number suffix according to the phsyical address"""
  physicalAddressStreetNumberSuffix: String

  """The street type according to the phsyical address"""
  physicalAddressStreetType: String

  """The unit number according to the phsyical address"""
  physicalAddressUnitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The foreign key that references swrs.facility"""
  swrsFacilityId: Int

  """The foreign key that references swrs.organisation"""
  swrsOrganisationId: Int

  """What the address belongs to (facility, organisation, contact)"""
  type: String
}

"""
A filter to be used against many `Contact` object types. All fields are combined with a logical ‘and.’
"""
input AddressToManyContactFilter {
  """
  Every related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContactFilter

  """
  No related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContactFilter

  """
  Some related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContactFilter
}

"""A connection to a list of `Address` values."""
type AddressesConnection {
  """
  A list of edges which contains the `Address` and cursor to aid in pagination.
  """
  edges: [AddressesEdge!]!

  """A list of `Address` objects."""
  nodes: [Address]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Address` you could get from the connection."""
  totalCount: Int!
}

"""A `Address` edge in the connection."""
type AddressesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Address` at the end of the edge."""
  node: Address
}

"""Methods to use when ordering `Address`."""
enum AddressesOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  GEOGRAPHIC_ADDRESS_LATITUDE_ASC
  GEOGRAPHIC_ADDRESS_LATITUDE_DESC
  GEOGRAPHIC_ADDRESS_LONGITUDE_ASC
  GEOGRAPHIC_ADDRESS_LONGITUDE_DESC
  ID_ASC
  ID_DESC
  MAILING_ADDRESS_ADDITIONAL_INFORMATION_ASC
  MAILING_ADDRESS_ADDITIONAL_INFORMATION_DESC
  MAILING_ADDRESS_COUNTRY_ASC
  MAILING_ADDRESS_COUNTRY_DESC
  MAILING_ADDRESS_DELIVERY_MODE_ASC
  MAILING_ADDRESS_DELIVERY_MODE_DESC
  MAILING_ADDRESS_MUNICIPALITY_ASC
  MAILING_ADDRESS_MUNICIPALITY_DESC
  MAILING_ADDRESS_POSTAL_CODE_ZIP_CODE_ASC
  MAILING_ADDRESS_POSTAL_CODE_ZIP_CODE_DESC
  MAILING_ADDRESS_PO_BOX_NUMBER_ASC
  MAILING_ADDRESS_PO_BOX_NUMBER_DESC
  MAILING_ADDRESS_PROV_TERR_STATE_ASC
  MAILING_ADDRESS_PROV_TERR_STATE_DESC
  MAILING_ADDRESS_RURAL_ROUTE_NUMBER_ASC
  MAILING_ADDRESS_RURAL_ROUTE_NUMBER_DESC
  MAILING_ADDRESS_STREET_DIRECTION_ASC
  MAILING_ADDRESS_STREET_DIRECTION_DESC
  MAILING_ADDRESS_STREET_NAME_ASC
  MAILING_ADDRESS_STREET_NAME_DESC
  MAILING_ADDRESS_STREET_NUMBER_ASC
  MAILING_ADDRESS_STREET_NUMBER_DESC
  MAILING_ADDRESS_STREET_NUMBER_SUFFIX_ASC
  MAILING_ADDRESS_STREET_NUMBER_SUFFIX_DESC
  MAILING_ADDRESS_STREET_TYPE_ASC
  MAILING_ADDRESS_STREET_TYPE_DESC
  MAILING_ADDRESS_UNIT_NUMBER_ASC
  MAILING_ADDRESS_UNIT_NUMBER_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PARENT_ORGANISATION_ID_ASC
  PARENT_ORGANISATION_ID_DESC
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  PHYSICAL_ADDRESS_ADDITIONAL_INFORMATION_ASC
  PHYSICAL_ADDRESS_ADDITIONAL_INFORMATION_DESC
  PHYSICAL_ADDRESS_COUNTRY_ASC
  PHYSICAL_ADDRESS_COUNTRY_DESC
  PHYSICAL_ADDRESS_LAND_SURVEY_DESCRIPTION_ASC
  PHYSICAL_ADDRESS_LAND_SURVEY_DESCRIPTION_DESC
  PHYSICAL_ADDRESS_MUNICIPALITY_ASC
  PHYSICAL_ADDRESS_MUNICIPALITY_DESC
  PHYSICAL_ADDRESS_NATIONAL_TOPOGRAPHICAL_DESCRIPTION_ASC
  PHYSICAL_ADDRESS_NATIONAL_TOPOGRAPHICAL_DESCRIPTION_DESC
  PHYSICAL_ADDRESS_POSTAL_CODE_ZIP_CODE_ASC
  PHYSICAL_ADDRESS_POSTAL_CODE_ZIP_CODE_DESC
  PHYSICAL_ADDRESS_PROV_TERR_STATE_ASC
  PHYSICAL_ADDRESS_PROV_TERR_STATE_DESC
  PHYSICAL_ADDRESS_STREET_DIRECTION_ASC
  PHYSICAL_ADDRESS_STREET_DIRECTION_DESC
  PHYSICAL_ADDRESS_STREET_NAME_ASC
  PHYSICAL_ADDRESS_STREET_NAME_DESC
  PHYSICAL_ADDRESS_STREET_NUMBER_ASC
  PHYSICAL_ADDRESS_STREET_NUMBER_DESC
  PHYSICAL_ADDRESS_STREET_NUMBER_SUFFIX_ASC
  PHYSICAL_ADDRESS_STREET_NUMBER_SUFFIX_DESC
  PHYSICAL_ADDRESS_STREET_TYPE_ASC
  PHYSICAL_ADDRESS_STREET_TYPE_DESC
  PHYSICAL_ADDRESS_UNIT_NUMBER_ASC
  PHYSICAL_ADDRESS_UNIT_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  TYPE_ASC
  TYPE_DESC
}

type AttributableEmission {
  activityId: Int
  activityName: String
  calculatedQuantity: BigFloat
  ecccXmlFileId: Int
  emissionCategory: String
  emissionType: String
  facilityId: Int
  fuelId: Int
  fuelName: String
  gasType: String
  methodology: String
  naicsId: Int
  notApplicable: Boolean
  organisationId: Int
  quantity: BigFloat
  reportId: Int
  rowId: BigInt
  subActivityName: String
  subUnitName: String
  unitId: Int
  unitName: String
}

"""
A condition to be used against `AttributableEmission` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input AttributableEmissionCondition {
  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """Checks for equality with the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """Checks for equality with the object’s `emissionType` field."""
  emissionType: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `fuelId` field."""
  fuelId: Int

  """Checks for equality with the object’s `fuelName` field."""
  fuelName: String

  """Checks for equality with the object’s `gasType` field."""
  gasType: String

  """Checks for equality with the object’s `methodology` field."""
  methodology: String

  """Checks for equality with the object’s `naicsId` field."""
  naicsId: Int

  """Checks for equality with the object’s `notApplicable` field."""
  notApplicable: Boolean

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt

  """Checks for equality with the object’s `subActivityName` field."""
  subActivityName: String

  """Checks for equality with the object’s `subUnitName` field."""
  subUnitName: String

  """Checks for equality with the object’s `unitId` field."""
  unitId: Int

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A filter to be used against `AttributableEmission` object types. All fields are combined with a logical ‘and.’
"""
input AttributableEmissionFilter {
  """Filter by the object’s `activityId` field."""
  activityId: IntFilter

  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Checks for all expressions in this list."""
  and: [AttributableEmissionFilter!]

  """Filter by the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloatFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `emissionType` field."""
  emissionType: StringFilter

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `fuelId` field."""
  fuelId: IntFilter

  """Filter by the object’s `fuelName` field."""
  fuelName: StringFilter

  """Filter by the object’s `gasType` field."""
  gasType: StringFilter

  """Filter by the object’s `methodology` field."""
  methodology: StringFilter

  """Filter by the object’s `naicsId` field."""
  naicsId: IntFilter

  """Negates the expression."""
  not: AttributableEmissionFilter

  """Filter by the object’s `notApplicable` field."""
  notApplicable: BooleanFilter

  """Checks for any expressions in this list."""
  or: [AttributableEmissionFilter!]

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `subActivityName` field."""
  subActivityName: StringFilter

  """Filter by the object’s `subUnitName` field."""
  subUnitName: StringFilter

  """Filter by the object’s `unitId` field."""
  unitId: IntFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""A connection to a list of `AttributableEmission` values."""
type AttributableEmissionsConnection {
  """
  A list of edges which contains the `AttributableEmission` and cursor to aid in pagination.
  """
  edges: [AttributableEmissionsEdge!]!

  """A list of `AttributableEmission` objects."""
  nodes: [AttributableEmission]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AttributableEmission` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AttributableEmission` edge in the connection."""
type AttributableEmissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AttributableEmission` at the end of the edge."""
  node: AttributableEmission
}

"""Methods to use when ordering `AttributableEmission`."""
enum AttributableEmissionsOrderBy {
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  CALCULATED_QUANTITY_ASC
  CALCULATED_QUANTITY_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  EMISSION_TYPE_ASC
  EMISSION_TYPE_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FUEL_ID_ASC
  FUEL_ID_DESC
  FUEL_NAME_ASC
  FUEL_NAME_DESC
  GAS_TYPE_ASC
  GAS_TYPE_DESC
  ID_ASC
  ID_DESC
  METHODOLOGY_ASC
  METHODOLOGY_DESC
  NAICS_ID_ASC
  NAICS_ID_DESC
  NATURAL
  NOT_APPLICABLE_ASC
  NOT_APPLICABLE_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_ACTIVITY_NAME_ASC
  SUB_ACTIVITY_NAME_DESC
  SUB_UNIT_NAME_ASC
  SUB_UNIT_NAME_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

type AttributableEmissionsWithDetail {
  alternativeMethodologyDescription: String
  annualFuelAmount: BigFloat
  annualSteamGeneration: BigFloat
  annualWeightedAvgCarbonContent: BigFloat
  annualWeightedAvgHhv: BigFloat
  businessLegalName: String
  calculatedQuantity: BigFloat
  ecccXmlFileId: Int
  emissionCategory: String
  emissionId: BigInt
  emissionType: String
  facilityId: Int
  facilityName: String
  facilityType: String
  fuelClassification: String
  fuelDescription: String
  fuelType: String
  fuelUnits: String
  gasType: String
  methodology: String
  naicsClassification: String
  naicsCode: Int
  organisationId: Int
  processName: String
  quantity: BigFloat
  reportId: Int
  reportingPeriodDuration: Int
  subProcessName: String
  swrsFacilityId: Int
  swrsOrganisationId: Int
  swrsReportId: Int
  unitId: Int
  unitName: String
}

"""
A condition to be used against `AttributableEmissionsWithDetail` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input AttributableEmissionsWithDetailCondition {
  """
  Checks for equality with the object’s `alternativeMethodologyDescription` field.
  """
  alternativeMethodologyDescription: String

  """Checks for equality with the object’s `annualFuelAmount` field."""
  annualFuelAmount: BigFloat

  """Checks for equality with the object’s `annualSteamGeneration` field."""
  annualSteamGeneration: BigFloat

  """
  Checks for equality with the object’s `annualWeightedAvgCarbonContent` field.
  """
  annualWeightedAvgCarbonContent: BigFloat

  """Checks for equality with the object’s `annualWeightedAvgHhv` field."""
  annualWeightedAvgHhv: BigFloat

  """Checks for equality with the object’s `businessLegalName` field."""
  businessLegalName: String

  """Checks for equality with the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """Checks for equality with the object’s `emissionId` field."""
  emissionId: BigInt

  """Checks for equality with the object’s `emissionType` field."""
  emissionType: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `fuelClassification` field."""
  fuelClassification: String

  """Checks for equality with the object’s `fuelDescription` field."""
  fuelDescription: String

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `gasType` field."""
  gasType: String

  """Checks for equality with the object’s `methodology` field."""
  methodology: String

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: Int

  """Checks for equality with the object’s `subProcessName` field."""
  subProcessName: String

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `unitId` field."""
  unitId: Int

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A filter to be used against `AttributableEmissionsWithDetail` object types. All fields are combined with a logical ‘and.’
"""
input AttributableEmissionsWithDetailFilter {
  """Filter by the object’s `alternativeMethodologyDescription` field."""
  alternativeMethodologyDescription: StringFilter

  """Checks for all expressions in this list."""
  and: [AttributableEmissionsWithDetailFilter!]

  """Filter by the object’s `annualFuelAmount` field."""
  annualFuelAmount: BigFloatFilter

  """Filter by the object’s `annualSteamGeneration` field."""
  annualSteamGeneration: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgCarbonContent` field."""
  annualWeightedAvgCarbonContent: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgHhv` field."""
  annualWeightedAvgHhv: BigFloatFilter

  """Filter by the object’s `businessLegalName` field."""
  businessLegalName: StringFilter

  """Filter by the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloatFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `emissionId` field."""
  emissionId: BigIntFilter

  """Filter by the object’s `emissionType` field."""
  emissionType: StringFilter

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `fuelClassification` field."""
  fuelClassification: StringFilter

  """Filter by the object’s `fuelDescription` field."""
  fuelDescription: StringFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Filter by the object’s `fuelUnits` field."""
  fuelUnits: StringFilter

  """Filter by the object’s `gasType` field."""
  gasType: StringFilter

  """Filter by the object’s `methodology` field."""
  methodology: StringFilter

  """Filter by the object’s `naicsClassification` field."""
  naicsClassification: StringFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Negates the expression."""
  not: AttributableEmissionsWithDetailFilter

  """Checks for any expressions in this list."""
  or: [AttributableEmissionsWithDetailFilter!]

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `processName` field."""
  processName: StringFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: IntFilter

  """Filter by the object’s `subProcessName` field."""
  subProcessName: StringFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter

  """Filter by the object’s `unitId` field."""
  unitId: IntFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""A connection to a list of `AttributableEmissionsWithDetail` values."""
type AttributableEmissionsWithDetailsConnection {
  """
  A list of edges which contains the `AttributableEmissionsWithDetail` and cursor to aid in pagination.
  """
  edges: [AttributableEmissionsWithDetailsEdge!]!

  """A list of `AttributableEmissionsWithDetail` objects."""
  nodes: [AttributableEmissionsWithDetail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AttributableEmissionsWithDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AttributableEmissionsWithDetail` edge in the connection."""
type AttributableEmissionsWithDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AttributableEmissionsWithDetail` at the end of the edge."""
  node: AttributableEmissionsWithDetail
}

"""Methods to use when ordering `AttributableEmissionsWithDetail`."""
enum AttributableEmissionsWithDetailsOrderBy {
  ALTERNATIVE_METHODOLOGY_DESCRIPTION_ASC
  ALTERNATIVE_METHODOLOGY_DESCRIPTION_DESC
  ANNUAL_FUEL_AMOUNT_ASC
  ANNUAL_FUEL_AMOUNT_DESC
  ANNUAL_STEAM_GENERATION_ASC
  ANNUAL_STEAM_GENERATION_DESC
  ANNUAL_WEIGHTED_AVG_CARBON_CONTENT_ASC
  ANNUAL_WEIGHTED_AVG_CARBON_CONTENT_DESC
  ANNUAL_WEIGHTED_AVG_HHV_ASC
  ANNUAL_WEIGHTED_AVG_HHV_DESC
  BUSINESS_LEGAL_NAME_ASC
  BUSINESS_LEGAL_NAME_DESC
  CALCULATED_QUANTITY_ASC
  CALCULATED_QUANTITY_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  EMISSION_ID_ASC
  EMISSION_ID_DESC
  EMISSION_TYPE_ASC
  EMISSION_TYPE_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  FUEL_CLASSIFICATION_ASC
  FUEL_CLASSIFICATION_DESC
  FUEL_DESCRIPTION_ASC
  FUEL_DESCRIPTION_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  GAS_TYPE_ASC
  GAS_TYPE_DESC
  METHODOLOGY_ASC
  METHODOLOGY_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_PROCESS_NAME_ASC
  SUB_PROCESS_NAME_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

type CarbonTaxActFuelType implements Node {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String!

  """Reads and enables pagination through a set of `FuelCarbonTaxDetail`."""
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCarbonTaxDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelCarbonTaxDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsConnection!

  """Reads and enables pagination through a set of `FuelCharge`."""
  fuelChargesByCarbonTaxActFuelTypeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelChargeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelChargeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The internal primary key"""
  rowId: Int!
}

"""
A condition to be used against `CarbonTaxActFuelType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeCondition {
  """Checks for equality with the object’s `carbonTaxFuelType` field."""
  carbonTaxFuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `CarbonTaxActFuelType` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeFilter {
  """Checks for all expressions in this list."""
  and: [CarbonTaxActFuelTypeFilter!]

  """Filter by the object’s `carbonTaxFuelType` field."""
  carbonTaxFuelType: StringFilter

  """
  Filter by the object’s `fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId` relation.
  """
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeToManyFuelCarbonTaxDetailFilter

  """Some related `fuelCarbonTaxDetailsByCarbonTaxActFuelTypeId` exist."""
  fuelCarbonTaxDetailsByCarbonTaxActFuelTypeIdExist: Boolean

  """Filter by the object’s `fuelChargesByCarbonTaxActFuelTypeId` relation."""
  fuelChargesByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeToManyFuelChargeFilter

  """Some related `fuelChargesByCarbonTaxActFuelTypeId` exist."""
  fuelChargesByCarbonTaxActFuelTypeIdExist: Boolean

  """Negates the expression."""
  not: CarbonTaxActFuelTypeFilter

  """Checks for any expressions in this list."""
  or: [CarbonTaxActFuelTypeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `CarbonTaxActFuelType`"""
input CarbonTaxActFuelTypeInput {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String!
}

"""
Represents an update to a `CarbonTaxActFuelType`. Fields that are set will be updated.
"""
input CarbonTaxActFuelTypePatch {
  """Fuel type defined by the carbon tax act"""
  carbonTaxFuelType: String
}

"""
A filter to be used against many `FuelCarbonTaxDetail` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeToManyFuelCarbonTaxDetailFilter {
  """
  Every related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelCarbonTaxDetailFilter

  """
  No related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelCarbonTaxDetailFilter

  """
  Some related `FuelCarbonTaxDetail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelCarbonTaxDetailFilter
}

"""
A filter to be used against many `FuelCharge` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxActFuelTypeToManyFuelChargeFilter {
  """
  Every related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelChargeFilter

  """
  No related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelChargeFilter

  """
  Some related `FuelCharge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelChargeFilter
}

"""A connection to a list of `CarbonTaxActFuelType` values."""
type CarbonTaxActFuelTypesConnection {
  """
  A list of edges which contains the `CarbonTaxActFuelType` and cursor to aid in pagination.
  """
  edges: [CarbonTaxActFuelTypesEdge!]!

  """A list of `CarbonTaxActFuelType` objects."""
  nodes: [CarbonTaxActFuelType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CarbonTaxActFuelType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CarbonTaxActFuelType` edge in the connection."""
type CarbonTaxActFuelTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxActFuelType` at the end of the edge."""
  node: CarbonTaxActFuelType
}

"""Methods to use when ordering `CarbonTaxActFuelType`."""
enum CarbonTaxActFuelTypesOrderBy {
  CARBON_TAX_FUEL_TYPE_ASC
  CARBON_TAX_FUEL_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CarbonTaxCalculation {
  calculatedCarbonTax: BigFloat
  carbonTaxActFuelTypeId: Int
  emissionCategory: String
  facilityId: Int
  facilityName: String
  fuelAmount: BigFloat
  fuelCarbonTaxDetailsId: Int
  fuelCharge: BigFloat
  fuelMappingId: Int
  fuelType: String
  reportId: Int
}

"""
A condition to be used against `CarbonTaxCalculation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CarbonTaxCalculationCondition {
  """Checks for equality with the object’s `calculatedCarbonTax` field."""
  calculatedCarbonTax: BigFloat

  """Checks for equality with the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: Int

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `fuelAmount` field."""
  fuelAmount: BigFloat

  """Checks for equality with the object’s `fuelCarbonTaxDetailsId` field."""
  fuelCarbonTaxDetailsId: Int

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int
}

"""
A filter to be used against `CarbonTaxCalculation` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxCalculationFilter {
  """Checks for all expressions in this list."""
  and: [CarbonTaxCalculationFilter!]

  """Filter by the object’s `calculatedCarbonTax` field."""
  calculatedCarbonTax: BigFloatFilter

  """Filter by the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: IntFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `fuelAmount` field."""
  fuelAmount: BigFloatFilter

  """Filter by the object’s `fuelCarbonTaxDetailsId` field."""
  fuelCarbonTaxDetailsId: IntFilter

  """Filter by the object’s `fuelCharge` field."""
  fuelCharge: BigFloatFilter

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: CarbonTaxCalculationFilter

  """Checks for any expressions in this list."""
  or: [CarbonTaxCalculationFilter!]

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter
}

"""A connection to a list of `CarbonTaxCalculation` values."""
type CarbonTaxCalculationsConnection {
  """
  A list of edges which contains the `CarbonTaxCalculation` and cursor to aid in pagination.
  """
  edges: [CarbonTaxCalculationsEdge!]!

  """A list of `CarbonTaxCalculation` objects."""
  nodes: [CarbonTaxCalculation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CarbonTaxCalculation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CarbonTaxCalculation` edge in the connection."""
type CarbonTaxCalculationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxCalculation` at the end of the edge."""
  node: CarbonTaxCalculation
}

"""Methods to use when ordering `CarbonTaxCalculation`."""
enum CarbonTaxCalculationsOrderBy {
  CALCULATED_CARBON_TAX_ASC
  CALCULATED_CARBON_TAX_DESC
  CARBON_TAX_ACT_FUEL_TYPE_ID_ASC
  CARBON_TAX_ACT_FUEL_TYPE_ID_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FUEL_AMOUNT_ASC
  FUEL_AMOUNT_DESC
  FUEL_CARBON_TAX_DETAILS_ID_ASC
  FUEL_CARBON_TAX_DETAILS_ID_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NATURAL
  REPORT_ID_ASC
  REPORT_ID_DESC
}

type CarbonTaxRateMapping implements Node {
  """The carbon tax rate for the date range"""
  carbonTaxRate: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The date that the tax rate stops applying"""
  rateEndDate: Date

  """The date that the tax rate begins to apply"""
  rateStartDate: Date

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `CarbonTaxRateMapping` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CarbonTaxRateMappingCondition {
  """Checks for equality with the object’s `carbonTaxRate` field."""
  carbonTaxRate: BigFloat

  """Checks for equality with the object’s `rateEndDate` field."""
  rateEndDate: Date

  """Checks for equality with the object’s `rateStartDate` field."""
  rateStartDate: Date

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `CarbonTaxRateMapping` object types. All fields are combined with a logical ‘and.’
"""
input CarbonTaxRateMappingFilter {
  """Checks for all expressions in this list."""
  and: [CarbonTaxRateMappingFilter!]

  """Filter by the object’s `carbonTaxRate` field."""
  carbonTaxRate: BigFloatFilter

  """Negates the expression."""
  not: CarbonTaxRateMappingFilter

  """Checks for any expressions in this list."""
  or: [CarbonTaxRateMappingFilter!]

  """Filter by the object’s `rateEndDate` field."""
  rateEndDate: DateFilter

  """Filter by the object’s `rateStartDate` field."""
  rateStartDate: DateFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `CarbonTaxRateMapping`"""
input CarbonTaxRateMappingInput {
  """The carbon tax rate for the date range"""
  carbonTaxRate: BigFloat

  """The date that the tax rate stops applying"""
  rateEndDate: Date

  """The date that the tax rate begins to apply"""
  rateStartDate: Date
}

"""
Represents an update to a `CarbonTaxRateMapping`. Fields that are set will be updated.
"""
input CarbonTaxRateMappingPatch {
  """The carbon tax rate for the date range"""
  carbonTaxRate: BigFloat

  """The date that the tax rate stops applying"""
  rateEndDate: Date

  """The date that the tax rate begins to apply"""
  rateStartDate: Date
}

"""A connection to a list of `CarbonTaxRateMapping` values."""
type CarbonTaxRateMappingsConnection {
  """
  A list of edges which contains the `CarbonTaxRateMapping` and cursor to aid in pagination.
  """
  edges: [CarbonTaxRateMappingsEdge!]!

  """A list of `CarbonTaxRateMapping` objects."""
  nodes: [CarbonTaxRateMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CarbonTaxRateMapping` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CarbonTaxRateMapping` edge in the connection."""
type CarbonTaxRateMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CarbonTaxRateMapping` at the end of the edge."""
  node: CarbonTaxRateMapping
}

"""Methods to use when ordering `CarbonTaxRateMapping`."""
enum CarbonTaxRateMappingsOrderBy {
  CARBON_TAX_RATE_ASC
  CARBON_TAX_RATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RATE_END_DATE_ASC
  RATE_END_DATE_DESC
  RATE_START_DATE_ASC
  RATE_START_DATE_DESC
}

type Contact implements Node {
  """Reads a single `Address` that is related to this `Contact`."""
  addressByAddressId: Address

  """A foreign key reference to swrs.address"""
  addressId: Int

  """The type of contact"""
  contactType: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The email address attached to this contact"""
  emailAddress: String

  """The extension number attached to this contact"""
  extensionNumber: String

  """Reads a single `Facility` that is related to this `Contact`."""
  facilityByFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The family name of the contact"""
  familyName: String

  """The fax number attached to this contact"""
  faxNumber: String

  """The given name of the contact"""
  givenName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The initials of the contact"""
  initials: String

  """The language of correspondence for thsi contact"""
  languageCorrespondence: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """
  The umbrella context from which the contact was pulled from the xml (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The position of this contact"""
  position: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The phone number attached to this contact"""
  telephoneNumber: String
}

"""
A condition to be used against `Contact` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContactCondition {
  """Checks for equality with the object’s `addressId` field."""
  addressId: Int

  """Checks for equality with the object’s `contactType` field."""
  contactType: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `extensionNumber` field."""
  extensionNumber: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `faxNumber` field."""
  faxNumber: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `initials` field."""
  initials: String

  """Checks for equality with the object’s `languageCorrespondence` field."""
  languageCorrespondence: String

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `telephoneNumber` field."""
  telephoneNumber: String
}

"""
A filter to be used against `Contact` object types. All fields are combined with a logical ‘and.’
"""
input ContactFilter {
  """Filter by the object’s `addressByAddressId` relation."""
  addressByAddressId: AddressFilter

  """A related `addressByAddressId` exists."""
  addressByAddressIdExists: Boolean

  """Filter by the object’s `addressId` field."""
  addressId: IntFilter

  """Checks for all expressions in this list."""
  and: [ContactFilter!]

  """Filter by the object’s `contactType` field."""
  contactType: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `extensionNumber` field."""
  extensionNumber: StringFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `faxNumber` field."""
  faxNumber: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `initials` field."""
  initials: StringFilter

  """Filter by the object’s `languageCorrespondence` field."""
  languageCorrespondence: StringFilter

  """Negates the expression."""
  not: ContactFilter

  """Checks for any expressions in this list."""
  or: [ContactFilter!]

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `position` field."""
  position: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `telephoneNumber` field."""
  telephoneNumber: StringFilter
}

"""An input for mutations affecting `Contact`"""
input ContactInput {
  """A foreign key reference to swrs.address"""
  addressId: Int

  """The type of contact"""
  contactType: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The email address attached to this contact"""
  emailAddress: String

  """The extension number attached to this contact"""
  extensionNumber: String

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The family name of the contact"""
  familyName: String

  """The fax number attached to this contact"""
  faxNumber: String

  """The given name of the contact"""
  givenName: String

  """The initials of the contact"""
  initials: String

  """The language of correspondence for thsi contact"""
  languageCorrespondence: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """
  The umbrella context from which the contact was pulled from the xml (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The position of this contact"""
  position: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The phone number attached to this contact"""
  telephoneNumber: String
}

"""
Represents an update to a `Contact`. Fields that are set will be updated.
"""
input ContactPatch {
  """A foreign key reference to swrs.address"""
  addressId: Int

  """The type of contact"""
  contactType: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The email address attached to this contact"""
  emailAddress: String

  """The extension number attached to this contact"""
  extensionNumber: String

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The family name of the contact"""
  familyName: String

  """The fax number attached to this contact"""
  faxNumber: String

  """The given name of the contact"""
  givenName: String

  """The initials of the contact"""
  initials: String

  """The language of correspondence for thsi contact"""
  languageCorrespondence: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """
  The umbrella context from which the contact was pulled from the xml (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The position of this contact"""
  position: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The phone number attached to this contact"""
  telephoneNumber: String
}

"""A connection to a list of `Contact` values."""
type ContactsConnection {
  """
  A list of edges which contains the `Contact` and cursor to aid in pagination.
  """
  edges: [ContactsEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection."""
type ContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact
}

"""Methods to use when ordering `Contact`."""
enum ContactsOrderBy {
  ADDRESS_ID_ASC
  ADDRESS_ID_DESC
  CONTACT_TYPE_ASC
  CONTACT_TYPE_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  EXTENSION_NUMBER_ASC
  EXTENSION_NUMBER_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  FAX_NUMBER_ASC
  FAX_NUMBER_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  ID_ASC
  ID_DESC
  INITIALS_ASC
  INITIALS_DESC
  LANGUAGE_CORRESPONDENCE_ASC
  LANGUAGE_CORRESPONDENCE_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  TELEPHONE_NUMBER_ASC
  TELEPHONE_NUMBER_DESC
}

"""All input for the create `AdditionalDatum` mutation."""
input CreateAdditionalDatumInput {
  """The `AdditionalDatum` to be created by this mutation."""
  additionalDatum: AdditionalDatumInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AdditionalDatum` mutation."""
type CreateAdditionalDatumPayload {
  """The `AdditionalDatum` that was created by this mutation."""
  additionalDatum: AdditionalDatum

  """An edge for our `AdditionalDatum`. May be used by Relay 1."""
  additionalDatumEdge(
    """The method to use when ordering `AdditionalDatum`."""
    orderBy: [AdditionalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalDataEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Address` mutation."""
input CreateAddressInput {
  """The `Address` to be created by this mutation."""
  address: AddressInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Address` mutation."""
type CreateAddressPayload {
  """The `Address` that was created by this mutation."""
  address: Address

  """An edge for our `Address`. May be used by Relay 1."""
  addressEdge(
    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Address`."""
  facilityByFacilityId: Facility

  """Reads a single `Organisation` that is related to this `Address`."""
  organisationByOrganisationId: Organisation

  """Reads a single `ParentOrganisation` that is related to this `Address`."""
  parentOrganisationByParentOrganisationId: ParentOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CarbonTaxActFuelType` mutation."""
input CreateCarbonTaxActFuelTypeInput {
  """The `CarbonTaxActFuelType` to be created by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelTypeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CarbonTaxActFuelType` mutation."""
type CreateCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was created by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CarbonTaxRateMapping` mutation."""
input CreateCarbonTaxRateMappingInput {
  """The `CarbonTaxRateMapping` to be created by this mutation."""
  carbonTaxRateMapping: CarbonTaxRateMappingInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CarbonTaxRateMapping` mutation."""
type CreateCarbonTaxRateMappingPayload {
  """The `CarbonTaxRateMapping` that was created by this mutation."""
  carbonTaxRateMapping: CarbonTaxRateMapping

  """An edge for our `CarbonTaxRateMapping`. May be used by Relay 1."""
  carbonTaxRateMappingEdge(
    """The method to use when ordering `CarbonTaxRateMapping`."""
    orderBy: [CarbonTaxRateMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxRateMappingsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Contact` mutation."""
input CreateContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Contact` to be created by this mutation."""
  contact: ContactInput!
}

"""The output of our create `Contact` mutation."""
type CreateContactPayload {
  """Reads a single `Address` that is related to this `Contact`."""
  addressByAddressId: Address

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contact` that was created by this mutation."""
  contact: Contact

  """An edge for our `Contact`. May be used by Relay 1."""
  contactEdge(
    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge

  """Reads a single `Facility` that is related to this `Contact`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EcccAttachment` mutation."""
input CreateEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EcccAttachment` to be created by this mutation."""
  ecccAttachment: EcccAttachmentInput!
}

"""The output of our create `EcccAttachment` mutation."""
type CreateEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccAttachment` that was created by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EcccFileDownloadLog` mutation."""
input CreateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` to be created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLogInput!
}

"""The output of our create `EcccFileDownloadLog` mutation."""
type CreateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was created by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionCategory` mutation."""
input CreateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionCategory` to be created by this mutation."""
  emissionCategory: EmissionCategoryInput!
}

"""The output of our create `EmissionCategory` mutation."""
type CreateEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was created by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Emission` mutation."""
input CreateEmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Emission` to be created by this mutation."""
  emission: EmissionInput!
}

"""The output of our create `Emission` mutation."""
type CreateEmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Emission` that was created by this mutation."""
  emission: Emission

  """An edge for our `Emission`. May be used by Relay 1."""
  emissionEdge(
    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsEdge

  """Reads a single `Facility` that is related to this `Emission`."""
  facilityByFacilityId: Facility

  """Reads a single `Fuel` that is related to this `Emission`."""
  fuelByFuelId: Fuel

  """Reads a single `FuelMapping` that is related to this `Emission`."""
  fuelMappingByFuelMappingId: FuelMapping

  """Reads a single `Naic` that is related to this `Emission`."""
  naicByNaicsId: Naic

  """Reads a single `Organisation` that is related to this `Emission`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Emission`."""
  unitByUnitId: Unit
}

"""All input for the create `Facility` mutation."""
input CreateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Facility` to be created by this mutation."""
  facility: FacilityInput!
}

"""The output of our create `Facility` mutation."""
type CreateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was created by this mutation."""
  facility: Facility

  """Reads a single `Facility` that is related to this `Facility`."""
  facilityByParentFacilityId: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelCarbonTaxDetail` mutation."""
input CreateFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` to be created by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetailInput!
}

"""The output of our create `FuelCarbonTaxDetail` mutation."""
type CreateFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` that was created by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelCharge` mutation."""
input CreateFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelCharge` to be created by this mutation."""
  fuelCharge: FuelChargeInput!
}

"""The output of our create `FuelCharge` mutation."""
type CreateFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCharge` that was created by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Fuel` mutation."""
input CreateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fuel` to be created by this mutation."""
  fuel: FuelInput!
}

"""All input for the `createFuelMappingCascade` mutation."""
input CreateFuelMappingCascadeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fuelCarbonTaxDetailsIdInput: Int!
  fuelTypeInput: String!
}

"""The output of our `createFuelMappingCascade` mutation."""
type CreateFuelMappingCascadePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetail
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FuelMapping` mutation."""
input CreateFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FuelMapping` to be created by this mutation."""
  fuelMapping: FuelMappingInput!
}

"""The output of our create `FuelMapping` mutation."""
type CreateFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetail

  """The `FuelMapping` that was created by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Fuel` mutation."""
type CreateFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was created by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """Reads a single `FuelMapping` that is related to this `Fuel`."""
  fuelMappingByFuelMappingId: FuelMapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Fuel`."""
  unitByUnitId: Unit
}

"""All input for the `createGgircsUserFromSession` mutation."""
input CreateGgircsUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createGgircsUserFromSession` mutation."""
type CreateGgircsUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GgircsUser` mutation."""
input CreateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GgircsUser` to be created by this mutation."""
  ggircsUser: GgircsUserInput!
}

"""The output of our create `GgircsUser` mutation."""
type CreateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was created by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Identifier` mutation."""
input CreateIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Identifier` to be created by this mutation."""
  identifier: IdentifierInput!
}

"""The output of our create `Identifier` mutation."""
type CreateIdentifierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityBcghgidId: Facility

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityId: Facility

  """The `Identifier` that was created by this mutation."""
  identifier: Identifier

  """An edge for our `Identifier`. May be used by Relay 1."""
  identifierEdge(
    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ImpliedEmissionFactor` mutation."""
input CreateImpliedEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ImpliedEmissionFactor` to be created by this mutation."""
  impliedEmissionFactor: ImpliedEmissionFactorInput!
}

"""The output of our create `ImpliedEmissionFactor` mutation."""
type CreateImpliedEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelMapping` that is related to this `ImpliedEmissionFactor`.
  """
  fuelMappingByFuelMappingId: FuelMapping

  """The `ImpliedEmissionFactor` that was created by this mutation."""
  impliedEmissionFactor: ImpliedEmissionFactor

  """An edge for our `ImpliedEmissionFactor`. May be used by Relay 1."""
  impliedEmissionFactorEdge(
    """The method to use when ordering `ImpliedEmissionFactor`."""
    orderBy: [ImpliedEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImpliedEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MeasuredEmissionFactor` mutation."""
input CreateMeasuredEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MeasuredEmissionFactor` to be created by this mutation."""
  measuredEmissionFactor: MeasuredEmissionFactorInput!
}

"""The output of our create `MeasuredEmissionFactor` mutation."""
type CreateMeasuredEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Fuel` that is related to this `MeasuredEmissionFactor`.
  """
  fuelByFuelId: Fuel

  """The `MeasuredEmissionFactor` that was created by this mutation."""
  measuredEmissionFactor: MeasuredEmissionFactor

  """An edge for our `MeasuredEmissionFactor`. May be used by Relay 1."""
  measuredEmissionFactorEdge(
    """The method to use when ordering `MeasuredEmissionFactor`."""
    orderBy: [MeasuredEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeasuredEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Naic` mutation."""
input CreateNaicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Naic` to be created by this mutation."""
  naic: NaicInput!
}

"""The output of our create `Naic` mutation."""
type CreateNaicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByFacilityId: Facility

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByRegistrationDataFacilityId: Facility

  """The `Naic` that was created by this mutation."""
  naic: Naic

  """An edge for our `Naic`. May be used by Relay 1."""
  naicEdge(
    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsCategory` mutation."""
input CreateNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsCategory` to be created by this mutation."""
  naicsCategory: NaicsCategoryInput!
}

"""The output of our create `NaicsCategory` mutation."""
type CreateNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategory` that was created by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsCategoryType` mutation."""
input CreateNaicsCategoryTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsCategoryType` to be created by this mutation."""
  naicsCategoryType: NaicsCategoryTypeInput!
}

"""The output of our create `NaicsCategoryType` mutation."""
type CreateNaicsCategoryTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategoryType` that was created by this mutation."""
  naicsCategoryType: NaicsCategoryType

  """An edge for our `NaicsCategoryType`. May be used by Relay 1."""
  naicsCategoryTypeEdge(
    """The method to use when ordering `NaicsCategoryType`."""
    orderBy: [NaicsCategoryTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoryTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsMapping` mutation."""
input CreateNaicsMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsMapping` to be created by this mutation."""
  naicsMapping: NaicsMappingInput!
}

"""The output of our create `NaicsMapping` mutation."""
type CreateNaicsMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsMapping` that was created by this mutation."""
  naicsMapping: NaicsMapping

  """An edge for our `NaicsMapping`. May be used by Relay 1."""
  naicsMappingEdge(
    """The method to use when ordering `NaicsMapping`."""
    orderBy: [NaicsMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NaicsNaicsCategory` mutation."""
input CreateNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NaicsNaicsCategory` to be created by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategoryInput!
}

"""The output of our create `NaicsNaicsCategory` mutation."""
type CreateNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsNaicsCategory` that was created by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `OrganisationBcRegistryId` mutation."""
input CreateOrganisationBcRegistryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganisationBcRegistryId` to be created by this mutation."""
  organisationBcRegistryId: OrganisationBcRegistryIdInput!
}

"""The output of our create `OrganisationBcRegistryId` mutation."""
type CreateOrganisationBcRegistryIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganisationBcRegistryId` that was created by this mutation."""
  organisationBcRegistryId: OrganisationBcRegistryId

  """An edge for our `OrganisationBcRegistryId`. May be used by Relay 1."""
  organisationBcRegistryIdEdge(
    """The method to use when ordering `OrganisationBcRegistryId`."""
    orderBy: [OrganisationBcRegistryIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationBcRegistryIdsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Organisation` mutation."""
input CreateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organisation` to be created by this mutation."""
  organisation: OrganisationInput!
}

"""The output of our create `Organisation` mutation."""
type CreateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was created by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ParentOrganisation` mutation."""
input CreateParentOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ParentOrganisation` to be created by this mutation."""
  parentOrganisation: ParentOrganisationInput!
}

"""The output of our create `ParentOrganisation` mutation."""
type CreateParentOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `ParentOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """The `ParentOrganisation` that was created by this mutation."""
  parentOrganisation: ParentOrganisation

  """An edge for our `ParentOrganisation`. May be used by Relay 1."""
  parentOrganisationEdge(
    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Permit` mutation."""
input CreatePermitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Permit` to be created by this mutation."""
  permit: PermitInput!
}

"""The output of our create `Permit` mutation."""
type CreatePermitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Permit`."""
  facilityByFacilityId: Facility

  """The `Permit` that was created by this mutation."""
  permit: Permit

  """An edge for our `Permit`. May be used by Relay 1."""
  permitEdge(
    """The method to use when ordering `Permit`."""
    orderBy: [PermitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermitsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TaxedVentingEmissionType` mutation."""
input CreateTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TaxedVentingEmissionType` to be created by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionTypeInput!
}

"""The output of our create `TaxedVentingEmissionType` mutation."""
type CreateTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was created by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}

"""All input for the create `Unit` mutation."""
input CreateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Unit` to be created by this mutation."""
  unit: UnitInput!
}

"""The output of our create `Unit` mutation."""
type CreateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unit` that was created by this mutation."""
  unit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  equalTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAdditionalDatumByRowId` mutation."""
input DeleteAdditionalDatumByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteAdditionalDatum` mutation."""
input DeleteAdditionalDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalDatum` to be deleted.
  """
  id: ID!
}

"""The output of our delete `AdditionalDatum` mutation."""
type DeleteAdditionalDatumPayload {
  """The `AdditionalDatum` that was deleted by this mutation."""
  additionalDatum: AdditionalDatum

  """An edge for our `AdditionalDatum`. May be used by Relay 1."""
  additionalDatumEdge(
    """The method to use when ordering `AdditionalDatum`."""
    orderBy: [AdditionalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalDataEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAdditionalDatumId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteAddressByRowId` mutation."""
input DeleteAddressByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteAddress` mutation."""
input DeleteAddressInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Address` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Address` mutation."""
type DeleteAddressPayload {
  """The `Address` that was deleted by this mutation."""
  address: Address

  """An edge for our `Address`. May be used by Relay 1."""
  addressEdge(
    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAddressId: ID

  """Reads a single `Facility` that is related to this `Address`."""
  facilityByFacilityId: Facility

  """Reads a single `Organisation` that is related to this `Address`."""
  organisationByOrganisationId: Organisation

  """Reads a single `ParentOrganisation` that is related to this `Address`."""
  parentOrganisationByParentOrganisationId: ParentOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCarbonTaxActFuelTypeByRowId` mutation."""
input DeleteCarbonTaxActFuelTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `deleteCarbonTaxActFuelType` mutation."""
input DeleteCarbonTaxActFuelTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxActFuelType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CarbonTaxActFuelType` mutation."""
type DeleteCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was deleted by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCarbonTaxActFuelTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCarbonTaxRateMappingByRowId` mutation."""
input DeleteCarbonTaxRateMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteCarbonTaxRateMapping` mutation."""
input DeleteCarbonTaxRateMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxRateMapping` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CarbonTaxRateMapping` mutation."""
type DeleteCarbonTaxRateMappingPayload {
  """The `CarbonTaxRateMapping` that was deleted by this mutation."""
  carbonTaxRateMapping: CarbonTaxRateMapping

  """An edge for our `CarbonTaxRateMapping`. May be used by Relay 1."""
  carbonTaxRateMappingEdge(
    """The method to use when ordering `CarbonTaxRateMapping`."""
    orderBy: [CarbonTaxRateMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxRateMappingsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCarbonTaxRateMappingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteContactByRowId` mutation."""
input DeleteContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteContact` mutation."""
input DeleteContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Contact` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Contact` mutation."""
type DeleteContactPayload {
  """Reads a single `Address` that is related to this `Contact`."""
  addressByAddressId: Address

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contact` that was deleted by this mutation."""
  contact: Contact

  """An edge for our `Contact`. May be used by Relay 1."""
  contactEdge(
    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge
  deletedContactId: ID

  """Reads a single `Facility` that is related to this `Contact`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEcccAttachmentByRowId` mutation."""
input DeleteEcccAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the file"""
  rowId: Int!
}

"""All input for the `deleteEcccAttachment` mutation."""
input DeleteEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EcccAttachment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EcccAttachment` mutation."""
type DeleteEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEcccAttachmentId: ID

  """The `EcccAttachment` that was deleted by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEcccFileDownloadLogByRowId` mutation."""
input DeleteEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `deleteEcccFileDownloadLog` mutation."""
input DeleteEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EcccFileDownloadLog` mutation."""
type DeleteEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEcccFileDownloadLogId: ID

  """The `EcccFileDownloadLog` that was deleted by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionByRowId` mutation."""
input DeleteEmissionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteEmissionCategoryByRowId` mutation."""
input DeleteEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""
All input for the `deleteEmissionCategoryBySwrsEmissionCategory` mutation.
"""
input DeleteEmissionCategoryBySwrsEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String!
}

"""All input for the `deleteEmissionCategory` mutation."""
input DeleteEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionCategory` mutation."""
type DeleteEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionCategoryId: ID

  """The `EmissionCategory` that was deleted by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmission` mutation."""
input DeleteEmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Emission` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Emission` mutation."""
type DeleteEmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionId: ID

  """The `Emission` that was deleted by this mutation."""
  emission: Emission

  """An edge for our `Emission`. May be used by Relay 1."""
  emissionEdge(
    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsEdge

  """Reads a single `Facility` that is related to this `Emission`."""
  facilityByFacilityId: Facility

  """Reads a single `Fuel` that is related to this `Emission`."""
  fuelByFuelId: Fuel

  """Reads a single `FuelMapping` that is related to this `Emission`."""
  fuelMappingByFuelMappingId: FuelMapping

  """Reads a single `Naic` that is related to this `Emission`."""
  naicByNaicsId: Naic

  """Reads a single `Organisation` that is related to this `Emission`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Emission`."""
  unitByUnitId: Unit
}

"""All input for the `deleteFacilityByRowId` mutation."""
input DeleteFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteFacility` mutation."""
input DeleteFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Facility` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Facility` mutation."""
type DeleteFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFacilityId: ID

  """The `Facility` that was deleted by this mutation."""
  facility: Facility

  """Reads a single `Facility` that is related to this `Facility`."""
  facilityByParentFacilityId: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelByRowId` mutation."""
input DeleteFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteFuelCarbonTaxDetailByRowId` mutation."""
input DeleteFuelCarbonTaxDetailByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteFuelCarbonTaxDetail` mutation."""
input DeleteFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelCarbonTaxDetail` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelCarbonTaxDetail` mutation."""
type DeleteFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelCarbonTaxDetailId: ID

  """The `FuelCarbonTaxDetail` that was deleted by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuelChargeByRowId` mutation."""
input DeleteFuelChargeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `deleteFuelCharge` mutation."""
input DeleteFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelCharge` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelCharge` mutation."""
type DeleteFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelChargeId: ID

  """The `FuelCharge` that was deleted by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFuel` mutation."""
input DeleteFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fuel` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFuelMappingByRowId` mutation."""
input DeleteFuelMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteFuelMapping` mutation."""
input DeleteFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FuelMapping` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FuelMapping` mutation."""
type DeleteFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelMappingId: ID

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetail

  """The `FuelMapping` that was deleted by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Fuel` mutation."""
type DeleteFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFuelId: ID

  """The `Fuel` that was deleted by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """Reads a single `FuelMapping` that is related to this `Fuel`."""
  fuelMappingByFuelMappingId: FuelMapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Fuel`."""
  unitByUnitId: Unit
}

"""All input for the `deleteGgircsUserByRowId` mutation."""
input DeleteGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteGgircsUser` mutation."""
input DeleteGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GgircsUser` mutation."""
type DeleteGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGgircsUserId: ID

  """The `GgircsUser` that was deleted by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteIdentifierByRowId` mutation."""
input DeleteIdentifierByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteIdentifier` mutation."""
input DeleteIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Identifier` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Identifier` mutation."""
type DeleteIdentifierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedIdentifierId: ID

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityBcghgidId: Facility

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityId: Facility

  """The `Identifier` that was deleted by this mutation."""
  identifier: Identifier

  """An edge for our `Identifier`. May be used by Relay 1."""
  identifierEdge(
    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteImpliedEmissionFactorByRowId` mutation."""
input DeleteImpliedEmissionFactorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `deleteImpliedEmissionFactor` mutation."""
input DeleteImpliedEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImpliedEmissionFactor` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ImpliedEmissionFactor` mutation."""
type DeleteImpliedEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedImpliedEmissionFactorId: ID

  """
  Reads a single `FuelMapping` that is related to this `ImpliedEmissionFactor`.
  """
  fuelMappingByFuelMappingId: FuelMapping

  """The `ImpliedEmissionFactor` that was deleted by this mutation."""
  impliedEmissionFactor: ImpliedEmissionFactor

  """An edge for our `ImpliedEmissionFactor`. May be used by Relay 1."""
  impliedEmissionFactorEdge(
    """The method to use when ordering `ImpliedEmissionFactor`."""
    orderBy: [ImpliedEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImpliedEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMeasuredEmissionFactorByRowId` mutation."""
input DeleteMeasuredEmissionFactorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteMeasuredEmissionFactor` mutation."""
input DeleteMeasuredEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MeasuredEmissionFactor` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MeasuredEmissionFactor` mutation."""
type DeleteMeasuredEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMeasuredEmissionFactorId: ID

  """
  Reads a single `Fuel` that is related to this `MeasuredEmissionFactor`.
  """
  fuelByFuelId: Fuel

  """The `MeasuredEmissionFactor` that was deleted by this mutation."""
  measuredEmissionFactor: MeasuredEmissionFactor

  """An edge for our `MeasuredEmissionFactor`. May be used by Relay 1."""
  measuredEmissionFactorEdge(
    """The method to use when ordering `MeasuredEmissionFactor`."""
    orderBy: [MeasuredEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeasuredEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicByRowId` mutation."""
input DeleteNaicByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteNaic` mutation."""
input DeleteNaicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Naic` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Naic` mutation."""
type DeleteNaicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicId: ID

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByFacilityId: Facility

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByRegistrationDataFacilityId: Facility

  """The `Naic` that was deleted by this mutation."""
  naic: Naic

  """An edge for our `Naic`. May be used by Relay 1."""
  naicEdge(
    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsCategoryByRowId` mutation."""
input DeleteNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsCategory` mutation."""
input DeleteNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsCategory` mutation."""
type DeleteNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsCategoryId: ID

  """The `NaicsCategory` that was deleted by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsCategoryTypeByRowId` mutation."""
input DeleteNaicsCategoryTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the type mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsCategoryType` mutation."""
input DeleteNaicsCategoryTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategoryType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsCategoryType` mutation."""
type DeleteNaicsCategoryTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsCategoryTypeId: ID

  """The `NaicsCategoryType` that was deleted by this mutation."""
  naicsCategoryType: NaicsCategoryType

  """An edge for our `NaicsCategoryType`. May be used by Relay 1."""
  naicsCategoryTypeEdge(
    """The method to use when ordering `NaicsCategoryType`."""
    orderBy: [NaicsCategoryTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoryTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsMappingByRowId` mutation."""
input DeleteNaicsMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsMapping` mutation."""
input DeleteNaicsMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsMapping` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsMapping` mutation."""
type DeleteNaicsMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsMappingId: ID

  """The `NaicsMapping` that was deleted by this mutation."""
  naicsMapping: NaicsMapping

  """An edge for our `NaicsMapping`. May be used by Relay 1."""
  naicsMappingEdge(
    """The method to use when ordering `NaicsMapping`."""
    orderBy: [NaicsMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNaicsNaicsCategoryByRowId` mutation."""
input DeleteNaicsNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `deleteNaicsNaicsCategory` mutation."""
input DeleteNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsNaicsCategory` to be deleted.
  """
  id: ID!
}

"""The output of our delete `NaicsNaicsCategory` mutation."""
type DeleteNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNaicsNaicsCategoryId: ID

  """The `NaicsNaicsCategory` that was deleted by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteOrganisationBcRegistryIdBySwrsOrganisationId` mutation.
"""
input DeleteOrganisationBcRegistryIdBySwrsOrganisationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The SWRS ID of the organisation"""
  swrsOrganisationId: Int!
}

"""All input for the `deleteOrganisationBcRegistryId` mutation."""
input DeleteOrganisationBcRegistryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganisationBcRegistryId` to be deleted.
  """
  id: ID!
}

"""The output of our delete `OrganisationBcRegistryId` mutation."""
type DeleteOrganisationBcRegistryIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganisationBcRegistryIdId: ID

  """The `OrganisationBcRegistryId` that was deleted by this mutation."""
  organisationBcRegistryId: OrganisationBcRegistryId

  """An edge for our `OrganisationBcRegistryId`. May be used by Relay 1."""
  organisationBcRegistryIdEdge(
    """The method to use when ordering `OrganisationBcRegistryId`."""
    orderBy: [OrganisationBcRegistryIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationBcRegistryIdsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganisationByRowId` mutation."""
input DeleteOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteOrganisation` mutation."""
input DeleteOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Organisation` mutation."""
type DeleteOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganisationId: ID

  """The `Organisation` that was deleted by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteParentOrganisationByRowId` mutation."""
input DeleteParentOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteParentOrganisation` mutation."""
input DeleteParentOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ParentOrganisation` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ParentOrganisation` mutation."""
type DeleteParentOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentOrganisationId: ID

  """
  Reads a single `Organisation` that is related to this `ParentOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """The `ParentOrganisation` that was deleted by this mutation."""
  parentOrganisation: ParentOrganisation

  """An edge for our `ParentOrganisation`. May be used by Relay 1."""
  parentOrganisationEdge(
    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePermitByRowId` mutation."""
input DeletePermitByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deletePermit` mutation."""
input DeletePermitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permit` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Permit` mutation."""
type DeletePermitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPermitId: ID

  """Reads a single `Facility` that is related to this `Permit`."""
  facilityByFacilityId: Facility

  """The `Permit` that was deleted by this mutation."""
  permit: Permit

  """An edge for our `Permit`. May be used by Relay 1."""
  permitEdge(
    """The method to use when ordering `Permit`."""
    orderBy: [PermitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermitsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTaxedVentingEmissionTypeByRowId` mutation."""
input DeleteTaxedVentingEmissionTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!
}

"""All input for the `deleteTaxedVentingEmissionType` mutation."""
input DeleteTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaxedVentingEmissionType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `TaxedVentingEmissionType` mutation."""
type DeleteTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTaxedVentingEmissionTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was deleted by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}

"""All input for the `deleteUnitByRowId` mutation."""
input DeleteUnitByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `deleteUnit` mutation."""
input DeleteUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Unit` mutation."""
type DeleteUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUnitId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unit` that was deleted by this mutation."""
  unit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""
This table containes the list of files containd in the zip files imported from ECCC, excluding XML files (which can be found in the eccc_xml_file table) and other zip files that may be contained in the outer zip file.
"""
type EcccAttachment implements Node {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int!
}

"""
A condition to be used against `EcccAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EcccAttachmentCondition {
  """Checks for equality with the object’s `attachmentFileMd5Hash` field."""
  attachmentFileMd5Hash: String

  """Checks for equality with the object’s `attachmentFilePath` field."""
  attachmentFilePath: String

  """
  Checks for equality with the object’s `attachmentUploadedFileName` field.
  """
  attachmentUploadedFileName: String

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sourceTypeId` field."""
  sourceTypeId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `zipFileId` field."""
  zipFileId: Int
}

"""
A filter to be used against `EcccAttachment` object types. All fields are combined with a logical ‘and.’
"""
input EcccAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [EcccAttachmentFilter!]

  """Filter by the object’s `attachmentFileMd5Hash` field."""
  attachmentFileMd5Hash: StringFilter

  """Filter by the object’s `attachmentFilePath` field."""
  attachmentFilePath: StringFilter

  """Filter by the object’s `attachmentUploadedFileName` field."""
  attachmentUploadedFileName: StringFilter

  """Filter by the object’s `ecccZipFileByZipFileId` relation."""
  ecccZipFileByZipFileId: EcccZipFileFilter

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccAttachmentFilter

  """Checks for any expressions in this list."""
  or: [EcccAttachmentFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sourceTypeId` field."""
  sourceTypeId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter

  """Filter by the object’s `zipFileId` field."""
  zipFileId: IntFilter
}

"""An input for mutations affecting `EcccAttachment`"""
input EcccAttachmentInput {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int!
}

"""
Represents an update to a `EcccAttachment`. Fields that are set will be updated.
"""
input EcccAttachmentPatch {
  """
  The md5 hash of the attachment file. Multiple attachments may have the same md5 hash as they are resubmitted with revisions of SWRS report
  """
  attachmentFileMd5Hash: String

  """The path of the file within the zip file"""
  attachmentFilePath: String

  """The name of the file that was uploaded, inferred from the file path"""
  attachmentUploadedFileName: String

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime

  """
  The id of the source type of the attachment, inferred from the file path
  """
  sourceTypeId: Int

  """
  The id of the SWRS report the attachment is associated with, inferred from the file path
  """
  swrsReportId: Int

  """The id of the zip file the attachment file is in"""
  zipFileId: Int
}

"""A connection to a list of `EcccAttachment` values."""
type EcccAttachmentsConnection {
  """
  A list of edges which contains the `EcccAttachment` and cursor to aid in pagination.
  """
  edges: [EcccAttachmentsEdge!]!

  """A list of `EcccAttachment` objects."""
  nodes: [EcccAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccAttachment` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccAttachment` edge in the connection."""
type EcccAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccAttachment` at the end of the edge."""
  node: EcccAttachment
}

"""Methods to use when ordering `EcccAttachment`."""
enum EcccAttachmentsOrderBy {
  ATTACHMENT_FILE_MD5_HASH_ASC
  ATTACHMENT_FILE_MD5_HASH_DESC
  ATTACHMENT_FILE_PATH_ASC
  ATTACHMENT_FILE_PATH_DESC
  ATTACHMENT_UPLOADED_FILE_NAME_ASC
  ATTACHMENT_UPLOADED_FILE_NAME_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_TYPE_ID_ASC
  SOURCE_TYPE_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  ZIP_FILE_ID_ASC
  ZIP_FILE_ID_DESC
}

"""
An immutable log of which user downloaded which ECCC files using the GGIRCS app
"""
type EcccFileDownloadLog implements Node {
  """The time at which the download was initiated"""
  downloadedAt: Datetime!

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""
A condition to be used against `EcccFileDownloadLog` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EcccFileDownloadLogCondition {
  """Checks for equality with the object’s `downloadedAt` field."""
  downloadedAt: Datetime

  """Checks for equality with the object’s `downloadedBy` field."""
  downloadedBy: Int

  """Checks for equality with the object’s `ecccIndividualFilePath` field."""
  ecccIndividualFilePath: String

  """Checks for equality with the object’s `ecccZipFileName` field."""
  ecccZipFileName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `EcccFileDownloadLog` object types. All fields are combined with a logical ‘and.’
"""
input EcccFileDownloadLogFilter {
  """Checks for all expressions in this list."""
  and: [EcccFileDownloadLogFilter!]

  """Filter by the object’s `downloadedAt` field."""
  downloadedAt: DatetimeFilter

  """Filter by the object’s `downloadedBy` field."""
  downloadedBy: IntFilter

  """Filter by the object’s `ecccIndividualFilePath` field."""
  ecccIndividualFilePath: StringFilter

  """Filter by the object’s `ecccZipFileName` field."""
  ecccZipFileName: StringFilter

  """Filter by the object’s `ggircsUserByDownloadedBy` relation."""
  ggircsUserByDownloadedBy: GgircsUserFilter

  """A related `ggircsUserByDownloadedBy` exists."""
  ggircsUserByDownloadedByExists: Boolean

  """Negates the expression."""
  not: EcccFileDownloadLogFilter

  """Checks for any expressions in this list."""
  or: [EcccFileDownloadLogFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `EcccFileDownloadLog`"""
input EcccFileDownloadLogInput {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""
Represents an update to a `EcccFileDownloadLog`. Fields that are set will be updated.
"""
input EcccFileDownloadLogPatch {
  """The time at which the download was initiated"""
  downloadedAt: Datetime

  """The id of the user that downloaded the file"""
  downloadedBy: Int

  """The path of the file that was downloaded, within the Zip file"""
  ecccIndividualFilePath: String

  """The name of the Zip file containing the file that was downloaded"""
  ecccZipFileName: String
}

"""A connection to a list of `EcccFileDownloadLog` values."""
type EcccFileDownloadLogsConnection {
  """
  A list of edges which contains the `EcccFileDownloadLog` and cursor to aid in pagination.
  """
  edges: [EcccFileDownloadLogsEdge!]!

  """A list of `EcccFileDownloadLog` objects."""
  nodes: [EcccFileDownloadLog]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EcccFileDownloadLog` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EcccFileDownloadLog` edge in the connection."""
type EcccFileDownloadLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccFileDownloadLog` at the end of the edge."""
  node: EcccFileDownloadLog
}

"""Methods to use when ordering `EcccFileDownloadLog`."""
enum EcccFileDownloadLogsOrderBy {
  DOWNLOADED_AT_ASC
  DOWNLOADED_AT_DESC
  DOWNLOADED_BY_ASC
  DOWNLOADED_BY_DESC
  ECCC_INDIVIDUAL_FILE_PATH_ASC
  ECCC_INDIVIDUAL_FILE_PATH_DESC
  ECCC_ZIP_FILE_NAME_ASC
  ECCC_ZIP_FILE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The raw xml files imported from ECCC"""
type EcccXmlFile implements Node {
  """Reads a single `EcccZipFile` that is related to this `EcccXmlFile`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported to the GGIRCS database"""
  importedAt: Datetime!

  """Reads and enables pagination through a set of `Report`."""
  reportsByEcccXmlFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file"""
  xmlFile: String!

  """The unique md5 hash of the xml file"""
  xmlFileMd5Hash: String

  """The name of the xml file"""
  xmlFileName: String

  """The id of the zip file the xml file is in, if applicable"""
  zipFileId: Int
}

"""
A condition to be used against `EcccXmlFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccXmlFileCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String

  """Checks for equality with the object’s `xmlFileMd5Hash` field."""
  xmlFileMd5Hash: String

  """Checks for equality with the object’s `xmlFileName` field."""
  xmlFileName: String

  """Checks for equality with the object’s `zipFileId` field."""
  zipFileId: Int
}

"""
A filter to be used against `EcccXmlFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccXmlFileFilter {
  """Checks for all expressions in this list."""
  and: [EcccXmlFileFilter!]

  """Filter by the object’s `ecccZipFileByZipFileId` relation."""
  ecccZipFileByZipFileId: EcccZipFileFilter

  """A related `ecccZipFileByZipFileId` exists."""
  ecccZipFileByZipFileIdExists: Boolean

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccXmlFileFilter

  """Checks for any expressions in this list."""
  or: [EcccXmlFileFilter!]

  """Filter by the object’s `reportsByEcccXmlFileId` relation."""
  reportsByEcccXmlFileId: EcccXmlFileToManyReportFilter

  """Some related `reportsByEcccXmlFileId` exist."""
  reportsByEcccXmlFileIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `xmlFileMd5Hash` field."""
  xmlFileMd5Hash: StringFilter

  """Filter by the object’s `xmlFileName` field."""
  xmlFileName: StringFilter

  """Filter by the object’s `zipFileId` field."""
  zipFileId: IntFilter
}

"""
A filter to be used against many `Report` object types. All fields are combined with a logical ‘and.’
"""
input EcccXmlFileToManyReportFilter {
  """
  Every related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportFilter

  """
  No related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportFilter

  """
  Some related `Report` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportFilter
}

"""A connection to a list of `EcccXmlFile` values."""
type EcccXmlFilesConnection {
  """
  A list of edges which contains the `EcccXmlFile` and cursor to aid in pagination.
  """
  edges: [EcccXmlFilesEdge!]!

  """A list of `EcccXmlFile` objects."""
  nodes: [EcccXmlFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccXmlFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccXmlFile` edge in the connection."""
type EcccXmlFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccXmlFile` at the end of the edge."""
  node: EcccXmlFile
}

"""Methods to use when ordering `EcccXmlFile`."""
enum EcccXmlFilesOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
  XML_FILE_MD5_HASH_ASC
  XML_FILE_MD5_HASH_DESC
  XML_FILE_NAME_ASC
  XML_FILE_NAME_DESC
  ZIP_FILE_ID_ASC
  ZIP_FILE_ID_DESC
}

"""The table listing the zip files imported from ECCC"""
type EcccZipFile implements Node {
  """number of errors recorded while extracting attachments"""
  attachmentsExtractErrorCount: Int

  """
  true if all attachments contained in the zip file were inserted in the eccc_attachment table
  """
  attachmentsExtracted: Boolean

  """Reads and enables pagination through a set of `EcccAttachment`."""
  ecccAttachmentsByZipFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsConnection!

  """Reads and enables pagination through a set of `EcccXmlFile`."""
  ecccXmlFilesByZipFileId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccXmlFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """number of errors recorded while extracting xml files"""
  xmlFilesExtractErrorCount: Int

  """
  true if all xml files contained in the zip file were inserted in the eccc_xml_file table
  """
  xmlFilesExtracted: Boolean

  """The unique md5 hash of the file"""
  zipFileMd5Hash: String

  """The name of the zip file"""
  zipFileName: String
}

"""
A condition to be used against `EcccZipFile` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EcccZipFileCondition {
  """
  Checks for equality with the object’s `attachmentsExtractErrorCount` field.
  """
  attachmentsExtractErrorCount: Int

  """Checks for equality with the object’s `attachmentsExtracted` field."""
  attachmentsExtracted: Boolean

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """
  Checks for equality with the object’s `xmlFilesExtractErrorCount` field.
  """
  xmlFilesExtractErrorCount: Int

  """Checks for equality with the object’s `xmlFilesExtracted` field."""
  xmlFilesExtracted: Boolean

  """Checks for equality with the object’s `zipFileMd5Hash` field."""
  zipFileMd5Hash: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""
A filter to be used against `EcccZipFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileFilter {
  """Checks for all expressions in this list."""
  and: [EcccZipFileFilter!]

  """Filter by the object’s `attachmentsExtractErrorCount` field."""
  attachmentsExtractErrorCount: IntFilter

  """Filter by the object’s `attachmentsExtracted` field."""
  attachmentsExtracted: BooleanFilter

  """Filter by the object’s `ecccAttachmentsByZipFileId` relation."""
  ecccAttachmentsByZipFileId: EcccZipFileToManyEcccAttachmentFilter

  """Some related `ecccAttachmentsByZipFileId` exist."""
  ecccAttachmentsByZipFileIdExist: Boolean

  """Filter by the object’s `ecccXmlFilesByZipFileId` relation."""
  ecccXmlFilesByZipFileId: EcccZipFileToManyEcccXmlFileFilter

  """Some related `ecccXmlFilesByZipFileId` exist."""
  ecccXmlFilesByZipFileIdExist: Boolean

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: EcccZipFileFilter

  """Checks for any expressions in this list."""
  or: [EcccZipFileFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `xmlFilesExtractErrorCount` field."""
  xmlFilesExtractErrorCount: IntFilter

  """Filter by the object’s `xmlFilesExtracted` field."""
  xmlFilesExtracted: BooleanFilter

  """Filter by the object’s `zipFileMd5Hash` field."""
  zipFileMd5Hash: StringFilter

  """Filter by the object’s `zipFileName` field."""
  zipFileName: StringFilter
}

"""
A filter to be used against many `EcccAttachment` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileToManyEcccAttachmentFilter {
  """
  Every related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccAttachmentFilter

  """
  No related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccAttachmentFilter

  """
  Some related `EcccAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccAttachmentFilter
}

"""
A filter to be used against many `EcccXmlFile` object types. All fields are combined with a logical ‘and.’
"""
input EcccZipFileToManyEcccXmlFileFilter {
  """
  Every related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccXmlFileFilter

  """
  No related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccXmlFileFilter

  """
  Some related `EcccXmlFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccXmlFileFilter
}

"""A connection to a list of `EcccZipFile` values."""
type EcccZipFilesConnection {
  """
  A list of edges which contains the `EcccZipFile` and cursor to aid in pagination.
  """
  edges: [EcccZipFilesEdge!]!

  """A list of `EcccZipFile` objects."""
  nodes: [EcccZipFile]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EcccZipFile` you could get from the connection."""
  totalCount: Int!
}

"""A `EcccZipFile` edge in the connection."""
type EcccZipFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EcccZipFile` at the end of the edge."""
  node: EcccZipFile
}

"""Methods to use when ordering `EcccZipFile`."""
enum EcccZipFilesOrderBy {
  ATTACHMENTS_EXTRACTED_ASC
  ATTACHMENTS_EXTRACTED_DESC
  ATTACHMENTS_EXTRACT_ERROR_COUNT_ASC
  ATTACHMENTS_EXTRACT_ERROR_COUNT_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILES_EXTRACTED_ASC
  XML_FILES_EXTRACTED_DESC
  XML_FILES_EXTRACT_ERROR_COUNT_ASC
  XML_FILES_EXTRACT_ERROR_COUNT_DESC
  ZIP_FILE_MD5_HASH_ASC
  ZIP_FILE_MD5_HASH_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

type Emission implements Node {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity (partial fk reference)"""
  activityName: String

  """The CO2 Equivalent quantity of the emission"""
  calculatedQuantity: BigFloat

  """
  Refers to the Chemical Abstracts Service Registry Number. It is a unique identifier for chemical compounds that can contain up to 10 digits, divided by hyphens into three parts. E.g. 124-38-9 is the CAS number for carbon dioxide.
  """
  casNumber: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emissions category"""
  emissionCategory: String

  """The type of the emission"""
  emissionType: String

  """Reads a single `Facility` that is related to this `Emission`."""
  facilityByFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """Reads a single `Fuel` that is related to this `Emission`."""
  fuelByFuelId: Fuel

  """A foreign key reference to swrs.fuel"""
  fuelId: Int

  """Reads a single `FuelMapping` that is related to this `Emission`."""
  fuelMappingByFuelMappingId: FuelMapping
  fuelMappingId: Int

  """The disambiguation string for Fuel (only on old reports)"""
  fuelName: String

  """The type of the gas"""
  gasType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The emission methodology"""
  methodology: String

  """Reads a single `Naic` that is related to this `Emission`."""
  naicByNaicsId: Naic

  """A foreign key reference to swrs.naics"""
  naicsId: Int

  """Is the emission applicable/NA"""
  notApplicable: Boolean

  """Reads a single `Organisation` that is related to this `Emission`."""
  organisationByOrganisationId: Organisation

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """The quantity of the emission"""
  quantity: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """Reads a single `Unit` that is related to this `Emission`."""
  unitByUnitId: Unit

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""A connection to a list of `EmissionCategory` values."""
type EmissionCategoriesConnection {
  """
  A list of edges which contains the `EmissionCategory` and cursor to aid in pagination.
  """
  edges: [EmissionCategoriesEdge!]!

  """A list of `EmissionCategory` objects."""
  nodes: [EmissionCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionCategory` edge in the connection."""
type EmissionCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionCategory` at the end of the edge."""
  node: EmissionCategory
}

"""Methods to use when ordering `EmissionCategory`."""
enum EmissionCategoriesOrderBy {
  CARBON_TAXED_ASC
  CARBON_TAXED_DESC
  CATEGORY_DEFINITION_ASC
  CATEGORY_DEFINITION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SWRS_EMISSION_CATEGORY_ASC
  SWRS_EMISSION_CATEGORY_DESC
}

type EmissionCategory implements Node {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the emission_category"""
  rowId: Int!

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""
A condition to be used against `EmissionCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EmissionCategoryCondition {
  """Checks for equality with the object’s `carbonTaxed` field."""
  carbonTaxed: Boolean

  """Checks for equality with the object’s `categoryDefinition` field."""
  categoryDefinition: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: String
}

"""
A filter to be used against `EmissionCategory` object types. All fields are combined with a logical ‘and.’
"""
input EmissionCategoryFilter {
  """Checks for all expressions in this list."""
  and: [EmissionCategoryFilter!]

  """Filter by the object’s `carbonTaxed` field."""
  carbonTaxed: BooleanFilter

  """Filter by the object’s `categoryDefinition` field."""
  categoryDefinition: StringFilter

  """Negates the expression."""
  not: EmissionCategoryFilter

  """Checks for any expressions in this list."""
  or: [EmissionCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsEmissionCategory` field."""
  swrsEmissionCategory: StringFilter
}

"""An input for mutations affecting `EmissionCategory`"""
input EmissionCategoryInput {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""
Represents an update to a `EmissionCategory`. Fields that are set will be updated.
"""
input EmissionCategoryPatch {
  """
  Boolean carbon_taxed column indicates whether or not a fuel reported in this category is taxed
  """
  carbonTaxed: Boolean

  """
  Definition of the emission_category as defined in Schedule A / Schedule B of the Greenhouse Gas Industrial Reporting and Control Act (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/249_2015#ScheduleA)
  """
  categoryDefinition: String

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String
}

"""
A condition to be used against `Emission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EmissionCondition {
  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """Checks for equality with the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloat

  """Checks for equality with the object’s `casNumber` field."""
  casNumber: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """Checks for equality with the object’s `emissionType` field."""
  emissionType: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `fuelId` field."""
  fuelId: Int

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `fuelName` field."""
  fuelName: String

  """Checks for equality with the object’s `gasType` field."""
  gasType: String

  """Checks for equality with the object’s `methodology` field."""
  methodology: String

  """Checks for equality with the object’s `naicsId` field."""
  naicsId: Int

  """Checks for equality with the object’s `notApplicable` field."""
  notApplicable: Boolean

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subActivityName` field."""
  subActivityName: String

  """Checks for equality with the object’s `subUnitName` field."""
  subUnitName: String

  """Checks for equality with the object’s `unitId` field."""
  unitId: Int

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A filter to be used against `Emission` object types. All fields are combined with a logical ‘and.’
"""
input EmissionFilter {
  """Filter by the object’s `activityId` field."""
  activityId: IntFilter

  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Checks for all expressions in this list."""
  and: [EmissionFilter!]

  """Filter by the object’s `calculatedQuantity` field."""
  calculatedQuantity: BigFloatFilter

  """Filter by the object’s `casNumber` field."""
  casNumber: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `emissionType` field."""
  emissionType: StringFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `fuelByFuelId` relation."""
  fuelByFuelId: FuelFilter

  """A related `fuelByFuelId` exists."""
  fuelByFuelIdExists: Boolean

  """Filter by the object’s `fuelId` field."""
  fuelId: IntFilter

  """Filter by the object’s `fuelMappingByFuelMappingId` relation."""
  fuelMappingByFuelMappingId: FuelMappingFilter

  """A related `fuelMappingByFuelMappingId` exists."""
  fuelMappingByFuelMappingIdExists: Boolean

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelName` field."""
  fuelName: StringFilter

  """Filter by the object’s `gasType` field."""
  gasType: StringFilter

  """Filter by the object’s `methodology` field."""
  methodology: StringFilter

  """Filter by the object’s `naicByNaicsId` relation."""
  naicByNaicsId: NaicFilter

  """A related `naicByNaicsId` exists."""
  naicByNaicsIdExists: Boolean

  """Filter by the object’s `naicsId` field."""
  naicsId: IntFilter

  """Negates the expression."""
  not: EmissionFilter

  """Filter by the object’s `notApplicable` field."""
  notApplicable: BooleanFilter

  """Checks for any expressions in this list."""
  or: [EmissionFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """A related `organisationByOrganisationId` exists."""
  organisationByOrganisationIdExists: Boolean

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `quantity` field."""
  quantity: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subActivityName` field."""
  subActivityName: StringFilter

  """Filter by the object’s `subUnitName` field."""
  subUnitName: StringFilter

  """Filter by the object’s `unitByUnitId` relation."""
  unitByUnitId: UnitFilter

  """A related `unitByUnitId` exists."""
  unitByUnitIdExists: Boolean

  """Filter by the object’s `unitId` field."""
  unitId: IntFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""An input for mutations affecting `Emission`"""
input EmissionInput {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity (partial fk reference)"""
  activityName: String

  """The CO2 Equivalent quantity of the emission"""
  calculatedQuantity: BigFloat

  """
  Refers to the Chemical Abstracts Service Registry Number. It is a unique identifier for chemical compounds that can contain up to 10 digits, divided by hyphens into three parts. E.g. 124-38-9 is the CAS number for carbon dioxide.
  """
  casNumber: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emissions category"""
  emissionCategory: String

  """The type of the emission"""
  emissionType: String

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """A foreign key reference to swrs.fuel"""
  fuelId: Int
  fuelMappingId: Int

  """The disambiguation string for Fuel (only on old reports)"""
  fuelName: String

  """The type of the gas"""
  gasType: String

  """The emission methodology"""
  methodology: String

  """A foreign key reference to swrs.naics"""
  naicsId: Int

  """Is the emission applicable/NA"""
  notApplicable: Boolean

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """The quantity of the emission"""
  quantity: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""
Represents an update to a `Emission`. Fields that are set will be updated.
"""
input EmissionPatch {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity (partial fk reference)"""
  activityName: String

  """The CO2 Equivalent quantity of the emission"""
  calculatedQuantity: BigFloat

  """
  Refers to the Chemical Abstracts Service Registry Number. It is a unique identifier for chemical compounds that can contain up to 10 digits, divided by hyphens into three parts. E.g. 124-38-9 is the CAS number for carbon dioxide.
  """
  casNumber: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emissions category"""
  emissionCategory: String

  """The type of the emission"""
  emissionType: String

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """A foreign key reference to swrs.fuel"""
  fuelId: Int
  fuelMappingId: Int

  """The disambiguation string for Fuel (only on old reports)"""
  fuelName: String

  """The type of the gas"""
  gasType: String

  """The emission methodology"""
  methodology: String

  """A foreign key reference to swrs.naics"""
  naicsId: Int

  """Is the emission applicable/NA"""
  notApplicable: Boolean

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """The quantity of the emission"""
  quantity: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""A connection to a list of `Emission` values."""
type EmissionsConnection {
  """
  A list of edges which contains the `Emission` and cursor to aid in pagination.
  """
  edges: [EmissionsEdge!]!

  """A list of `Emission` objects."""
  nodes: [Emission]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Emission` you could get from the connection."""
  totalCount: Int!
}

"""A `Emission` edge in the connection."""
type EmissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Emission` at the end of the edge."""
  node: Emission
}

"""Methods to use when ordering `Emission`."""
enum EmissionsOrderBy {
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  CALCULATED_QUANTITY_ASC
  CALCULATED_QUANTITY_DESC
  CAS_NUMBER_ASC
  CAS_NUMBER_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  EMISSION_TYPE_ASC
  EMISSION_TYPE_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FUEL_ID_ASC
  FUEL_ID_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  FUEL_NAME_ASC
  FUEL_NAME_DESC
  GAS_TYPE_ASC
  GAS_TYPE_DESC
  ID_ASC
  ID_DESC
  METHODOLOGY_ASC
  METHODOLOGY_DESC
  NAICS_ID_ASC
  NAICS_ID_DESC
  NATURAL
  NOT_APPLICABLE_ASC
  NOT_APPLICABLE_DESC
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_ACTIVITY_NAME_ASC
  SUB_ACTIVITY_NAME_DESC
  SUB_UNIT_NAME_ASC
  SUB_UNIT_NAME_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

"""A connection to a list of `Facility` values."""
type FacilitiesConnection {
  """
  A list of edges which contains the `Facility` and cursor to aid in pagination.
  """
  edges: [FacilitiesEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection."""
type FacilitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""Methods to use when ordering `Facility`."""
enum FacilitiesOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_BC_GHG_ID_ASC
  FACILITY_BC_GHG_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  ID_ASC
  ID_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PARENT_FACILITY_ID_ASC
  PARENT_FACILITY_ID_DESC
  PORTABILITY_INDICATOR_ASC
  PORTABILITY_INDICATOR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RELATIONSHIP_TYPE_ASC
  RELATIONSHIP_TYPE_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
}

type Facility implements Node {
  """Reads and enables pagination through a set of `Address`."""
  addressesByContactFacilityIdAndAddressId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityAddressesByContactFacilityIdAndAddressIdManyToManyConnection!

  """Reads and enables pagination through a set of `Address`."""
  addressesByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """The primary key for the materialized view"""
  ecccXmlFileId: Int

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByIdentifierFacilityBcghgidIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFacilitiesByIdentifierFacilityBcghgidIdAndFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByIdentifierFacilityIdAndFacilityBcghgidId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFacilitiesByIdentifierFacilityIdAndFacilityBcghgidIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByNaicFacilityIdAndRegistrationDataFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFacilitiesByNaicFacilityIdAndRegistrationDataFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByNaicRegistrationDataFacilityIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFacilitiesByNaicRegistrationDataFacilityIdAndFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByParentFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """The BC GHG ID of the reporting facility"""
  facilityBcGhgId: String

  """Reads a single `Facility` that is related to this `Facility`."""
  facilityByParentFacilityId: Facility

  """The name of the reporting facility"""
  facilityName: String

  """The type of the reporting facility"""
  facilityType: String

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByEmissionFacilityIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFuelMappingsByEmissionFacilityIdAndFuelMappingIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByEmissionFacilityIdAndFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityFuelsByEmissionFacilityIdAndFuelIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Identifier`."""
  identifiersByFacilityBcghgidId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdentifierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdentifierFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersConnection!

  """Reads and enables pagination through a set of `Identifier`."""
  identifiersByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdentifierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdentifierFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersConnection!

  """The latitude of the reporting facility"""
  latitude: BigFloat

  """The longitude of the reporting facility"""
  longitude: BigFloat

  """Reads and enables pagination through a set of `Naic`."""
  naicsByEmissionFacilityIdAndNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityNaicsByEmissionFacilityIdAndNaicsIdManyToManyConnection!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsConnection!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByRegistrationDataFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsConnection!

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByAddressFacilityIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityOrganisationsByAddressFacilityIdAndOrganisationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByEmissionFacilityIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityOrganisationsByEmissionFacilityIdAndOrganisationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByFacilityParentFacilityIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityOrganisationsByFacilityParentFacilityIdAndOrganisationIdManyToManyConnection!

  """A foreign key reference to swrs.lfo_facility"""
  parentFacilityId: Int

  """Reads and enables pagination through a set of `ParentOrganisation`."""
  parentOrganisationsByAddressFacilityIdAndParentOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ParentOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityParentOrganisationsByAddressFacilityIdAndParentOrganisationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Permit`."""
  permitsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Permit`."""
    orderBy: [PermitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermitsConnection!

  """The portability indicator"""
  portabilityIndicator: String

  """The type of relationship"""
  relationshipType: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The status of the facility"""
  status: String

  """The reporting facility swrs id"""
  swrsFacilityId: Int

  """Reads and enables pagination through a set of `Unit`."""
  unitsByEmissionFacilityIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilityUnitsByEmissionFacilityIdAndUnitIdManyToManyConnection!
}

"""A connection to a list of `Address` values, with data from `Contact`."""
type FacilityAddressesByContactFacilityIdAndAddressIdManyToManyConnection {
  """
  A list of edges which contains the `Address`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [FacilityAddressesByContactFacilityIdAndAddressIdManyToManyEdge!]!

  """A list of `Address` objects."""
  nodes: [Address]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Address` you could get from the connection."""
  totalCount: Int!
}

"""A `Address` edge in the connection, with data from `Contact`."""
type FacilityAddressesByContactFacilityIdAndAddressIdManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByAddressId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Address` at the end of the edge."""
  node: Address
}

"""
A condition to be used against `Facility` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FacilityCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityBcGhgId` field."""
  facilityBcGhgId: String

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `parentFacilityId` field."""
  parentFacilityId: Int

  """Checks for equality with the object’s `portabilityIndicator` field."""
  portabilityIndicator: String

  """Checks for equality with the object’s `relationshipType` field."""
  relationshipType: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int
}

type FacilityDetail {
  ecccXmlFileId: Int
  facilityBcGhgId: String
  facilityName: String
  facilityType: String
  hhwCategory: String
  identifierValue: String
  ircCategory: String
  latitude: BigFloat
  longitude: BigFloat
  naicsClassification: String
  naicsCode: Int
  naicsId: Int
  organisationId: Int
  parentFacilityId: Int
  portabilityIndicator: String
  relationshipType: String
  reportId: Int
  rowId: Int
  status: String
  swrsFacilityId: Int
}

"""
A condition to be used against `FacilityDetail` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FacilityDetailCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityBcGhgId` field."""
  facilityBcGhgId: String

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `hhwCategory` field."""
  hhwCategory: String

  """Checks for equality with the object’s `identifierValue` field."""
  identifierValue: String

  """Checks for equality with the object’s `ircCategory` field."""
  ircCategory: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: BigFloat

  """Checks for equality with the object’s `longitude` field."""
  longitude: BigFloat

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `naicsId` field."""
  naicsId: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `parentFacilityId` field."""
  parentFacilityId: Int

  """Checks for equality with the object’s `portabilityIndicator` field."""
  portabilityIndicator: String

  """Checks for equality with the object’s `relationshipType` field."""
  relationshipType: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int
}

"""
A filter to be used against `FacilityDetail` object types. All fields are combined with a logical ‘and.’
"""
input FacilityDetailFilter {
  """Checks for all expressions in this list."""
  and: [FacilityDetailFilter!]

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `facilityBcGhgId` field."""
  facilityBcGhgId: StringFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `hhwCategory` field."""
  hhwCategory: StringFilter

  """Filter by the object’s `identifierValue` field."""
  identifierValue: StringFilter

  """Filter by the object’s `ircCategory` field."""
  ircCategory: StringFilter

  """Filter by the object’s `latitude` field."""
  latitude: BigFloatFilter

  """Filter by the object’s `longitude` field."""
  longitude: BigFloatFilter

  """Filter by the object’s `naicsClassification` field."""
  naicsClassification: StringFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Filter by the object’s `naicsId` field."""
  naicsId: IntFilter

  """Negates the expression."""
  not: FacilityDetailFilter

  """Checks for any expressions in this list."""
  or: [FacilityDetailFilter!]

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `parentFacilityId` field."""
  parentFacilityId: IntFilter

  """Filter by the object’s `portabilityIndicator` field."""
  portabilityIndicator: StringFilter

  """Filter by the object’s `relationshipType` field."""
  relationshipType: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter
}

"""A connection to a list of `FacilityDetail` values."""
type FacilityDetailsConnection {
  """
  A list of edges which contains the `FacilityDetail` and cursor to aid in pagination.
  """
  edges: [FacilityDetailsEdge!]!

  """A list of `FacilityDetail` objects."""
  nodes: [FacilityDetail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FacilityDetail` you could get from the connection."""
  totalCount: Int!
}

"""A `FacilityDetail` edge in the connection."""
type FacilityDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FacilityDetail` at the end of the edge."""
  node: FacilityDetail
}

"""Methods to use when ordering `FacilityDetail`."""
enum FacilityDetailsOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_BC_GHG_ID_ASC
  FACILITY_BC_GHG_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  HHW_CATEGORY_ASC
  HHW_CATEGORY_DESC
  IDENTIFIER_VALUE_ASC
  IDENTIFIER_VALUE_DESC
  ID_ASC
  ID_DESC
  IRC_CATEGORY_ASC
  IRC_CATEGORY_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NAICS_ID_ASC
  NAICS_ID_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PARENT_FACILITY_ID_ASC
  PARENT_FACILITY_ID_DESC
  PORTABILITY_INDICATOR_ASC
  PORTABILITY_INDICATOR_DESC
  RELATIONSHIP_TYPE_ASC
  RELATIONSHIP_TYPE_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
}

"""
A connection to a list of `Facility` values, with data from `Identifier`.
"""
type FacilityFacilitiesByIdentifierFacilityBcghgidIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Identifier`, and the cursor to aid in pagination.
  """
  edges: [FacilityFacilitiesByIdentifierFacilityBcghgidIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Identifier`."""
type FacilityFacilitiesByIdentifierFacilityBcghgidIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Identifier`."""
  identifiersByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdentifierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdentifierFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A connection to a list of `Facility` values, with data from `Identifier`.
"""
type FacilityFacilitiesByIdentifierFacilityIdAndFacilityBcghgidIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Identifier`, and the cursor to aid in pagination.
  """
  edges: [FacilityFacilitiesByIdentifierFacilityIdAndFacilityBcghgidIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Identifier`."""
type FacilityFacilitiesByIdentifierFacilityIdAndFacilityBcghgidIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Identifier`."""
  identifiersByFacilityBcghgidId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdentifierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdentifierFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""A connection to a list of `Facility` values, with data from `Naic`."""
type FacilityFacilitiesByNaicFacilityIdAndRegistrationDataFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Naic`, and the cursor to aid in pagination.
  """
  edges: [FacilityFacilitiesByNaicFacilityIdAndRegistrationDataFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Naic`."""
type FacilityFacilitiesByNaicFacilityIdAndRegistrationDataFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Naic`."""
  naicsByRegistrationDataFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""A connection to a list of `Facility` values, with data from `Naic`."""
type FacilityFacilitiesByNaicRegistrationDataFacilityIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Naic`, and the cursor to aid in pagination.
  """
  edges: [FacilityFacilitiesByNaicRegistrationDataFacilityIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Naic`."""
type FacilityFacilitiesByNaicRegistrationDataFacilityIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Naic`."""
  naicsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Facility` object types. All fields are combined with a logical ‘and.’
"""
input FacilityFilter {
  """Filter by the object’s `addressesByFacilityId` relation."""
  addressesByFacilityId: FacilityToManyAddressFilter

  """Some related `addressesByFacilityId` exist."""
  addressesByFacilityIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [FacilityFilter!]

  """Filter by the object’s `contactsByFacilityId` relation."""
  contactsByFacilityId: FacilityToManyContactFilter

  """Some related `contactsByFacilityId` exist."""
  contactsByFacilityIdExist: Boolean

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionsByFacilityId` relation."""
  emissionsByFacilityId: FacilityToManyEmissionFilter

  """Some related `emissionsByFacilityId` exist."""
  emissionsByFacilityIdExist: Boolean

  """Filter by the object’s `facilitiesByParentFacilityId` relation."""
  facilitiesByParentFacilityId: FacilityToManyFacilityFilter

  """Some related `facilitiesByParentFacilityId` exist."""
  facilitiesByParentFacilityIdExist: Boolean

  """Filter by the object’s `facilityBcGhgId` field."""
  facilityBcGhgId: StringFilter

  """Filter by the object’s `facilityByParentFacilityId` relation."""
  facilityByParentFacilityId: FacilityFilter

  """A related `facilityByParentFacilityId` exists."""
  facilityByParentFacilityIdExists: Boolean

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `identifiersByFacilityBcghgidId` relation."""
  identifiersByFacilityBcghgidId: FacilityToManyIdentifierFilter

  """Some related `identifiersByFacilityBcghgidId` exist."""
  identifiersByFacilityBcghgidIdExist: Boolean

  """Filter by the object’s `identifiersByFacilityId` relation."""
  identifiersByFacilityId: FacilityToManyIdentifierFilter

  """Some related `identifiersByFacilityId` exist."""
  identifiersByFacilityIdExist: Boolean

  """Filter by the object’s `latitude` field."""
  latitude: BigFloatFilter

  """Filter by the object’s `longitude` field."""
  longitude: BigFloatFilter

  """Filter by the object’s `naicsByFacilityId` relation."""
  naicsByFacilityId: FacilityToManyNaicFilter

  """Some related `naicsByFacilityId` exist."""
  naicsByFacilityIdExist: Boolean

  """Filter by the object’s `naicsByRegistrationDataFacilityId` relation."""
  naicsByRegistrationDataFacilityId: FacilityToManyNaicFilter

  """Some related `naicsByRegistrationDataFacilityId` exist."""
  naicsByRegistrationDataFacilityIdExist: Boolean

  """Negates the expression."""
  not: FacilityFilter

  """Checks for any expressions in this list."""
  or: [FacilityFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """A related `organisationByOrganisationId` exists."""
  organisationByOrganisationIdExists: Boolean

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `parentFacilityId` field."""
  parentFacilityId: IntFilter

  """Filter by the object’s `permitsByFacilityId` relation."""
  permitsByFacilityId: FacilityToManyPermitFilter

  """Some related `permitsByFacilityId` exist."""
  permitsByFacilityIdExist: Boolean

  """Filter by the object’s `portabilityIndicator` field."""
  portabilityIndicator: StringFilter

  """Filter by the object’s `relationshipType` field."""
  relationshipType: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter
}

"""
A connection to a list of `FuelMapping` values, with data from `Emission`.
"""
type FacilityFuelMappingsByEmissionFacilityIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FacilityFuelMappingsByEmissionFacilityIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Emission`."""
type FacilityFuelMappingsByEmissionFacilityIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""A connection to a list of `Fuel` values, with data from `Emission`."""
type FacilityFuelsByEmissionFacilityIdAndFuelIdManyToManyConnection {
  """
  A list of edges which contains the `Fuel`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FacilityFuelsByEmissionFacilityIdAndFuelIdManyToManyEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection, with data from `Emission`."""
type FacilityFuelsByEmissionFacilityIdAndFuelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""An input for mutations affecting `Facility`"""
input FacilityInput {
  """The primary key for the materialized view"""
  ecccXmlFileId: Int

  """The BC GHG ID of the reporting facility"""
  facilityBcGhgId: String

  """The name of the reporting facility"""
  facilityName: String

  """The type of the reporting facility"""
  facilityType: String

  """The latitude of the reporting facility"""
  latitude: BigFloat

  """The longitude of the reporting facility"""
  longitude: BigFloat

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """A foreign key reference to swrs.lfo_facility"""
  parentFacilityId: Int

  """The portability indicator"""
  portabilityIndicator: String

  """The type of relationship"""
  relationshipType: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The status of the facility"""
  status: String

  """The reporting facility swrs id"""
  swrsFacilityId: Int
}

"""A connection to a list of `Naic` values, with data from `Emission`."""
type FacilityNaicsByEmissionFacilityIdAndNaicsIdManyToManyConnection {
  """
  A list of edges which contains the `Naic`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FacilityNaicsByEmissionFacilityIdAndNaicsIdManyToManyEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection, with data from `Emission`."""
type FacilityNaicsByEmissionFacilityIdAndNaicsIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Naic` at the end of the edge."""
  node: Naic
}

"""
A connection to a list of `Organisation` values, with data from `Address`.
"""
type FacilityOrganisationsByAddressFacilityIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [FacilityOrganisationsByAddressFacilityIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Address`."""
type FacilityOrganisationsByAddressFacilityIdAndOrganisationIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""
A connection to a list of `Organisation` values, with data from `Emission`.
"""
type FacilityOrganisationsByEmissionFacilityIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FacilityOrganisationsByEmissionFacilityIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Emission`."""
type FacilityOrganisationsByEmissionFacilityIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""
A connection to a list of `Organisation` values, with data from `Facility`.
"""
type FacilityOrganisationsByFacilityParentFacilityIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Facility`, and the cursor to aid in pagination.
  """
  edges: [FacilityOrganisationsByFacilityParentFacilityIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Facility`."""
type FacilityOrganisationsByFacilityParentFacilityIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""
A connection to a list of `ParentOrganisation` values, with data from `Address`.
"""
type FacilityParentOrganisationsByAddressFacilityIdAndParentOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `ParentOrganisation`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [FacilityParentOrganisationsByAddressFacilityIdAndParentOrganisationIdManyToManyEdge!]!

  """A list of `ParentOrganisation` objects."""
  nodes: [ParentOrganisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ParentOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ParentOrganisation` edge in the connection, with data from `Address`.
"""
type FacilityParentOrganisationsByAddressFacilityIdAndParentOrganisationIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByParentOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ParentOrganisation` at the end of the edge."""
  node: ParentOrganisation
}

"""
Represents an update to a `Facility`. Fields that are set will be updated.
"""
input FacilityPatch {
  """The primary key for the materialized view"""
  ecccXmlFileId: Int

  """The BC GHG ID of the reporting facility"""
  facilityBcGhgId: String

  """The name of the reporting facility"""
  facilityName: String

  """The type of the reporting facility"""
  facilityType: String

  """The latitude of the reporting facility"""
  latitude: BigFloat

  """The longitude of the reporting facility"""
  longitude: BigFloat

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """A foreign key reference to swrs.lfo_facility"""
  parentFacilityId: Int

  """The portability indicator"""
  portabilityIndicator: String

  """The type of relationship"""
  relationshipType: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The status of the facility"""
  status: String

  """The reporting facility swrs id"""
  swrsFacilityId: Int
}

"""
A filter to be used against many `Address` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyAddressFilter {
  """
  Every related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AddressFilter

  """
  No related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AddressFilter

  """
  Some related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AddressFilter
}

"""
A filter to be used against many `Contact` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyContactFilter {
  """
  Every related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContactFilter

  """
  No related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContactFilter

  """
  Some related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContactFilter
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""
A filter to be used against many `Facility` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyFacilityFilter {
  """
  Every related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FacilityFilter

  """
  No related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FacilityFilter

  """
  Some related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FacilityFilter
}

"""
A filter to be used against many `Identifier` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyIdentifierFilter {
  """
  Every related `Identifier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IdentifierFilter

  """
  No related `Identifier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IdentifierFilter

  """
  Some related `Identifier` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IdentifierFilter
}

"""
A filter to be used against many `Naic` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyNaicFilter {
  """
  Every related `Naic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NaicFilter

  """
  No related `Naic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NaicFilter

  """
  Some related `Naic` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NaicFilter
}

"""
A filter to be used against many `Permit` object types. All fields are combined with a logical ‘and.’
"""
input FacilityToManyPermitFilter {
  """
  Every related `Permit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PermitFilter

  """
  No related `Permit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PermitFilter

  """
  Some related `Permit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PermitFilter
}

"""A connection to a list of `Unit` values, with data from `Emission`."""
type FacilityUnitsByEmissionFacilityIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FacilityUnitsByEmissionFacilityIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Emission`."""
type FacilityUnitsByEmissionFacilityIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

type Fuel implements Node {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """The description of the fuels alternative methodology"""
  alternativeMethodologyDescription: String

  """The annual amount of the fuel"""
  annualFuelAmount: BigFloat

  """The annual steam generation of the fuel"""
  annualSteamGeneration: BigFloat

  """The annual weight avg of the fuel carbon content"""
  annualWeightedAvgCarbonContent: BigFloat

  """The annual weight avg of the high heating value of the fuel"""
  annualWeightedAvgHhv: BigFloat

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emission category the reported fuel belongs to"""
  emissionCategory: String

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByEmissionFuelIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelFacilitiesByEmissionFuelIdAndFacilityIdManyToManyConnection!

  """The classification of the fuel"""
  fuelClassification: String

  """The description of the fuel"""
  fuelDescription: String

  """Reads a single `FuelMapping` that is related to this `Fuel`."""
  fuelMappingByFuelMappingId: FuelMapping

  """A foreign key reference to swrs.fuel_mapping"""
  fuelMappingId: Int

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByEmissionFuelIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelFuelMappingsByEmissionFuelIdAndFuelMappingIdManyToManyConnection!

  """The type of the fuel"""
  fuelType: String

  """The units of the fuel"""
  fuelUnits: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads and enables pagination through a set of `MeasuredEmissionFactor`.
  """
  measuredEmissionFactorsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasuredEmissionFactorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasuredEmissionFactorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MeasuredEmissionFactor`."""
    orderBy: [MeasuredEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeasuredEmissionFactorsConnection!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByEmissionFuelIdAndNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelNaicsByEmissionFuelIdAndNaicsIdManyToManyConnection!

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByEmissionFuelIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelOrganisationsByEmissionFuelIdAndOrganisationIdManyToManyConnection!

  """The other flare details concerning the fuel"""
  otherFlareDetails: String

  """The fuel used in the first quarter"""
  q1: BigFloat

  """The fuel used in the second quarter"""
  q2: BigFloat

  """The fuel used in the third quarter"""
  q3: BigFloat

  """The fuel used in the fourth quarter"""
  q4: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """Reads a single `Unit` that is related to this `Fuel`."""
  unitByUnitId: Unit

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String

  """Reads and enables pagination through a set of `Unit`."""
  unitsByEmissionFuelIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelUnitsByEmissionFuelIdAndUnitIdManyToManyConnection!
}

type FuelCarbonTaxDetail implements Node {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByFuelCarbonTaxDetailsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The internal primary key for the mapping"""
  rowId: Int!

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
A condition to be used against `FuelCarbonTaxDetail` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailCondition {
  """Checks for equality with the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: Int

  """Checks for equality with the object’s `ctaRateUnits` field."""
  ctaRateUnits: String

  """Checks for equality with the object’s `normalizedFuelType` field."""
  normalizedFuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `unitConversionFactor` field."""
  unitConversionFactor: BigFloat
}

"""
A filter to be used against `FuelCarbonTaxDetail` object types. All fields are combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailFilter {
  """Checks for all expressions in this list."""
  and: [FuelCarbonTaxDetailFilter!]

  """
  Filter by the object’s `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` relation.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeFilter

  """A related `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` exists."""
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeIdExists: Boolean

  """Filter by the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: IntFilter

  """Filter by the object’s `ctaRateUnits` field."""
  ctaRateUnits: StringFilter

  """
  Filter by the object’s `fuelMappingsByFuelCarbonTaxDetailsId` relation.
  """
  fuelMappingsByFuelCarbonTaxDetailsId: FuelCarbonTaxDetailToManyFuelMappingFilter

  """Some related `fuelMappingsByFuelCarbonTaxDetailsId` exist."""
  fuelMappingsByFuelCarbonTaxDetailsIdExist: Boolean

  """Filter by the object’s `normalizedFuelType` field."""
  normalizedFuelType: StringFilter

  """Negates the expression."""
  not: FuelCarbonTaxDetailFilter

  """Checks for any expressions in this list."""
  or: [FuelCarbonTaxDetailFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `unitConversionFactor` field."""
  unitConversionFactor: BigFloatFilter
}

"""An input for mutations affecting `FuelCarbonTaxDetail`"""
input FuelCarbonTaxDetailInput {
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
Represents an update to a `FuelCarbonTaxDetail`. Fields that are set will be updated.
"""
input FuelCarbonTaxDetailPatch {
  carbonTaxActFuelTypeId: Int

  """The units of measure"""
  ctaRateUnits: String

  """The type of fuel (Normalized)"""
  normalizedFuelType: String

  """The state of the fuel (gas, liquid, solid)"""
  state: String

  """The conversion factor for cta units to reported units"""
  unitConversionFactor: BigFloat
}

"""
A filter to be used against many `FuelMapping` object types. All fields are combined with a logical ‘and.’
"""
input FuelCarbonTaxDetailToManyFuelMappingFilter {
  """
  Every related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelMappingFilter

  """
  No related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelMappingFilter

  """
  Some related `FuelMapping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelMappingFilter
}

"""A connection to a list of `FuelCarbonTaxDetail` values."""
type FuelCarbonTaxDetailsConnection {
  """
  A list of edges which contains the `FuelCarbonTaxDetail` and cursor to aid in pagination.
  """
  edges: [FuelCarbonTaxDetailsEdge!]!

  """A list of `FuelCarbonTaxDetail` objects."""
  nodes: [FuelCarbonTaxDetail]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FuelCarbonTaxDetail` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FuelCarbonTaxDetail` edge in the connection."""
type FuelCarbonTaxDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelCarbonTaxDetail` at the end of the edge."""
  node: FuelCarbonTaxDetail
}

"""Methods to use when ordering `FuelCarbonTaxDetail`."""
enum FuelCarbonTaxDetailsOrderBy {
  CARBON_TAX_ACT_FUEL_TYPE_ID_ASC
  CARBON_TAX_ACT_FUEL_TYPE_ID_DESC
  CTA_RATE_UNITS_ASC
  CTA_RATE_UNITS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NORMALIZED_FUEL_TYPE_ASC
  NORMALIZED_FUEL_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATE_ASC
  STATE_DESC
  UNIT_CONVERSION_FACTOR_ASC
  UNIT_CONVERSION_FACTOR_DESC
}

type FuelCharge implements Node {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The internal primary key"""
  rowId: Int!

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""
A condition to be used against `FuelCharge` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FuelChargeCondition {
  """Checks for equality with the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: Int

  """Checks for equality with the object’s `endDate` field."""
  endDate: Date

  """Checks for equality with the object’s `fuelCharge` field."""
  fuelCharge: BigFloat

  """Checks for equality with the object’s `metadata` field."""
  metadata: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date
}

"""
A filter to be used against `FuelCharge` object types. All fields are combined with a logical ‘and.’
"""
input FuelChargeFilter {
  """Checks for all expressions in this list."""
  and: [FuelChargeFilter!]

  """
  Filter by the object’s `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` relation.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelTypeFilter

  """A related `carbonTaxActFuelTypeByCarbonTaxActFuelTypeId` exists."""
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeIdExists: Boolean

  """Filter by the object’s `carbonTaxActFuelTypeId` field."""
  carbonTaxActFuelTypeId: IntFilter

  """Filter by the object’s `endDate` field."""
  endDate: DateFilter

  """Filter by the object’s `fuelCharge` field."""
  fuelCharge: BigFloatFilter

  """Filter by the object’s `metadata` field."""
  metadata: StringFilter

  """Negates the expression."""
  not: FuelChargeFilter

  """Checks for any expressions in this list."""
  or: [FuelChargeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `startDate` field."""
  startDate: DateFilter
}

"""An input for mutations affecting `FuelCharge`"""
input FuelChargeInput {
  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""
Represents an update to a `FuelCharge`. Fields that are set will be updated.
"""
input FuelChargePatch {
  """Foreign key references the carbon_tax_act_fuel_type table"""
  carbonTaxActFuelTypeId: Int

  """The date on which the fuel charge rate band stops/stopped being used"""
  endDate: Date

  """The ministry-defined fuel charge pertaining to a specific fuel type"""
  fuelCharge: BigFloat

  """Column contains metadata pertaining to each fuel charge row"""
  metadata: String

  """The date on which the fuel charge rate band came into effect"""
  startDate: Date
}

"""A connection to a list of `FuelCharge` values."""
type FuelChargesConnection {
  """
  A list of edges which contains the `FuelCharge` and cursor to aid in pagination.
  """
  edges: [FuelChargesEdge!]!

  """A list of `FuelCharge` objects."""
  nodes: [FuelCharge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelCharge` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelCharge` edge in the connection."""
type FuelChargesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelCharge` at the end of the edge."""
  node: FuelCharge
}

"""Methods to use when ordering `FuelCharge`."""
enum FuelChargesOrderBy {
  CARBON_TAX_ACT_FUEL_TYPE_ID_ASC
  CARBON_TAX_ACT_FUEL_TYPE_ID_DESC
  END_DATE_ASC
  END_DATE_DESC
  FUEL_CHARGE_ASC
  FUEL_CHARGE_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  START_DATE_ASC
  START_DATE_DESC
}

"""
A condition to be used against `Fuel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FuelCondition {
  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """
  Checks for equality with the object’s `alternativeMethodologyDescription` field.
  """
  alternativeMethodologyDescription: String

  """Checks for equality with the object’s `annualFuelAmount` field."""
  annualFuelAmount: BigFloat

  """Checks for equality with the object’s `annualSteamGeneration` field."""
  annualSteamGeneration: BigFloat

  """
  Checks for equality with the object’s `annualWeightedAvgCarbonContent` field.
  """
  annualWeightedAvgCarbonContent: BigFloat

  """Checks for equality with the object’s `annualWeightedAvgHhv` field."""
  annualWeightedAvgHhv: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `emissionCategory` field."""
  emissionCategory: String

  """Checks for equality with the object’s `fuelClassification` field."""
  fuelClassification: String

  """Checks for equality with the object’s `fuelDescription` field."""
  fuelDescription: String

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `fuelUnits` field."""
  fuelUnits: String

  """Checks for equality with the object’s `otherFlareDetails` field."""
  otherFlareDetails: String

  """Checks for equality with the object’s `q1` field."""
  q1: BigFloat

  """Checks for equality with the object’s `q2` field."""
  q2: BigFloat

  """Checks for equality with the object’s `q3` field."""
  q3: BigFloat

  """Checks for equality with the object’s `q4` field."""
  q4: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subActivityName` field."""
  subActivityName: String

  """Checks for equality with the object’s `subUnitName` field."""
  subUnitName: String

  """Checks for equality with the object’s `unitId` field."""
  unitId: Int

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A connection to a list of `Facility` values, with data from `Emission`.
"""
type FuelFacilitiesByEmissionFuelIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelFacilitiesByEmissionFuelIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Emission`."""
type FuelFacilitiesByEmissionFuelIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Fuel` object types. All fields are combined with a logical ‘and.’
"""
input FuelFilter {
  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Filter by the object’s `alternativeMethodologyDescription` field."""
  alternativeMethodologyDescription: StringFilter

  """Checks for all expressions in this list."""
  and: [FuelFilter!]

  """Filter by the object’s `annualFuelAmount` field."""
  annualFuelAmount: BigFloatFilter

  """Filter by the object’s `annualSteamGeneration` field."""
  annualSteamGeneration: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgCarbonContent` field."""
  annualWeightedAvgCarbonContent: BigFloatFilter

  """Filter by the object’s `annualWeightedAvgHhv` field."""
  annualWeightedAvgHhv: BigFloatFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionCategory` field."""
  emissionCategory: StringFilter

  """Filter by the object’s `emissionsByFuelId` relation."""
  emissionsByFuelId: FuelToManyEmissionFilter

  """Some related `emissionsByFuelId` exist."""
  emissionsByFuelIdExist: Boolean

  """Filter by the object’s `fuelClassification` field."""
  fuelClassification: StringFilter

  """Filter by the object’s `fuelDescription` field."""
  fuelDescription: StringFilter

  """Filter by the object’s `fuelMappingByFuelMappingId` relation."""
  fuelMappingByFuelMappingId: FuelMappingFilter

  """A related `fuelMappingByFuelMappingId` exists."""
  fuelMappingByFuelMappingIdExists: Boolean

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Filter by the object’s `fuelUnits` field."""
  fuelUnits: StringFilter

  """Filter by the object’s `measuredEmissionFactorsByFuelId` relation."""
  measuredEmissionFactorsByFuelId: FuelToManyMeasuredEmissionFactorFilter

  """Some related `measuredEmissionFactorsByFuelId` exist."""
  measuredEmissionFactorsByFuelIdExist: Boolean

  """Negates the expression."""
  not: FuelFilter

  """Checks for any expressions in this list."""
  or: [FuelFilter!]

  """Filter by the object’s `otherFlareDetails` field."""
  otherFlareDetails: StringFilter

  """Filter by the object’s `q1` field."""
  q1: BigFloatFilter

  """Filter by the object’s `q2` field."""
  q2: BigFloatFilter

  """Filter by the object’s `q3` field."""
  q3: BigFloatFilter

  """Filter by the object’s `q4` field."""
  q4: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subActivityName` field."""
  subActivityName: StringFilter

  """Filter by the object’s `subUnitName` field."""
  subUnitName: StringFilter

  """Filter by the object’s `unitByUnitId` relation."""
  unitByUnitId: UnitFilter

  """A related `unitByUnitId` exists."""
  unitByUnitIdExists: Boolean

  """Filter by the object’s `unitId` field."""
  unitId: IntFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""
A connection to a list of `FuelMapping` values, with data from `Emission`.
"""
type FuelFuelMappingsByEmissionFuelIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelFuelMappingsByEmissionFuelIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Emission`."""
type FuelFuelMappingsByEmissionFuelIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""An input for mutations affecting `Fuel`"""
input FuelInput {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """The description of the fuels alternative methodology"""
  alternativeMethodologyDescription: String

  """The annual amount of the fuel"""
  annualFuelAmount: BigFloat

  """The annual steam generation of the fuel"""
  annualSteamGeneration: BigFloat

  """The annual weight avg of the fuel carbon content"""
  annualWeightedAvgCarbonContent: BigFloat

  """The annual weight avg of the high heating value of the fuel"""
  annualWeightedAvgHhv: BigFloat

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emission category the reported fuel belongs to"""
  emissionCategory: String

  """The classification of the fuel"""
  fuelClassification: String

  """The description of the fuel"""
  fuelDescription: String

  """A foreign key reference to swrs.fuel_mapping"""
  fuelMappingId: Int

  """The type of the fuel"""
  fuelType: String

  """The units of the fuel"""
  fuelUnits: String

  """The other flare details concerning the fuel"""
  otherFlareDetails: String

  """The fuel used in the first quarter"""
  q1: BigFloat

  """The fuel used in the second quarter"""
  q2: BigFloat

  """The fuel used in the third quarter"""
  q3: BigFloat

  """The fuel used in the fourth quarter"""
  q4: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String
}

type FuelMapping implements Node {
  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByEmissionFuelMappingIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingFacilitiesByEmissionFuelMappingIdAndFacilityIdManyToManyConnection!

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetail

  """The foreign key to swrs.fuel_carbon_tax_details"""
  fuelCarbonTaxDetailsId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByEmissionFuelMappingIdAndFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingFuelsByEmissionFuelMappingIdAndFuelIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ImpliedEmissionFactor`."""
  impliedEmissionFactorsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImpliedEmissionFactorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImpliedEmissionFactorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ImpliedEmissionFactor`."""
    orderBy: [ImpliedEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImpliedEmissionFactorsConnection!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByEmissionFuelMappingIdAndNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingNaicsByEmissionFuelMappingIdAndNaicsIdManyToManyConnection!

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByEmissionFuelMappingIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingOrganisationsByEmissionFuelMappingIdAndOrganisationIdManyToManyConnection!

  """The internal primary key for the mapping"""
  rowId: Int!

  """Reads and enables pagination through a set of `Unit`."""
  unitsByEmissionFuelMappingIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingUnitsByEmissionFuelMappingIdAndUnitIdManyToManyConnection!

  """Reads and enables pagination through a set of `Unit`."""
  unitsByFuelFuelMappingIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingUnitsByFuelFuelMappingIdAndUnitIdManyToManyConnection!
}

"""
A condition to be used against `FuelMapping` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FuelMappingCondition {
  """Checks for equality with the object’s `fuelCarbonTaxDetailsId` field."""
  fuelCarbonTaxDetailsId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A connection to a list of `Facility` values, with data from `Emission`.
"""
type FuelMappingFacilitiesByEmissionFuelMappingIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingFacilitiesByEmissionFuelMappingIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Emission`."""
type FuelMappingFacilitiesByEmissionFuelMappingIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `FuelMapping` object types. All fields are combined with a logical ‘and.’
"""
input FuelMappingFilter {
  """Checks for all expressions in this list."""
  and: [FuelMappingFilter!]

  """Filter by the object’s `emissionsByFuelMappingId` relation."""
  emissionsByFuelMappingId: FuelMappingToManyEmissionFilter

  """Some related `emissionsByFuelMappingId` exist."""
  emissionsByFuelMappingIdExist: Boolean

  """
  Filter by the object’s `fuelCarbonTaxDetailByFuelCarbonTaxDetailsId` relation.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetailFilter

  """A related `fuelCarbonTaxDetailByFuelCarbonTaxDetailsId` exists."""
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsIdExists: Boolean

  """Filter by the object’s `fuelCarbonTaxDetailsId` field."""
  fuelCarbonTaxDetailsId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Filter by the object’s `fuelsByFuelMappingId` relation."""
  fuelsByFuelMappingId: FuelMappingToManyFuelFilter

  """Some related `fuelsByFuelMappingId` exist."""
  fuelsByFuelMappingIdExist: Boolean

  """
  Filter by the object’s `impliedEmissionFactorsByFuelMappingId` relation.
  """
  impliedEmissionFactorsByFuelMappingId: FuelMappingToManyImpliedEmissionFactorFilter

  """Some related `impliedEmissionFactorsByFuelMappingId` exist."""
  impliedEmissionFactorsByFuelMappingIdExist: Boolean

  """Negates the expression."""
  not: FuelMappingFilter

  """Checks for any expressions in this list."""
  or: [FuelMappingFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""A connection to a list of `Fuel` values, with data from `Emission`."""
type FuelMappingFuelsByEmissionFuelMappingIdAndFuelIdManyToManyConnection {
  """
  A list of edges which contains the `Fuel`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingFuelsByEmissionFuelMappingIdAndFuelIdManyToManyEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection, with data from `Emission`."""
type FuelMappingFuelsByEmissionFuelMappingIdAndFuelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""An input for mutations affecting `FuelMapping`"""
input FuelMappingInput {
  """The foreign key to swrs.fuel_carbon_tax_details"""
  fuelCarbonTaxDetailsId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String
}

"""A connection to a list of `Naic` values, with data from `Emission`."""
type FuelMappingNaicsByEmissionFuelMappingIdAndNaicsIdManyToManyConnection {
  """
  A list of edges which contains the `Naic`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingNaicsByEmissionFuelMappingIdAndNaicsIdManyToManyEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection, with data from `Emission`."""
type FuelMappingNaicsByEmissionFuelMappingIdAndNaicsIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Naic` at the end of the edge."""
  node: Naic
}

"""
A connection to a list of `Organisation` values, with data from `Emission`.
"""
type FuelMappingOrganisationsByEmissionFuelMappingIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingOrganisationsByEmissionFuelMappingIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Emission`."""
type FuelMappingOrganisationsByEmissionFuelMappingIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""
Represents an update to a `FuelMapping`. Fields that are set will be updated.
"""
input FuelMappingPatch {
  """The foreign key to swrs.fuel_carbon_tax_details"""
  fuelCarbonTaxDetailsId: Int

  """The type of fuel (from GHGR), Foreign key to fuel"""
  fuelType: String
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input FuelMappingToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""
A filter to be used against many `Fuel` object types. All fields are combined with a logical ‘and.’
"""
input FuelMappingToManyFuelFilter {
  """
  Every related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelFilter

  """
  No related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelFilter

  """
  Some related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelFilter
}

"""
A filter to be used against many `ImpliedEmissionFactor` object types. All fields are combined with a logical ‘and.’
"""
input FuelMappingToManyImpliedEmissionFactorFilter {
  """
  Every related `ImpliedEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ImpliedEmissionFactorFilter

  """
  No related `ImpliedEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ImpliedEmissionFactorFilter

  """
  Some related `ImpliedEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ImpliedEmissionFactorFilter
}

"""A connection to a list of `Unit` values, with data from `Emission`."""
type FuelMappingUnitsByEmissionFuelMappingIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingUnitsByEmissionFuelMappingIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Emission`."""
type FuelMappingUnitsByEmissionFuelMappingIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A connection to a list of `Unit` values, with data from `Fuel`."""
type FuelMappingUnitsByFuelFuelMappingIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [FuelMappingUnitsByFuelFuelMappingIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Fuel`."""
type FuelMappingUnitsByFuelFuelMappingIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A connection to a list of `FuelMapping` values."""
type FuelMappingsConnection {
  """
  A list of edges which contains the `FuelMapping` and cursor to aid in pagination.
  """
  edges: [FuelMappingsEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection."""
type FuelMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""Methods to use when ordering `FuelMapping`."""
enum FuelMappingsOrderBy {
  FUEL_CARBON_TAX_DETAILS_ID_ASC
  FUEL_CARBON_TAX_DETAILS_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Naic` values, with data from `Emission`."""
type FuelNaicsByEmissionFuelIdAndNaicsIdManyToManyConnection {
  """
  A list of edges which contains the `Naic`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelNaicsByEmissionFuelIdAndNaicsIdManyToManyEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection, with data from `Emission`."""
type FuelNaicsByEmissionFuelIdAndNaicsIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Naic` at the end of the edge."""
  node: Naic
}

"""
A connection to a list of `Organisation` values, with data from `Emission`.
"""
type FuelOrganisationsByEmissionFuelIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelOrganisationsByEmissionFuelIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Emission`."""
type FuelOrganisationsByEmissionFuelIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Represents an update to a `Fuel`. Fields that are set will be updated."""
input FuelPatch {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """The description of the fuels alternative methodology"""
  alternativeMethodologyDescription: String

  """The annual amount of the fuel"""
  annualFuelAmount: BigFloat

  """The annual steam generation of the fuel"""
  annualSteamGeneration: BigFloat

  """The annual weight avg of the fuel carbon content"""
  annualWeightedAvgCarbonContent: BigFloat

  """The annual weight avg of the high heating value of the fuel"""
  annualWeightedAvgHhv: BigFloat

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The emission category the reported fuel belongs to"""
  emissionCategory: String

  """The classification of the fuel"""
  fuelClassification: String

  """The description of the fuel"""
  fuelDescription: String

  """A foreign key reference to swrs.fuel_mapping"""
  fuelMappingId: Int

  """The type of the fuel"""
  fuelType: String

  """The units of the fuel"""
  fuelUnits: String

  """The other flare details concerning the fuel"""
  otherFlareDetails: String

  """The fuel used in the first quarter"""
  q1: BigFloat

  """The fuel used in the second quarter"""
  q2: BigFloat

  """The fuel used in the third quarter"""
  q3: BigFloat

  """The fuel used in the fourth quarter"""
  q4: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """A foreign key reference to swrs.unit"""
  unitId: Int

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input FuelToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""
A filter to be used against many `MeasuredEmissionFactor` object types. All fields are combined with a logical ‘and.’
"""
input FuelToManyMeasuredEmissionFactorFilter {
  """
  Every related `MeasuredEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MeasuredEmissionFactorFilter

  """
  No related `MeasuredEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MeasuredEmissionFactorFilter

  """
  Some related `MeasuredEmissionFactor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MeasuredEmissionFactorFilter
}

"""A connection to a list of `Unit` values, with data from `Emission`."""
type FuelUnitsByEmissionFuelIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [FuelUnitsByEmissionFuelIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Emission`."""
type FuelUnitsByEmissionFuelIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A connection to a list of `Fuel` values."""
type FuelsConnection {
  """
  A list of edges which contains the `Fuel` and cursor to aid in pagination.
  """
  edges: [FuelsEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection."""
type FuelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""Methods to use when ordering `Fuel`."""
enum FuelsOrderBy {
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  ALTERNATIVE_METHODOLOGY_DESCRIPTION_ASC
  ALTERNATIVE_METHODOLOGY_DESCRIPTION_DESC
  ANNUAL_FUEL_AMOUNT_ASC
  ANNUAL_FUEL_AMOUNT_DESC
  ANNUAL_STEAM_GENERATION_ASC
  ANNUAL_STEAM_GENERATION_DESC
  ANNUAL_WEIGHTED_AVG_CARBON_CONTENT_ASC
  ANNUAL_WEIGHTED_AVG_CARBON_CONTENT_DESC
  ANNUAL_WEIGHTED_AVG_HHV_ASC
  ANNUAL_WEIGHTED_AVG_HHV_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  EMISSION_CATEGORY_ASC
  EMISSION_CATEGORY_DESC
  FUEL_CLASSIFICATION_ASC
  FUEL_CLASSIFICATION_DESC
  FUEL_DESCRIPTION_ASC
  FUEL_DESCRIPTION_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  FUEL_UNITS_ASC
  FUEL_UNITS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OTHER_FLARE_DETAILS_ASC
  OTHER_FLARE_DETAILS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  Q1_ASC
  Q1_DESC
  Q2_ASC
  Q2_DESC
  Q3_ASC
  Q3_DESC
  Q4_ASC
  Q4_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_ACTIVITY_NAME_ASC
  SUB_ACTIVITY_NAME_DESC
  SUB_UNIT_NAME_ASC
  SUB_UNIT_NAME_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

"""Table containing the benchmark and eligibility threshold for a product"""
type GgircsUser implements Node {
  """The date this record was inserted"""
  createdAt: Datetime!

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  ecccFileDownloadLogsByDownloadedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccFileDownloadLogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection!

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserCreatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserDeletedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserDeletedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByGgircsUserUpdatedByAndDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyConnection!

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """User's last name"""
  lastName: String

  """Unique ID for the user"""
  rowId: Int!

  """The date this record was last updated"""
  updatedAt: Datetime!

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A condition to be used against `GgircsUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GgircsUserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `deletedAt` field."""
  deletedAt: Datetime

  """Checks for equality with the object’s `deletedBy` field."""
  deletedBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `GgircsUser` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserFilter {
  """Checks for all expressions in this list."""
  and: [GgircsUserFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `deletedAt` field."""
  deletedAt: DatetimeFilter

  """Filter by the object’s `deletedBy` field."""
  deletedBy: IntFilter

  """Filter by the object’s `ecccFileDownloadLogsByDownloadedBy` relation."""
  ecccFileDownloadLogsByDownloadedBy: GgircsUserToManyEcccFileDownloadLogFilter

  """Some related `ecccFileDownloadLogsByDownloadedBy` exist."""
  ecccFileDownloadLogsByDownloadedByExist: Boolean

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `ggircsUserByCreatedBy` relation."""
  ggircsUserByCreatedBy: GgircsUserFilter

  """A related `ggircsUserByCreatedBy` exists."""
  ggircsUserByCreatedByExists: Boolean

  """Filter by the object’s `ggircsUserByDeletedBy` relation."""
  ggircsUserByDeletedBy: GgircsUserFilter

  """A related `ggircsUserByDeletedBy` exists."""
  ggircsUserByDeletedByExists: Boolean

  """Filter by the object’s `ggircsUserByUpdatedBy` relation."""
  ggircsUserByUpdatedBy: GgircsUserFilter

  """A related `ggircsUserByUpdatedBy` exists."""
  ggircsUserByUpdatedByExists: Boolean

  """Filter by the object’s `ggircsUsersByCreatedBy` relation."""
  ggircsUsersByCreatedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByCreatedBy` exist."""
  ggircsUsersByCreatedByExist: Boolean

  """Filter by the object’s `ggircsUsersByDeletedBy` relation."""
  ggircsUsersByDeletedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByDeletedBy` exist."""
  ggircsUsersByDeletedByExist: Boolean

  """Filter by the object’s `ggircsUsersByUpdatedBy` relation."""
  ggircsUsersByUpdatedBy: GgircsUserToManyGgircsUserFilter

  """Some related `ggircsUsersByUpdatedBy` exist."""
  ggircsUsersByUpdatedByExist: Boolean

  """Filter by the object’s `jwtTokensBySub` relation."""
  jwtTokensBySub: GgircsUserToManyJwtTokenFilter

  """Some related `jwtTokensBySub` exist."""
  jwtTokensBySubExist: Boolean

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: GgircsUserFilter

  """Checks for any expressions in this list."""
  or: [GgircsUserFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserDeletedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""
A connection to a list of `GgircsUser` values, with data from `GgircsUser`.
"""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyConnection {
  """
  A list of edges which contains the `GgircsUser`, info from the `GgircsUser`, and the cursor to aid in pagination.
  """
  edges: [GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection, with data from `GgircsUser`."""
type GgircsUserGgircsUsersByGgircsUserUpdatedByAndDeletedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `GgircsUser`."""
  ggircsUsersByDeletedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection!

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""An input for mutations affecting `GgircsUser`"""
input GgircsUserInput {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
Represents an update to a `GgircsUser`. Fields that are set will be updated.
"""
input GgircsUserPatch {
  """The date this record was inserted"""
  createdAt: Datetime

  """The foreign key to the user id that created this record"""
  createdBy: Int

  """The date this record was deleted"""
  deletedAt: Datetime

  """The foreign key to the user id that deleted this record"""
  deletedBy: Int

  """User's email address"""
  emailAddress: String

  """User's first name"""
  firstName: String

  """User's last name"""
  lastName: String

  """The date this record was last updated"""
  updatedAt: Datetime

  """The foreign key to the user id that last updated this record"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""
A filter to be used against many `EcccFileDownloadLog` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyEcccFileDownloadLogFilter {
  """
  Every related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EcccFileDownloadLogFilter

  """
  No related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EcccFileDownloadLogFilter

  """
  Some related `EcccFileDownloadLog` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EcccFileDownloadLogFilter
}

"""
A filter to be used against many `GgircsUser` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyGgircsUserFilter {
  """
  Every related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GgircsUserFilter

  """
  No related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GgircsUserFilter

  """
  Some related `GgircsUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GgircsUserFilter
}

"""
A filter to be used against many `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input GgircsUserToManyJwtTokenFilter {
  """
  Every related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JwtTokenFilter

  """
  No related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JwtTokenFilter

  """
  Some related `JwtToken` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JwtTokenFilter
}

"""A connection to a list of `GgircsUser` values."""
type GgircsUsersConnection {
  """
  A list of edges which contains the `GgircsUser` and cursor to aid in pagination.
  """
  edges: [GgircsUsersEdge!]!

  """A list of `GgircsUser` objects."""
  nodes: [GgircsUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GgircsUser` you could get from the connection."""
  totalCount: Int!
}

"""A `GgircsUser` edge in the connection."""
type GgircsUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GgircsUser` at the end of the edge."""
  node: GgircsUser
}

"""Methods to use when ordering `GgircsUser`."""
enum GgircsUsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DELETED_BY_ASC
  DELETED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""
The raw xml files imported from existing legacy GHGR database in Oracle
"""
type GhgrImport implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime!

  """The internal primary key for the file"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  xmlFile: String!
}

"""
A condition to be used against `GhgrImport` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GhgrImportCondition {
  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `xmlFile` field."""
  xmlFile: String
}

"""
A filter to be used against `GhgrImport` object types. All fields are combined with a logical ‘and.’
"""
input GhgrImportFilter {
  """Checks for all expressions in this list."""
  and: [GhgrImportFilter!]

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Negates the expression."""
  not: GhgrImportFilter

  """Checks for any expressions in this list."""
  or: [GhgrImportFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""A connection to a list of `GhgrImport` values."""
type GhgrImportsConnection {
  """
  A list of edges which contains the `GhgrImport` and cursor to aid in pagination.
  """
  edges: [GhgrImportsEdge!]!

  """A list of `GhgrImport` objects."""
  nodes: [GhgrImport]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GhgrImport` you could get from the connection."""
  totalCount: Int!
}

"""A `GhgrImport` edge in the connection."""
type GhgrImportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GhgrImport` at the end of the edge."""
  node: GhgrImport
}

"""Methods to use when ordering `GhgrImport`."""
enum GhgrImportsOrderBy {
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  XML_FILE_ASC
  XML_FILE_DESC
}

type Identifier implements Node {
  """The foreign key referencing ggrics_swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility with correct bcghgid"""
  facilityBcghgidId: Int

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityBcghgidId: Facility

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The type of identifier"""
  identifierType: String

  """The value of the identifier"""
  identifierValue: String

  """
  The path context to the Identifier node (from VerifyTombstone or RegistrationDetails)
  """
  pathContext: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The swrs facility id"""
  swrsFacilityId: Int
}

"""
A condition to be used against `Identifier` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IdentifierCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityBcghgidId` field."""
  facilityBcghgidId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `identifierType` field."""
  identifierType: String

  """Checks for equality with the object’s `identifierValue` field."""
  identifierValue: String

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int
}

"""
A filter to be used against `Identifier` object types. All fields are combined with a logical ‘and.’
"""
input IdentifierFilter {
  """Checks for all expressions in this list."""
  and: [IdentifierFilter!]

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `facilityBcghgidId` field."""
  facilityBcghgidId: IntFilter

  """Filter by the object’s `facilityByFacilityBcghgidId` relation."""
  facilityByFacilityBcghgidId: FacilityFilter

  """A related `facilityByFacilityBcghgidId` exists."""
  facilityByFacilityBcghgidIdExists: Boolean

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `identifierType` field."""
  identifierType: StringFilter

  """Filter by the object’s `identifierValue` field."""
  identifierValue: StringFilter

  """Negates the expression."""
  not: IdentifierFilter

  """Checks for any expressions in this list."""
  or: [IdentifierFilter!]

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter
}

"""An input for mutations affecting `Identifier`"""
input IdentifierInput {
  """The foreign key referencing ggrics_swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility with correct bcghgid"""
  facilityBcghgidId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The type of identifier"""
  identifierType: String

  """The value of the identifier"""
  identifierValue: String

  """
  The path context to the Identifier node (from VerifyTombstone or RegistrationDetails)
  """
  pathContext: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The swrs facility id"""
  swrsFacilityId: Int
}

"""
Represents an update to a `Identifier`. Fields that are set will be updated.
"""
input IdentifierPatch {
  """The foreign key referencing ggrics_swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility with correct bcghgid"""
  facilityBcghgidId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The type of identifier"""
  identifierType: String

  """The value of the identifier"""
  identifierValue: String

  """
  The path context to the Identifier node (from VerifyTombstone or RegistrationDetails)
  """
  pathContext: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The swrs facility id"""
  swrsFacilityId: Int
}

"""A connection to a list of `Identifier` values."""
type IdentifiersConnection {
  """
  A list of edges which contains the `Identifier` and cursor to aid in pagination.
  """
  edges: [IdentifiersEdge!]!

  """A list of `Identifier` objects."""
  nodes: [Identifier]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Identifier` you could get from the connection."""
  totalCount: Int!
}

"""A `Identifier` edge in the connection."""
type IdentifiersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Identifier` at the end of the edge."""
  node: Identifier
}

"""Methods to use when ordering `Identifier`."""
enum IdentifiersOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_BCGHGID_ID_ASC
  FACILITY_BCGHGID_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  IDENTIFIER_TYPE_ASC
  IDENTIFIER_TYPE_DESC
  IDENTIFIER_VALUE_ASC
  IDENTIFIER_VALUE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
}

type ImpliedEmissionFactor implements Node {
  """The date on which the implied emission factor stops/stopped being used"""
  endDate: Date

  """
  Reads a single `FuelMapping` that is related to this `ImpliedEmissionFactor`.
  """
  fuelMappingByFuelMappingId: FuelMapping

  """The foreign key reference to the fuel mapping table"""
  fuelMappingId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  The ministry-defined implied emission factor pertaining to a specific fuel type
  """
  impliedEmissionFactor: BigFloat

  """The internal primary key"""
  rowId: Int!

  """The date on which the implied emission factor came into effect"""
  startDate: Date
}

"""
A condition to be used against `ImpliedEmissionFactor` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ImpliedEmissionFactorCondition {
  """Checks for equality with the object’s `endDate` field."""
  endDate: Date

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `impliedEmissionFactor` field."""
  impliedEmissionFactor: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date
}

"""
A filter to be used against `ImpliedEmissionFactor` object types. All fields are combined with a logical ‘and.’
"""
input ImpliedEmissionFactorFilter {
  """Checks for all expressions in this list."""
  and: [ImpliedEmissionFactorFilter!]

  """Filter by the object’s `endDate` field."""
  endDate: DateFilter

  """Filter by the object’s `fuelMappingByFuelMappingId` relation."""
  fuelMappingByFuelMappingId: FuelMappingFilter

  """A related `fuelMappingByFuelMappingId` exists."""
  fuelMappingByFuelMappingIdExists: Boolean

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `impliedEmissionFactor` field."""
  impliedEmissionFactor: BigFloatFilter

  """Negates the expression."""
  not: ImpliedEmissionFactorFilter

  """Checks for any expressions in this list."""
  or: [ImpliedEmissionFactorFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `startDate` field."""
  startDate: DateFilter
}

"""An input for mutations affecting `ImpliedEmissionFactor`"""
input ImpliedEmissionFactorInput {
  """The date on which the implied emission factor stops/stopped being used"""
  endDate: Date

  """The foreign key reference to the fuel mapping table"""
  fuelMappingId: Int

  """
  The ministry-defined implied emission factor pertaining to a specific fuel type
  """
  impliedEmissionFactor: BigFloat

  """The date on which the implied emission factor came into effect"""
  startDate: Date
}

"""
Represents an update to a `ImpliedEmissionFactor`. Fields that are set will be updated.
"""
input ImpliedEmissionFactorPatch {
  """The date on which the implied emission factor stops/stopped being used"""
  endDate: Date

  """The foreign key reference to the fuel mapping table"""
  fuelMappingId: Int

  """
  The ministry-defined implied emission factor pertaining to a specific fuel type
  """
  impliedEmissionFactor: BigFloat

  """The date on which the implied emission factor came into effect"""
  startDate: Date
}

"""A connection to a list of `ImpliedEmissionFactor` values."""
type ImpliedEmissionFactorsConnection {
  """
  A list of edges which contains the `ImpliedEmissionFactor` and cursor to aid in pagination.
  """
  edges: [ImpliedEmissionFactorsEdge!]!

  """A list of `ImpliedEmissionFactor` objects."""
  nodes: [ImpliedEmissionFactor]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ImpliedEmissionFactor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ImpliedEmissionFactor` edge in the connection."""
type ImpliedEmissionFactorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ImpliedEmissionFactor` at the end of the edge."""
  node: ImpliedEmissionFactor
}

"""Methods to use when ordering `ImpliedEmissionFactor`."""
enum ImpliedEmissionFactorsOrderBy {
  END_DATE_ASC
  END_DATE_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  ID_ASC
  ID_DESC
  IMPLIED_EMISSION_FACTOR_ASC
  IMPLIED_EMISSION_FACTOR_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  START_DATE_ASC
  START_DATE_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type JwtToken {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String

  """Reads a single `GgircsUser` that is related to this `JwtToken`."""
  ggircsUserBySub: GgircsUser
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `JwtToken` object types. All fields are combined with a logical ‘and.’
"""
input JwtTokenFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [JwtTokenFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `ggircsUserBySub` relation."""
  ggircsUserBySub: GgircsUserFilter

  """A related `ggircsUserBySub` exists."""
  ggircsUserBySubExists: Boolean

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: JwtTokenFilter

  """Checks for any expressions in this list."""
  or: [JwtTokenFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

type MeasuredEmissionFactor implements Node {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """
  Reads a single `Fuel` that is related to this `MeasuredEmissionFactor`.
  """
  fuelByFuelId: Fuel

  """A foreign key reference to swrs.fuel"""
  fuelId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The amount of the measured_emission"""
  measuredEmissionFactorAmount: BigFloat

  """The gas type of the measured_emission"""
  measuredEmissionFactorGas: String

  """The measured emission factor unit type of the fuel"""
  measuredEmissionFactorUnitType: String

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""
A condition to be used against `MeasuredEmissionFactor` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MeasuredEmissionFactorCondition {
  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `fuelId` field."""
  fuelId: Int

  """
  Checks for equality with the object’s `measuredEmissionFactorAmount` field.
  """
  measuredEmissionFactorAmount: BigFloat

  """
  Checks for equality with the object’s `measuredEmissionFactorGas` field.
  """
  measuredEmissionFactorGas: String

  """
  Checks for equality with the object’s `measuredEmissionFactorUnitType` field.
  """
  measuredEmissionFactorUnitType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subActivityName` field."""
  subActivityName: String

  """Checks for equality with the object’s `subUnitName` field."""
  subUnitName: String

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A filter to be used against `MeasuredEmissionFactor` object types. All fields are combined with a logical ‘and.’
"""
input MeasuredEmissionFactorFilter {
  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Checks for all expressions in this list."""
  and: [MeasuredEmissionFactorFilter!]

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `fuelByFuelId` relation."""
  fuelByFuelId: FuelFilter

  """A related `fuelByFuelId` exists."""
  fuelByFuelIdExists: Boolean

  """Filter by the object’s `fuelId` field."""
  fuelId: IntFilter

  """Filter by the object’s `measuredEmissionFactorAmount` field."""
  measuredEmissionFactorAmount: BigFloatFilter

  """Filter by the object’s `measuredEmissionFactorGas` field."""
  measuredEmissionFactorGas: StringFilter

  """Filter by the object’s `measuredEmissionFactorUnitType` field."""
  measuredEmissionFactorUnitType: StringFilter

  """Negates the expression."""
  not: MeasuredEmissionFactorFilter

  """Checks for any expressions in this list."""
  or: [MeasuredEmissionFactorFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subActivityName` field."""
  subActivityName: StringFilter

  """Filter by the object’s `subUnitName` field."""
  subUnitName: StringFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""An input for mutations affecting `MeasuredEmissionFactor`"""
input MeasuredEmissionFactorInput {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.fuel"""
  fuelId: Int

  """The amount of the measured_emission"""
  measuredEmissionFactorAmount: BigFloat

  """The gas type of the measured_emission"""
  measuredEmissionFactorGas: String

  """The measured emission factor unit type of the fuel"""
  measuredEmissionFactorUnitType: String

  """The primary key"""
  rowId: Int!

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""
Represents an update to a `MeasuredEmissionFactor`. Fields that are set will be updated.
"""
input MeasuredEmissionFactorPatch {
  """The name of the activity (partial fk reference)"""
  activityName: String

  """A foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.fuel"""
  fuelId: Int

  """The amount of the measured_emission"""
  measuredEmissionFactorAmount: BigFloat

  """The gas type of the measured_emission"""
  measuredEmissionFactorGas: String

  """The measured emission factor unit type of the fuel"""
  measuredEmissionFactorUnitType: String

  """The primary key"""
  rowId: Int

  """The name of the sub_activity (partial fk reference)"""
  subActivityName: String

  """The name of the sub_unit (partial fk reference)"""
  subUnitName: String

  """The name of the unit (partial fk reference)"""
  unitName: String
}

"""A connection to a list of `MeasuredEmissionFactor` values."""
type MeasuredEmissionFactorsConnection {
  """
  A list of edges which contains the `MeasuredEmissionFactor` and cursor to aid in pagination.
  """
  edges: [MeasuredEmissionFactorsEdge!]!

  """A list of `MeasuredEmissionFactor` objects."""
  nodes: [MeasuredEmissionFactor]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MeasuredEmissionFactor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MeasuredEmissionFactor` edge in the connection."""
type MeasuredEmissionFactorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MeasuredEmissionFactor` at the end of the edge."""
  node: MeasuredEmissionFactor
}

"""Methods to use when ordering `MeasuredEmissionFactor`."""
enum MeasuredEmissionFactorsOrderBy {
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FUEL_ID_ASC
  FUEL_ID_DESC
  ID_ASC
  ID_DESC
  MEASURED_EMISSION_FACTOR_AMOUNT_ASC
  MEASURED_EMISSION_FACTOR_AMOUNT_DESC
  MEASURED_EMISSION_FACTOR_GAS_ASC
  MEASURED_EMISSION_FACTOR_GAS_DESC
  MEASURED_EMISSION_FACTOR_UNIT_TYPE_ASC
  MEASURED_EMISSION_FACTOR_UNIT_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUB_ACTIVITY_NAME_ASC
  SUB_ACTIVITY_NAME_DESC
  SUB_UNIT_NAME_ASC
  SUB_UNIT_NAME_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AdditionalDatum`."""
  createAdditionalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdditionalDatumInput!
  ): CreateAdditionalDatumPayload

  """Creates a single `Address`."""
  createAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAddressInput!
  ): CreateAddressPayload

  """Creates a single `CarbonTaxActFuelType`."""
  createCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCarbonTaxActFuelTypeInput!
  ): CreateCarbonTaxActFuelTypePayload

  """Creates a single `CarbonTaxRateMapping`."""
  createCarbonTaxRateMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCarbonTaxRateMappingInput!
  ): CreateCarbonTaxRateMappingPayload

  """Creates a single `Contact`."""
  createContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContactInput!
  ): CreateContactPayload

  """Creates a single `EcccAttachment`."""
  createEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEcccAttachmentInput!
  ): CreateEcccAttachmentPayload

  """Creates a single `EcccFileDownloadLog`."""
  createEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEcccFileDownloadLogInput!
  ): CreateEcccFileDownloadLogPayload

  """Creates a single `Emission`."""
  createEmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionInput!
  ): CreateEmissionPayload

  """Creates a single `EmissionCategory`."""
  createEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionCategoryInput!
  ): CreateEmissionCategoryPayload

  """Creates a single `Facility`."""
  createFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFacilityInput!
  ): CreateFacilityPayload

  """Creates a single `Fuel`."""
  createFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelInput!
  ): CreateFuelPayload

  """Creates a single `FuelCarbonTaxDetail`."""
  createFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelCarbonTaxDetailInput!
  ): CreateFuelCarbonTaxDetailPayload

  """Creates a single `FuelCharge`."""
  createFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelChargeInput!
  ): CreateFuelChargePayload

  """Creates a single `FuelMapping`."""
  createFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelMappingInput!
  ): CreateFuelMappingPayload
  createFuelMappingCascade(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFuelMappingCascadeInput!
  ): CreateFuelMappingCascadePayload

  """Creates a single `GgircsUser`."""
  createGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserInput!
  ): CreateGgircsUserPayload
  createGgircsUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGgircsUserFromSessionInput!
  ): CreateGgircsUserFromSessionPayload

  """Creates a single `Identifier`."""
  createIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIdentifierInput!
  ): CreateIdentifierPayload

  """Creates a single `ImpliedEmissionFactor`."""
  createImpliedEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImpliedEmissionFactorInput!
  ): CreateImpliedEmissionFactorPayload

  """Creates a single `MeasuredEmissionFactor`."""
  createMeasuredEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMeasuredEmissionFactorInput!
  ): CreateMeasuredEmissionFactorPayload

  """Creates a single `Naic`."""
  createNaic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicInput!
  ): CreateNaicPayload

  """Creates a single `NaicsCategory`."""
  createNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsCategoryInput!
  ): CreateNaicsCategoryPayload

  """Creates a single `NaicsCategoryType`."""
  createNaicsCategoryType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsCategoryTypeInput!
  ): CreateNaicsCategoryTypePayload

  """Creates a single `NaicsMapping`."""
  createNaicsMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsMappingInput!
  ): CreateNaicsMappingPayload

  """Creates a single `NaicsNaicsCategory`."""
  createNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNaicsNaicsCategoryInput!
  ): CreateNaicsNaicsCategoryPayload

  """Creates a single `Organisation`."""
  createOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationInput!
  ): CreateOrganisationPayload

  """Creates a single `OrganisationBcRegistryId`."""
  createOrganisationBcRegistryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationBcRegistryIdInput!
  ): CreateOrganisationBcRegistryIdPayload

  """Creates a single `ParentOrganisation`."""
  createParentOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentOrganisationInput!
  ): CreateParentOrganisationPayload

  """Creates a single `Permit`."""
  createPermit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermitInput!
  ): CreatePermitPayload

  """Creates a single `TaxedVentingEmissionType`."""
  createTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaxedVentingEmissionTypeInput!
  ): CreateTaxedVentingEmissionTypePayload

  """Creates a single `Unit`."""
  createUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUnitInput!
  ): CreateUnitPayload

  """Deletes a single `AdditionalDatum` using its globally unique id."""
  deleteAdditionalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalDatumInput!
  ): DeleteAdditionalDatumPayload

  """Deletes a single `AdditionalDatum` using a unique key."""
  deleteAdditionalDatumByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalDatumByRowIdInput!
  ): DeleteAdditionalDatumPayload

  """Deletes a single `Address` using its globally unique id."""
  deleteAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAddressInput!
  ): DeleteAddressPayload

  """Deletes a single `Address` using a unique key."""
  deleteAddressByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAddressByRowIdInput!
  ): DeleteAddressPayload

  """Deletes a single `CarbonTaxActFuelType` using its globally unique id."""
  deleteCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxActFuelTypeInput!
  ): DeleteCarbonTaxActFuelTypePayload

  """Deletes a single `CarbonTaxActFuelType` using a unique key."""
  deleteCarbonTaxActFuelTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxActFuelTypeByRowIdInput!
  ): DeleteCarbonTaxActFuelTypePayload

  """Deletes a single `CarbonTaxRateMapping` using its globally unique id."""
  deleteCarbonTaxRateMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxRateMappingInput!
  ): DeleteCarbonTaxRateMappingPayload

  """Deletes a single `CarbonTaxRateMapping` using a unique key."""
  deleteCarbonTaxRateMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarbonTaxRateMappingByRowIdInput!
  ): DeleteCarbonTaxRateMappingPayload

  """Deletes a single `Contact` using its globally unique id."""
  deleteContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactInput!
  ): DeleteContactPayload

  """Deletes a single `Contact` using a unique key."""
  deleteContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactByRowIdInput!
  ): DeleteContactPayload

  """Deletes a single `EcccAttachment` using its globally unique id."""
  deleteEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccAttachmentInput!
  ): DeleteEcccAttachmentPayload

  """Deletes a single `EcccAttachment` using a unique key."""
  deleteEcccAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccAttachmentByRowIdInput!
  ): DeleteEcccAttachmentPayload

  """Deletes a single `EcccFileDownloadLog` using its globally unique id."""
  deleteEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `EcccFileDownloadLog` using a unique key."""
  deleteEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEcccFileDownloadLogByRowIdInput!
  ): DeleteEcccFileDownloadLogPayload

  """Deletes a single `Emission` using its globally unique id."""
  deleteEmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionInput!
  ): DeleteEmissionPayload

  """Deletes a single `Emission` using a unique key."""
  deleteEmissionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionByRowIdInput!
  ): DeleteEmissionPayload

  """Deletes a single `EmissionCategory` using its globally unique id."""
  deleteEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategory` using a unique key."""
  deleteEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryByRowIdInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `EmissionCategory` using a unique key."""
  deleteEmissionCategoryBySwrsEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionCategoryBySwrsEmissionCategoryInput!
  ): DeleteEmissionCategoryPayload

  """Deletes a single `Facility` using its globally unique id."""
  deleteFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityInput!
  ): DeleteFacilityPayload

  """Deletes a single `Facility` using a unique key."""
  deleteFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFacilityByRowIdInput!
  ): DeleteFacilityPayload

  """Deletes a single `Fuel` using its globally unique id."""
  deleteFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelInput!
  ): DeleteFuelPayload

  """Deletes a single `Fuel` using a unique key."""
  deleteFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelByRowIdInput!
  ): DeleteFuelPayload

  """Deletes a single `FuelCarbonTaxDetail` using its globally unique id."""
  deleteFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelCarbonTaxDetailInput!
  ): DeleteFuelCarbonTaxDetailPayload

  """Deletes a single `FuelCarbonTaxDetail` using a unique key."""
  deleteFuelCarbonTaxDetailByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelCarbonTaxDetailByRowIdInput!
  ): DeleteFuelCarbonTaxDetailPayload

  """Deletes a single `FuelCharge` using its globally unique id."""
  deleteFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelChargeInput!
  ): DeleteFuelChargePayload

  """Deletes a single `FuelCharge` using a unique key."""
  deleteFuelChargeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelChargeByRowIdInput!
  ): DeleteFuelChargePayload

  """Deletes a single `FuelMapping` using its globally unique id."""
  deleteFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelMappingInput!
  ): DeleteFuelMappingPayload

  """Deletes a single `FuelMapping` using a unique key."""
  deleteFuelMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFuelMappingByRowIdInput!
  ): DeleteFuelMappingPayload

  """Deletes a single `GgircsUser` using its globally unique id."""
  deleteGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserInput!
  ): DeleteGgircsUserPayload

  """Deletes a single `GgircsUser` using a unique key."""
  deleteGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGgircsUserByRowIdInput!
  ): DeleteGgircsUserPayload

  """Deletes a single `Identifier` using its globally unique id."""
  deleteIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIdentifierInput!
  ): DeleteIdentifierPayload

  """Deletes a single `Identifier` using a unique key."""
  deleteIdentifierByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIdentifierByRowIdInput!
  ): DeleteIdentifierPayload

  """Deletes a single `ImpliedEmissionFactor` using its globally unique id."""
  deleteImpliedEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImpliedEmissionFactorInput!
  ): DeleteImpliedEmissionFactorPayload

  """Deletes a single `ImpliedEmissionFactor` using a unique key."""
  deleteImpliedEmissionFactorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImpliedEmissionFactorByRowIdInput!
  ): DeleteImpliedEmissionFactorPayload

  """
  Deletes a single `MeasuredEmissionFactor` using its globally unique id.
  """
  deleteMeasuredEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMeasuredEmissionFactorInput!
  ): DeleteMeasuredEmissionFactorPayload

  """Deletes a single `MeasuredEmissionFactor` using a unique key."""
  deleteMeasuredEmissionFactorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMeasuredEmissionFactorByRowIdInput!
  ): DeleteMeasuredEmissionFactorPayload

  """Deletes a single `Naic` using its globally unique id."""
  deleteNaic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicInput!
  ): DeleteNaicPayload

  """Deletes a single `Naic` using a unique key."""
  deleteNaicByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicByRowIdInput!
  ): DeleteNaicPayload

  """Deletes a single `NaicsCategory` using its globally unique id."""
  deleteNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryInput!
  ): DeleteNaicsCategoryPayload

  """Deletes a single `NaicsCategory` using a unique key."""
  deleteNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryByRowIdInput!
  ): DeleteNaicsCategoryPayload

  """Deletes a single `NaicsCategoryType` using its globally unique id."""
  deleteNaicsCategoryType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryTypeInput!
  ): DeleteNaicsCategoryTypePayload

  """Deletes a single `NaicsCategoryType` using a unique key."""
  deleteNaicsCategoryTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsCategoryTypeByRowIdInput!
  ): DeleteNaicsCategoryTypePayload

  """Deletes a single `NaicsMapping` using its globally unique id."""
  deleteNaicsMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsMappingInput!
  ): DeleteNaicsMappingPayload

  """Deletes a single `NaicsMapping` using a unique key."""
  deleteNaicsMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsMappingByRowIdInput!
  ): DeleteNaicsMappingPayload

  """Deletes a single `NaicsNaicsCategory` using its globally unique id."""
  deleteNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsNaicsCategoryInput!
  ): DeleteNaicsNaicsCategoryPayload

  """Deletes a single `NaicsNaicsCategory` using a unique key."""
  deleteNaicsNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNaicsNaicsCategoryByRowIdInput!
  ): DeleteNaicsNaicsCategoryPayload

  """Deletes a single `Organisation` using its globally unique id."""
  deleteOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationInput!
  ): DeleteOrganisationPayload

  """
  Deletes a single `OrganisationBcRegistryId` using its globally unique id.
  """
  deleteOrganisationBcRegistryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationBcRegistryIdInput!
  ): DeleteOrganisationBcRegistryIdPayload

  """Deletes a single `OrganisationBcRegistryId` using a unique key."""
  deleteOrganisationBcRegistryIdBySwrsOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationBcRegistryIdBySwrsOrganisationIdInput!
  ): DeleteOrganisationBcRegistryIdPayload

  """Deletes a single `Organisation` using a unique key."""
  deleteOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationByRowIdInput!
  ): DeleteOrganisationPayload

  """Deletes a single `ParentOrganisation` using its globally unique id."""
  deleteParentOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentOrganisationInput!
  ): DeleteParentOrganisationPayload

  """Deletes a single `ParentOrganisation` using a unique key."""
  deleteParentOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentOrganisationByRowIdInput!
  ): DeleteParentOrganisationPayload

  """Deletes a single `Permit` using its globally unique id."""
  deletePermit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermitInput!
  ): DeletePermitPayload

  """Deletes a single `Permit` using a unique key."""
  deletePermitByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermitByRowIdInput!
  ): DeletePermitPayload

  """
  Deletes a single `TaxedVentingEmissionType` using its globally unique id.
  """
  deleteTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxedVentingEmissionTypeInput!
  ): DeleteTaxedVentingEmissionTypePayload

  """Deletes a single `TaxedVentingEmissionType` using a unique key."""
  deleteTaxedVentingEmissionTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaxedVentingEmissionTypeByRowIdInput!
  ): DeleteTaxedVentingEmissionTypePayload

  """Deletes a single `Unit` using its globally unique id."""
  deleteUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitInput!
  ): DeleteUnitPayload

  """Deletes a single `Unit` using a unique key."""
  deleteUnitByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitByRowIdInput!
  ): DeleteUnitPayload

  """
  Updates a single `AdditionalDatum` using its globally unique id and a patch.
  """
  updateAdditionalDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalDatumInput!
  ): UpdateAdditionalDatumPayload

  """Updates a single `AdditionalDatum` using a unique key and a patch."""
  updateAdditionalDatumByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalDatumByRowIdInput!
  ): UpdateAdditionalDatumPayload

  """Updates a single `Address` using its globally unique id and a patch."""
  updateAddress(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAddressInput!
  ): UpdateAddressPayload

  """Updates a single `Address` using a unique key and a patch."""
  updateAddressByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAddressByRowIdInput!
  ): UpdateAddressPayload

  """
  Updates a single `CarbonTaxActFuelType` using its globally unique id and a patch.
  """
  updateCarbonTaxActFuelType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxActFuelTypeInput!
  ): UpdateCarbonTaxActFuelTypePayload

  """
  Updates a single `CarbonTaxActFuelType` using a unique key and a patch.
  """
  updateCarbonTaxActFuelTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxActFuelTypeByRowIdInput!
  ): UpdateCarbonTaxActFuelTypePayload

  """
  Updates a single `CarbonTaxRateMapping` using its globally unique id and a patch.
  """
  updateCarbonTaxRateMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxRateMappingInput!
  ): UpdateCarbonTaxRateMappingPayload

  """
  Updates a single `CarbonTaxRateMapping` using a unique key and a patch.
  """
  updateCarbonTaxRateMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarbonTaxRateMappingByRowIdInput!
  ): UpdateCarbonTaxRateMappingPayload

  """Updates a single `Contact` using its globally unique id and a patch."""
  updateContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactInput!
  ): UpdateContactPayload

  """Updates a single `Contact` using a unique key and a patch."""
  updateContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactByRowIdInput!
  ): UpdateContactPayload

  """
  Updates a single `EcccAttachment` using its globally unique id and a patch.
  """
  updateEcccAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccAttachmentInput!
  ): UpdateEcccAttachmentPayload

  """Updates a single `EcccAttachment` using a unique key and a patch."""
  updateEcccAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccAttachmentByRowIdInput!
  ): UpdateEcccAttachmentPayload

  """
  Updates a single `EcccFileDownloadLog` using its globally unique id and a patch.
  """
  updateEcccFileDownloadLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogInput!
  ): UpdateEcccFileDownloadLogPayload

  """Updates a single `EcccFileDownloadLog` using a unique key and a patch."""
  updateEcccFileDownloadLogByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEcccFileDownloadLogByRowIdInput!
  ): UpdateEcccFileDownloadLogPayload

  """Updates a single `Emission` using its globally unique id and a patch."""
  updateEmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionInput!
  ): UpdateEmissionPayload

  """Updates a single `Emission` using a unique key and a patch."""
  updateEmissionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionByRowIdInput!
  ): UpdateEmissionPayload

  """
  Updates a single `EmissionCategory` using its globally unique id and a patch.
  """
  updateEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `EmissionCategory` using a unique key and a patch."""
  updateEmissionCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryByRowIdInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `EmissionCategory` using a unique key and a patch."""
  updateEmissionCategoryBySwrsEmissionCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionCategoryBySwrsEmissionCategoryInput!
  ): UpdateEmissionCategoryPayload

  """Updates a single `Facility` using its globally unique id and a patch."""
  updateFacility(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityInput!
  ): UpdateFacilityPayload

  """Updates a single `Facility` using a unique key and a patch."""
  updateFacilityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFacilityByRowIdInput!
  ): UpdateFacilityPayload

  """Updates a single `Fuel` using its globally unique id and a patch."""
  updateFuel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelInput!
  ): UpdateFuelPayload

  """Updates a single `Fuel` using a unique key and a patch."""
  updateFuelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelByRowIdInput!
  ): UpdateFuelPayload

  """
  Updates a single `FuelCarbonTaxDetail` using its globally unique id and a patch.
  """
  updateFuelCarbonTaxDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelCarbonTaxDetailInput!
  ): UpdateFuelCarbonTaxDetailPayload

  """Updates a single `FuelCarbonTaxDetail` using a unique key and a patch."""
  updateFuelCarbonTaxDetailByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelCarbonTaxDetailByRowIdInput!
  ): UpdateFuelCarbonTaxDetailPayload

  """
  Updates a single `FuelCharge` using its globally unique id and a patch.
  """
  updateFuelCharge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelChargeInput!
  ): UpdateFuelChargePayload

  """Updates a single `FuelCharge` using a unique key and a patch."""
  updateFuelChargeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelChargeByRowIdInput!
  ): UpdateFuelChargePayload

  """
  Updates a single `FuelMapping` using its globally unique id and a patch.
  """
  updateFuelMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelMappingInput!
  ): UpdateFuelMappingPayload

  """Updates a single `FuelMapping` using a unique key and a patch."""
  updateFuelMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFuelMappingByRowIdInput!
  ): UpdateFuelMappingPayload

  """
  Updates a single `GgircsUser` using its globally unique id and a patch.
  """
  updateGgircsUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserInput!
  ): UpdateGgircsUserPayload

  """Updates a single `GgircsUser` using a unique key and a patch."""
  updateGgircsUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGgircsUserByRowIdInput!
  ): UpdateGgircsUserPayload

  """
  Updates a single `Identifier` using its globally unique id and a patch.
  """
  updateIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIdentifierInput!
  ): UpdateIdentifierPayload

  """Updates a single `Identifier` using a unique key and a patch."""
  updateIdentifierByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIdentifierByRowIdInput!
  ): UpdateIdentifierPayload

  """
  Updates a single `ImpliedEmissionFactor` using its globally unique id and a patch.
  """
  updateImpliedEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImpliedEmissionFactorInput!
  ): UpdateImpliedEmissionFactorPayload

  """
  Updates a single `ImpliedEmissionFactor` using a unique key and a patch.
  """
  updateImpliedEmissionFactorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImpliedEmissionFactorByRowIdInput!
  ): UpdateImpliedEmissionFactorPayload

  """
  Updates a single `MeasuredEmissionFactor` using its globally unique id and a patch.
  """
  updateMeasuredEmissionFactor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMeasuredEmissionFactorInput!
  ): UpdateMeasuredEmissionFactorPayload

  """
  Updates a single `MeasuredEmissionFactor` using a unique key and a patch.
  """
  updateMeasuredEmissionFactorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMeasuredEmissionFactorByRowIdInput!
  ): UpdateMeasuredEmissionFactorPayload

  """Updates a single `Naic` using its globally unique id and a patch."""
  updateNaic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicInput!
  ): UpdateNaicPayload

  """Updates a single `Naic` using a unique key and a patch."""
  updateNaicByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicByRowIdInput!
  ): UpdateNaicPayload

  """
  Updates a single `NaicsCategory` using its globally unique id and a patch.
  """
  updateNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryInput!
  ): UpdateNaicsCategoryPayload

  """Updates a single `NaicsCategory` using a unique key and a patch."""
  updateNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryByRowIdInput!
  ): UpdateNaicsCategoryPayload

  """
  Updates a single `NaicsCategoryType` using its globally unique id and a patch.
  """
  updateNaicsCategoryType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryTypeInput!
  ): UpdateNaicsCategoryTypePayload

  """Updates a single `NaicsCategoryType` using a unique key and a patch."""
  updateNaicsCategoryTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsCategoryTypeByRowIdInput!
  ): UpdateNaicsCategoryTypePayload

  """
  Updates a single `NaicsMapping` using its globally unique id and a patch.
  """
  updateNaicsMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsMappingInput!
  ): UpdateNaicsMappingPayload

  """Updates a single `NaicsMapping` using a unique key and a patch."""
  updateNaicsMappingByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsMappingByRowIdInput!
  ): UpdateNaicsMappingPayload

  """
  Updates a single `NaicsNaicsCategory` using its globally unique id and a patch.
  """
  updateNaicsNaicsCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsNaicsCategoryInput!
  ): UpdateNaicsNaicsCategoryPayload

  """Updates a single `NaicsNaicsCategory` using a unique key and a patch."""
  updateNaicsNaicsCategoryByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNaicsNaicsCategoryByRowIdInput!
  ): UpdateNaicsNaicsCategoryPayload

  """
  Updates a single `Organisation` using its globally unique id and a patch.
  """
  updateOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationInput!
  ): UpdateOrganisationPayload

  """
  Updates a single `OrganisationBcRegistryId` using its globally unique id and a patch.
  """
  updateOrganisationBcRegistryId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationBcRegistryIdInput!
  ): UpdateOrganisationBcRegistryIdPayload

  """
  Updates a single `OrganisationBcRegistryId` using a unique key and a patch.
  """
  updateOrganisationBcRegistryIdBySwrsOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationBcRegistryIdBySwrsOrganisationIdInput!
  ): UpdateOrganisationBcRegistryIdPayload

  """Updates a single `Organisation` using a unique key and a patch."""
  updateOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationByRowIdInput!
  ): UpdateOrganisationPayload

  """
  Updates a single `ParentOrganisation` using its globally unique id and a patch.
  """
  updateParentOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentOrganisationInput!
  ): UpdateParentOrganisationPayload

  """Updates a single `ParentOrganisation` using a unique key and a patch."""
  updateParentOrganisationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentOrganisationByRowIdInput!
  ): UpdateParentOrganisationPayload

  """Updates a single `Permit` using its globally unique id and a patch."""
  updatePermit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermitInput!
  ): UpdatePermitPayload

  """Updates a single `Permit` using a unique key and a patch."""
  updatePermitByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermitByRowIdInput!
  ): UpdatePermitPayload

  """
  Updates a single `TaxedVentingEmissionType` using its globally unique id and a patch.
  """
  updateTaxedVentingEmissionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxedVentingEmissionTypeInput!
  ): UpdateTaxedVentingEmissionTypePayload

  """
  Updates a single `TaxedVentingEmissionType` using a unique key and a patch.
  """
  updateTaxedVentingEmissionTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaxedVentingEmissionTypeByRowIdInput!
  ): UpdateTaxedVentingEmissionTypePayload

  """Updates a single `Unit` using its globally unique id and a patch."""
  updateUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitInput!
  ): UpdateUnitPayload

  """Updates a single `Unit` using a unique key and a patch."""
  updateUnitByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitByRowIdInput!
  ): UpdateUnitPayload
}

type Naic implements Node {
  """The foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByEmissionNaicsIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicFacilitiesByEmissionNaicsIdAndFacilityIdManyToManyConnection!

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByFacilityId: Facility

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByRegistrationDataFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByEmissionNaicsIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicFuelMappingsByEmissionNaicsIdAndFuelMappingIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByEmissionNaicsIdAndFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicFuelsByEmissionNaicsIdAndFuelIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The naics classification"""
  naicsClassification: String

  """The naics code"""
  naicsCode: Int

  """The naics priority"""
  naicsPriority: String

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByEmissionNaicsIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicOrganisationsByEmissionNaicsIdAndOrganisationIdManyToManyConnection!

  """
  The ancestor context from which this naics code was selected (from VerifyTombstone or RegistrationData)
  """
  pathContext: String

  """
  A foreign key reference to swrs.facility where naics path context = RegistrationData
  """
  registrationDataFacilityId: Int

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The reporting facility swrs id, fk to swrs.facility"""
  swrsFacilityId: Int

  """Reads and enables pagination through a set of `Unit`."""
  unitsByEmissionNaicsIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicUnitsByEmissionNaicsIdAndUnitIdManyToManyConnection!
}

"""
A condition to be used against `Naic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NaicCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `naicsPriority` field."""
  naicsPriority: String

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """
  Checks for equality with the object’s `registrationDataFacilityId` field.
  """
  registrationDataFacilityId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int
}

"""
A connection to a list of `Facility` values, with data from `Emission`.
"""
type NaicFacilitiesByEmissionNaicsIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [NaicFacilitiesByEmissionNaicsIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Emission`."""
type NaicFacilitiesByEmissionNaicsIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Naic` object types. All fields are combined with a logical ‘and.’
"""
input NaicFilter {
  """Checks for all expressions in this list."""
  and: [NaicFilter!]

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionsByNaicsId` relation."""
  emissionsByNaicsId: NaicToManyEmissionFilter

  """Some related `emissionsByNaicsId` exist."""
  emissionsByNaicsIdExist: Boolean

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """
  Filter by the object’s `facilityByRegistrationDataFacilityId` relation.
  """
  facilityByRegistrationDataFacilityId: FacilityFilter

  """A related `facilityByRegistrationDataFacilityId` exists."""
  facilityByRegistrationDataFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `naicsClassification` field."""
  naicsClassification: StringFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Filter by the object’s `naicsPriority` field."""
  naicsPriority: StringFilter

  """Negates the expression."""
  not: NaicFilter

  """Checks for any expressions in this list."""
  or: [NaicFilter!]

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `registrationDataFacilityId` field."""
  registrationDataFacilityId: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter
}

"""
A connection to a list of `FuelMapping` values, with data from `Emission`.
"""
type NaicFuelMappingsByEmissionNaicsIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [NaicFuelMappingsByEmissionNaicsIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Emission`."""
type NaicFuelMappingsByEmissionNaicsIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""A connection to a list of `Fuel` values, with data from `Emission`."""
type NaicFuelsByEmissionNaicsIdAndFuelIdManyToManyConnection {
  """
  A list of edges which contains the `Fuel`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [NaicFuelsByEmissionNaicsIdAndFuelIdManyToManyEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection, with data from `Emission`."""
type NaicFuelsByEmissionNaicsIdAndFuelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""An input for mutations affecting `Naic`"""
input NaicInput {
  """The foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The naics classification"""
  naicsClassification: String

  """The naics code"""
  naicsCode: Int

  """The naics priority"""
  naicsPriority: String

  """
  The ancestor context from which this naics code was selected (from VerifyTombstone or RegistrationData)
  """
  pathContext: String

  """
  A foreign key reference to swrs.facility where naics path context = RegistrationData
  """
  registrationDataFacilityId: Int

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The reporting facility swrs id, fk to swrs.facility"""
  swrsFacilityId: Int
}

"""
A connection to a list of `Organisation` values, with data from `Emission`.
"""
type NaicOrganisationsByEmissionNaicsIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [NaicOrganisationsByEmissionNaicsIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Emission`."""
type NaicOrganisationsByEmissionNaicsIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Represents an update to a `Naic`. Fields that are set will be updated."""
input NaicPatch {
  """The foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The naics classification"""
  naicsClassification: String

  """The naics code"""
  naicsCode: Int

  """The naics priority"""
  naicsPriority: String

  """
  The ancestor context from which this naics code was selected (from VerifyTombstone or RegistrationData)
  """
  pathContext: String

  """
  A foreign key reference to swrs.facility where naics path context = RegistrationData
  """
  registrationDataFacilityId: Int

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The reporting facility swrs id, fk to swrs.facility"""
  swrsFacilityId: Int
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input NaicToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""A connection to a list of `Unit` values, with data from `Emission`."""
type NaicUnitsByEmissionNaicsIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [NaicUnitsByEmissionNaicsIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Emission`."""
type NaicUnitsByEmissionNaicsIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A connection to a list of `NaicsCategory` values."""
type NaicsCategoriesConnection {
  """
  A list of edges which contains the `NaicsCategory` and cursor to aid in pagination.
  """
  edges: [NaicsCategoriesEdge!]!

  """A list of `NaicsCategory` objects."""
  nodes: [NaicsCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NaicsCategory` you could get from the connection."""
  totalCount: Int!
}

"""A `NaicsCategory` edge in the connection."""
type NaicsCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsCategory` at the end of the edge."""
  node: NaicsCategory
}

"""Methods to use when ordering `NaicsCategory`."""
enum NaicsCategoriesOrderBy {
  ID_ASC
  ID_DESC
  NAICS_CATEGORY_ASC
  NAICS_CATEGORY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NaicsCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The naics category"""
  naicsCategory: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsCategoryCondition {
  """Checks for equality with the object’s `naicsCategory` field."""
  naicsCategory: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsCategory` object types. All fields are combined with a logical ‘and.’
"""
input NaicsCategoryFilter {
  """Checks for all expressions in this list."""
  and: [NaicsCategoryFilter!]

  """Filter by the object’s `naicsCategory` field."""
  naicsCategory: StringFilter

  """Negates the expression."""
  not: NaicsCategoryFilter

  """Checks for any expressions in this list."""
  or: [NaicsCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsCategory`"""
input NaicsCategoryInput {
  """The naics category"""
  naicsCategory: String
}

type NaicsCategoryMapping {
  facilityId: Int
  naicsCategory: String
  naicsCategoryId: Int
  naicsCategoryType: String
  naicsCategoryTypeId: Int
  naicsCode: Int
  reportId: Int
}

"""
A condition to be used against `NaicsCategoryMapping` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input NaicsCategoryMappingCondition {
  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `naicsCategory` field."""
  naicsCategory: String

  """Checks for equality with the object’s `naicsCategoryId` field."""
  naicsCategoryId: Int

  """Checks for equality with the object’s `naicsCategoryType` field."""
  naicsCategoryType: String

  """Checks for equality with the object’s `naicsCategoryTypeId` field."""
  naicsCategoryTypeId: Int

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int
}

"""
A filter to be used against `NaicsCategoryMapping` object types. All fields are combined with a logical ‘and.’
"""
input NaicsCategoryMappingFilter {
  """Checks for all expressions in this list."""
  and: [NaicsCategoryMappingFilter!]

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `naicsCategory` field."""
  naicsCategory: StringFilter

  """Filter by the object’s `naicsCategoryId` field."""
  naicsCategoryId: IntFilter

  """Filter by the object’s `naicsCategoryType` field."""
  naicsCategoryType: StringFilter

  """Filter by the object’s `naicsCategoryTypeId` field."""
  naicsCategoryTypeId: IntFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Negates the expression."""
  not: NaicsCategoryMappingFilter

  """Checks for any expressions in this list."""
  or: [NaicsCategoryMappingFilter!]

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter
}

"""A connection to a list of `NaicsCategoryMapping` values."""
type NaicsCategoryMappingsConnection {
  """
  A list of edges which contains the `NaicsCategoryMapping` and cursor to aid in pagination.
  """
  edges: [NaicsCategoryMappingsEdge!]!

  """A list of `NaicsCategoryMapping` objects."""
  nodes: [NaicsCategoryMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NaicsCategoryMapping` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NaicsCategoryMapping` edge in the connection."""
type NaicsCategoryMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsCategoryMapping` at the end of the edge."""
  node: NaicsCategoryMapping
}

"""Methods to use when ordering `NaicsCategoryMapping`."""
enum NaicsCategoryMappingsOrderBy {
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  NAICS_CATEGORY_ASC
  NAICS_CATEGORY_DESC
  NAICS_CATEGORY_ID_ASC
  NAICS_CATEGORY_ID_DESC
  NAICS_CATEGORY_TYPE_ASC
  NAICS_CATEGORY_TYPE_DESC
  NAICS_CATEGORY_TYPE_ID_ASC
  NAICS_CATEGORY_TYPE_ID_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  REPORT_ID_ASC
  REPORT_ID_DESC
}

"""
Represents an update to a `NaicsCategory`. Fields that are set will be updated.
"""
input NaicsCategoryPatch {
  """The naics category"""
  naicsCategory: String
}

type NaicsCategoryType implements Node {
  """The description of the category type"""
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The naics category type"""
  naicsCategoryType: String

  """The internal primary key for the type mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsCategoryType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsCategoryTypeCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `naicsCategoryType` field."""
  naicsCategoryType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsCategoryType` object types. All fields are combined with a logical ‘and.’
"""
input NaicsCategoryTypeFilter {
  """Checks for all expressions in this list."""
  and: [NaicsCategoryTypeFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `naicsCategoryType` field."""
  naicsCategoryType: StringFilter

  """Negates the expression."""
  not: NaicsCategoryTypeFilter

  """Checks for any expressions in this list."""
  or: [NaicsCategoryTypeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsCategoryType`"""
input NaicsCategoryTypeInput {
  """The description of the category type"""
  description: String

  """The naics category type"""
  naicsCategoryType: String
}

"""
Represents an update to a `NaicsCategoryType`. Fields that are set will be updated.
"""
input NaicsCategoryTypePatch {
  """The description of the category type"""
  description: String

  """The naics category type"""
  naicsCategoryType: String
}

"""A connection to a list of `NaicsCategoryType` values."""
type NaicsCategoryTypesConnection {
  """
  A list of edges which contains the `NaicsCategoryType` and cursor to aid in pagination.
  """
  edges: [NaicsCategoryTypesEdge!]!

  """A list of `NaicsCategoryType` objects."""
  nodes: [NaicsCategoryType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NaicsCategoryType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NaicsCategoryType` edge in the connection."""
type NaicsCategoryTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsCategoryType` at the end of the edge."""
  node: NaicsCategoryType
}

"""Methods to use when ordering `NaicsCategoryType`."""
enum NaicsCategoryTypesOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAICS_CATEGORY_TYPE_ASC
  NAICS_CATEGORY_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Naic` values."""
type NaicsConnection {
  """
  A list of edges which contains the `Naic` and cursor to aid in pagination.
  """
  edges: [NaicsEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection."""
type NaicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Naic` at the end of the edge."""
  node: Naic
}

type NaicsMapping implements Node {
  """The higher level (hhw) category definition"""
  hhwCategory: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The lower level irc category definition"""
  ircCategory: String

  """The naics code"""
  naicsCode: Int

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsMapping` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsMappingCondition {
  """Checks for equality with the object’s `hhwCategory` field."""
  hhwCategory: String

  """Checks for equality with the object’s `ircCategory` field."""
  ircCategory: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsMapping` object types. All fields are combined with a logical ‘and.’
"""
input NaicsMappingFilter {
  """Checks for all expressions in this list."""
  and: [NaicsMappingFilter!]

  """Filter by the object’s `hhwCategory` field."""
  hhwCategory: StringFilter

  """Filter by the object’s `ircCategory` field."""
  ircCategory: StringFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Negates the expression."""
  not: NaicsMappingFilter

  """Checks for any expressions in this list."""
  or: [NaicsMappingFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsMapping`"""
input NaicsMappingInput {
  """The higher level (hhw) category definition"""
  hhwCategory: String

  """The lower level irc category definition"""
  ircCategory: String

  """The naics code"""
  naicsCode: Int
}

"""
Represents an update to a `NaicsMapping`. Fields that are set will be updated.
"""
input NaicsMappingPatch {
  """The higher level (hhw) category definition"""
  hhwCategory: String

  """The lower level irc category definition"""
  ircCategory: String

  """The naics code"""
  naicsCode: Int
}

"""A connection to a list of `NaicsMapping` values."""
type NaicsMappingsConnection {
  """
  A list of edges which contains the `NaicsMapping` and cursor to aid in pagination.
  """
  edges: [NaicsMappingsEdge!]!

  """A list of `NaicsMapping` objects."""
  nodes: [NaicsMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NaicsMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `NaicsMapping` edge in the connection."""
type NaicsMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsMapping` at the end of the edge."""
  node: NaicsMapping
}

"""Methods to use when ordering `NaicsMapping`."""
enum NaicsMappingsOrderBy {
  HHW_CATEGORY_ASC
  HHW_CATEGORY_DESC
  ID_ASC
  ID_DESC
  IRC_CATEGORY_ASC
  IRC_CATEGORY_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `NaicsNaicsCategory` values."""
type NaicsNaicsCategoriesConnection {
  """
  A list of edges which contains the `NaicsNaicsCategory` and cursor to aid in pagination.
  """
  edges: [NaicsNaicsCategoriesEdge!]!

  """A list of `NaicsNaicsCategory` objects."""
  nodes: [NaicsNaicsCategory]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NaicsNaicsCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NaicsNaicsCategory` edge in the connection."""
type NaicsNaicsCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NaicsNaicsCategory` at the end of the edge."""
  node: NaicsNaicsCategory
}

"""Methods to use when ordering `NaicsNaicsCategory`."""
enum NaicsNaicsCategoriesOrderBy {
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  CATEGORY_TYPE_ID_ASC
  CATEGORY_TYPE_ID_DESC
  ID_ASC
  ID_DESC
  NAICS_CODE_PATTERN_ASC
  NAICS_CODE_PATTERN_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NaicsNaicsCategory implements Node {
  """The foreign key for the category"""
  categoryId: Int

  """The foreign key for the category type"""
  categoryTypeId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The naics code pattern"""
  naicsCodePattern: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""
A condition to be used against `NaicsNaicsCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NaicsNaicsCategoryCondition {
  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `categoryTypeId` field."""
  categoryTypeId: Int

  """Checks for equality with the object’s `naicsCodePattern` field."""
  naicsCodePattern: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `NaicsNaicsCategory` object types. All fields are combined with a logical ‘and.’
"""
input NaicsNaicsCategoryFilter {
  """Checks for all expressions in this list."""
  and: [NaicsNaicsCategoryFilter!]

  """Filter by the object’s `categoryId` field."""
  categoryId: IntFilter

  """Filter by the object’s `categoryTypeId` field."""
  categoryTypeId: IntFilter

  """Filter by the object’s `naicsCodePattern` field."""
  naicsCodePattern: StringFilter

  """Negates the expression."""
  not: NaicsNaicsCategoryFilter

  """Checks for any expressions in this list."""
  or: [NaicsNaicsCategoryFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `NaicsNaicsCategory`"""
input NaicsNaicsCategoryInput {
  """The foreign key for the category"""
  categoryId: Int

  """The foreign key for the category type"""
  categoryTypeId: Int

  """The naics code pattern"""
  naicsCodePattern: String
}

"""
Represents an update to a `NaicsNaicsCategory`. Fields that are set will be updated.
"""
input NaicsNaicsCategoryPatch {
  """The foreign key for the category"""
  categoryId: Int

  """The foreign key for the category type"""
  categoryTypeId: Int

  """The naics code pattern"""
  naicsCodePattern: String
}

"""Methods to use when ordering `Naic`."""
enum NaicsOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  ID_ASC
  ID_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NAICS_PRIORITY_ASC
  NAICS_PRIORITY_DESC
  NATURAL
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_DATA_FACILITY_ID_ASC
  REGISTRATION_DATA_FACILITY_ID_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

type Organisation implements Node {
  """Reads and enables pagination through a set of `Address`."""
  addressesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """The legal business name of the reporting organisation"""
  businessLegalName: String

  """The organisation business number according to cra"""
  craBusinessNumber: String

  """The organisation duns number"""
  duns: String

  """The internal reference to the file imported from ghgr"""
  ecccXmlFileId: Int

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The trade name in english"""
  englishTradeName: String

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByAddressOrganisationIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationFacilitiesByAddressOrganisationIdAndFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByEmissionOrganisationIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationFacilitiesByEmissionOrganisationIdAndFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByFacilityOrganisationIdAndParentFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationFacilitiesByFacilityOrganisationIdAndParentFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """The trade name in french"""
  frenchTradeName: String

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByEmissionOrganisationIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationFuelMappingsByEmissionOrganisationIdAndFuelMappingIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByEmissionOrganisationIdAndFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationFuelsByEmissionOrganisationIdAndFuelIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByEmissionOrganisationIdAndNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationNaicsByEmissionOrganisationIdAndNaicsIdManyToManyConnection!

  """Reads and enables pagination through a set of `ParentOrganisation`."""
  parentOrganisationsByAddressOrganisationIdAndParentOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ParentOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationParentOrganisationsByAddressOrganisationIdAndParentOrganisationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ParentOrganisation`."""
  parentOrganisationsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ParentOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationsConnection!

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The reporting organisation swrs id"""
  swrsOrganisationId: Int

  """Reads and enables pagination through a set of `Unit`."""
  unitsByEmissionOrganisationIdAndUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationUnitsByEmissionOrganisationIdAndUnitIdManyToManyConnection!

  """The organisation website address"""
  website: String
}

type OrganisationBcRegistryId implements Node {
  """The BC Registry ID of the organisation"""
  bcRegistryId: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The SWRS ID of the organisation"""
  swrsOrganisationId: Int!
}

"""
A condition to be used against `OrganisationBcRegistryId` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input OrganisationBcRegistryIdCondition {
  """Checks for equality with the object’s `bcRegistryId` field."""
  bcRegistryId: String

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int
}

"""
A filter to be used against `OrganisationBcRegistryId` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationBcRegistryIdFilter {
  """Checks for all expressions in this list."""
  and: [OrganisationBcRegistryIdFilter!]

  """Filter by the object’s `bcRegistryId` field."""
  bcRegistryId: StringFilter

  """Negates the expression."""
  not: OrganisationBcRegistryIdFilter

  """Checks for any expressions in this list."""
  or: [OrganisationBcRegistryIdFilter!]

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter
}

"""An input for mutations affecting `OrganisationBcRegistryId`"""
input OrganisationBcRegistryIdInput {
  """The BC Registry ID of the organisation"""
  bcRegistryId: String!

  """The SWRS ID of the organisation"""
  swrsOrganisationId: Int!
}

"""
Represents an update to a `OrganisationBcRegistryId`. Fields that are set will be updated.
"""
input OrganisationBcRegistryIdPatch {
  """The BC Registry ID of the organisation"""
  bcRegistryId: String

  """The SWRS ID of the organisation"""
  swrsOrganisationId: Int
}

"""A connection to a list of `OrganisationBcRegistryId` values."""
type OrganisationBcRegistryIdsConnection {
  """
  A list of edges which contains the `OrganisationBcRegistryId` and cursor to aid in pagination.
  """
  edges: [OrganisationBcRegistryIdsEdge!]!

  """A list of `OrganisationBcRegistryId` objects."""
  nodes: [OrganisationBcRegistryId]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganisationBcRegistryId` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganisationBcRegistryId` edge in the connection."""
type OrganisationBcRegistryIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganisationBcRegistryId` at the end of the edge."""
  node: OrganisationBcRegistryId
}

"""Methods to use when ordering `OrganisationBcRegistryId`."""
enum OrganisationBcRegistryIdsOrderBy {
  BC_REGISTRY_ID_ASC
  BC_REGISTRY_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
}

"""
A condition to be used against `Organisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganisationCondition {
  """Checks for equality with the object’s `businessLegalName` field."""
  businessLegalName: String

  """Checks for equality with the object’s `craBusinessNumber` field."""
  craBusinessNumber: String

  """Checks for equality with the object’s `duns` field."""
  duns: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `englishTradeName` field."""
  englishTradeName: String

  """Checks for equality with the object’s `frenchTradeName` field."""
  frenchTradeName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `website` field."""
  website: String
}

"""A connection to a list of `Facility` values, with data from `Address`."""
type OrganisationFacilitiesByAddressOrganisationIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [OrganisationFacilitiesByAddressOrganisationIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Address`."""
type OrganisationFacilitiesByAddressOrganisationIdAndFacilityIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A connection to a list of `Facility` values, with data from `Emission`.
"""
type OrganisationFacilitiesByEmissionOrganisationIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [OrganisationFacilitiesByEmissionOrganisationIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Emission`."""
type OrganisationFacilitiesByEmissionOrganisationIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A connection to a list of `Facility` values, with data from `Facility`.
"""
type OrganisationFacilitiesByFacilityOrganisationIdAndParentFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Facility`, and the cursor to aid in pagination.
  """
  edges: [OrganisationFacilitiesByFacilityOrganisationIdAndParentFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Facility`."""
type OrganisationFacilitiesByFacilityOrganisationIdAndParentFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByParentFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Organisation` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationFilter {
  """Filter by the object’s `addressesByOrganisationId` relation."""
  addressesByOrganisationId: OrganisationToManyAddressFilter

  """Some related `addressesByOrganisationId` exist."""
  addressesByOrganisationIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [OrganisationFilter!]

  """Filter by the object’s `businessLegalName` field."""
  businessLegalName: StringFilter

  """Filter by the object’s `craBusinessNumber` field."""
  craBusinessNumber: StringFilter

  """Filter by the object’s `duns` field."""
  duns: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionsByOrganisationId` relation."""
  emissionsByOrganisationId: OrganisationToManyEmissionFilter

  """Some related `emissionsByOrganisationId` exist."""
  emissionsByOrganisationIdExist: Boolean

  """Filter by the object’s `englishTradeName` field."""
  englishTradeName: StringFilter

  """Filter by the object’s `facilitiesByOrganisationId` relation."""
  facilitiesByOrganisationId: OrganisationToManyFacilityFilter

  """Some related `facilitiesByOrganisationId` exist."""
  facilitiesByOrganisationIdExist: Boolean

  """Filter by the object’s `frenchTradeName` field."""
  frenchTradeName: StringFilter

  """Negates the expression."""
  not: OrganisationFilter

  """Checks for any expressions in this list."""
  or: [OrganisationFilter!]

  """Filter by the object’s `parentOrganisationsByOrganisationId` relation."""
  parentOrganisationsByOrganisationId: OrganisationToManyParentOrganisationFilter

  """Some related `parentOrganisationsByOrganisationId` exist."""
  parentOrganisationsByOrganisationIdExist: Boolean

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `website` field."""
  website: StringFilter
}

"""
A connection to a list of `FuelMapping` values, with data from `Emission`.
"""
type OrganisationFuelMappingsByEmissionOrganisationIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [OrganisationFuelMappingsByEmissionOrganisationIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Emission`."""
type OrganisationFuelMappingsByEmissionOrganisationIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""A connection to a list of `Fuel` values, with data from `Emission`."""
type OrganisationFuelsByEmissionOrganisationIdAndFuelIdManyToManyConnection {
  """
  A list of edges which contains the `Fuel`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [OrganisationFuelsByEmissionOrganisationIdAndFuelIdManyToManyEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection, with data from `Emission`."""
type OrganisationFuelsByEmissionOrganisationIdAndFuelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""An input for mutations affecting `Organisation`"""
input OrganisationInput {
  """The legal business name of the reporting organisation"""
  businessLegalName: String

  """The organisation business number according to cra"""
  craBusinessNumber: String

  """The organisation duns number"""
  duns: String

  """The internal reference to the file imported from ghgr"""
  ecccXmlFileId: Int

  """The trade name in english"""
  englishTradeName: String

  """The trade name in french"""
  frenchTradeName: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The reporting organisation swrs id"""
  swrsOrganisationId: Int

  """The organisation website address"""
  website: String
}

"""A connection to a list of `Naic` values, with data from `Emission`."""
type OrganisationNaicsByEmissionOrganisationIdAndNaicsIdManyToManyConnection {
  """
  A list of edges which contains the `Naic`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [OrganisationNaicsByEmissionOrganisationIdAndNaicsIdManyToManyEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection, with data from `Emission`."""
type OrganisationNaicsByEmissionOrganisationIdAndNaicsIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Naic` at the end of the edge."""
  node: Naic
}

"""
A connection to a list of `ParentOrganisation` values, with data from `Address`.
"""
type OrganisationParentOrganisationsByAddressOrganisationIdAndParentOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `ParentOrganisation`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [OrganisationParentOrganisationsByAddressOrganisationIdAndParentOrganisationIdManyToManyEdge!]!

  """A list of `ParentOrganisation` objects."""
  nodes: [ParentOrganisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ParentOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ParentOrganisation` edge in the connection, with data from `Address`.
"""
type OrganisationParentOrganisationsByAddressOrganisationIdAndParentOrganisationIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByParentOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ParentOrganisation` at the end of the edge."""
  node: ParentOrganisation
}

"""
Represents an update to a `Organisation`. Fields that are set will be updated.
"""
input OrganisationPatch {
  """The legal business name of the reporting organisation"""
  businessLegalName: String

  """The organisation business number according to cra"""
  craBusinessNumber: String

  """The organisation duns number"""
  duns: String

  """The internal reference to the file imported from ghgr"""
  ecccXmlFileId: Int

  """The trade name in english"""
  englishTradeName: String

  """The trade name in french"""
  frenchTradeName: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The reporting organisation swrs id"""
  swrsOrganisationId: Int

  """The organisation website address"""
  website: String
}

"""
A filter to be used against many `Address` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyAddressFilter {
  """
  Every related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AddressFilter

  """
  No related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AddressFilter

  """
  Some related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AddressFilter
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""
A filter to be used against many `Facility` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyFacilityFilter {
  """
  Every related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FacilityFilter

  """
  No related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FacilityFilter

  """
  Some related `Facility` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FacilityFilter
}

"""
A filter to be used against many `ParentOrganisation` object types. All fields are combined with a logical ‘and.’
"""
input OrganisationToManyParentOrganisationFilter {
  """
  Every related `ParentOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ParentOrganisationFilter

  """
  No related `ParentOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ParentOrganisationFilter

  """
  Some related `ParentOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ParentOrganisationFilter
}

"""A connection to a list of `Unit` values, with data from `Emission`."""
type OrganisationUnitsByEmissionOrganisationIdAndUnitIdManyToManyConnection {
  """
  A list of edges which contains the `Unit`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [OrganisationUnitsByEmissionOrganisationIdAndUnitIdManyToManyEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection, with data from `Emission`."""
type OrganisationUnitsByEmissionOrganisationIdAndUnitIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A connection to a list of `Organisation` values."""
type OrganisationsConnection {
  """
  A list of edges which contains the `Organisation` and cursor to aid in pagination.
  """
  edges: [OrganisationsEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection."""
type OrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Methods to use when ordering `Organisation`."""
enum OrganisationsOrderBy {
  BUSINESS_LEGAL_NAME_ASC
  BUSINESS_LEGAL_NAME_DESC
  CRA_BUSINESS_NUMBER_ASC
  CRA_BUSINESS_NUMBER_DESC
  DUNS_ASC
  DUNS_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  ENGLISH_TRADE_NAME_ASC
  ENGLISH_TRADE_NAME_DESC
  FRENCH_TRADE_NAME_ASC
  FRENCH_TRADE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  WEBSITE_ASC
  WEBSITE_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type ParentOrganisation implements Node {
  """Reads and enables pagination through a set of `Address`."""
  addressesByParentOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """The legal busniess name of this parent organisation"""
  businessLegalName: String

  """The duns number for this parent organisation"""
  duns: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The english trade name of this parent organisation"""
  englishTradeName: String

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByAddressParentOrganisationIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationFacilitiesByAddressParentOrganisationIdAndFacilityIdManyToManyConnection!

  """The french trade name of this parent organisation"""
  frenchTradeName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `Organisation` that is related to this `ParentOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByAddressParentOrganisationIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationOrganisationsByAddressParentOrganisationIdAndOrganisationIdManyToManyConnection!

  """
  The path context used to reach the ParentOrganisation node (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The % owned by this parent organisation"""
  percentageOwned: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The website for this parent organisation"""
  website: String
}

"""
A condition to be used against `ParentOrganisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ParentOrganisationCondition {
  """Checks for equality with the object’s `businessLegalName` field."""
  businessLegalName: String

  """Checks for equality with the object’s `duns` field."""
  duns: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `englishTradeName` field."""
  englishTradeName: String

  """Checks for equality with the object’s `frenchTradeName` field."""
  frenchTradeName: String

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """Checks for equality with the object’s `percentageOwned` field."""
  percentageOwned: BigFloat

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `website` field."""
  website: String
}

"""A connection to a list of `Facility` values, with data from `Address`."""
type ParentOrganisationFacilitiesByAddressParentOrganisationIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [ParentOrganisationFacilitiesByAddressParentOrganisationIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Address`."""
type ParentOrganisationFacilitiesByAddressParentOrganisationIdAndFacilityIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `ParentOrganisation` object types. All fields are combined with a logical ‘and.’
"""
input ParentOrganisationFilter {
  """Filter by the object’s `addressesByParentOrganisationId` relation."""
  addressesByParentOrganisationId: ParentOrganisationToManyAddressFilter

  """Some related `addressesByParentOrganisationId` exist."""
  addressesByParentOrganisationIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [ParentOrganisationFilter!]

  """Filter by the object’s `businessLegalName` field."""
  businessLegalName: StringFilter

  """Filter by the object’s `duns` field."""
  duns: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `englishTradeName` field."""
  englishTradeName: StringFilter

  """Filter by the object’s `frenchTradeName` field."""
  frenchTradeName: StringFilter

  """Negates the expression."""
  not: ParentOrganisationFilter

  """Checks for any expressions in this list."""
  or: [ParentOrganisationFilter!]

  """Filter by the object’s `organisationByOrganisationId` relation."""
  organisationByOrganisationId: OrganisationFilter

  """A related `organisationByOrganisationId` exists."""
  organisationByOrganisationIdExists: Boolean

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `percentageOwned` field."""
  percentageOwned: BigFloatFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `website` field."""
  website: StringFilter
}

"""An input for mutations affecting `ParentOrganisation`"""
input ParentOrganisationInput {
  """The legal busniess name of this parent organisation"""
  businessLegalName: String

  """The duns number for this parent organisation"""
  duns: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The english trade name of this parent organisation"""
  englishTradeName: String

  """The french trade name of this parent organisation"""
  frenchTradeName: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """
  The path context used to reach the ParentOrganisation node (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The % owned by this parent organisation"""
  percentageOwned: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!

  """The website for this parent organisation"""
  website: String
}

"""
A connection to a list of `Organisation` values, with data from `Address`.
"""
type ParentOrganisationOrganisationsByAddressParentOrganisationIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Address`, and the cursor to aid in pagination.
  """
  edges: [ParentOrganisationOrganisationsByAddressParentOrganisationIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Address`."""
type ParentOrganisationOrganisationsByAddressParentOrganisationIdAndOrganisationIdManyToManyEdge {
  """Reads and enables pagination through a set of `Address`."""
  addressesByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""
Represents an update to a `ParentOrganisation`. Fields that are set will be updated.
"""
input ParentOrganisationPatch {
  """The legal busniess name of this parent organisation"""
  businessLegalName: String

  """The duns number for this parent organisation"""
  duns: String

  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """The english trade name of this parent organisation"""
  englishTradeName: String

  """The french trade name of this parent organisation"""
  frenchTradeName: String

  """A foreign key reference to swrs.organisation"""
  organisationId: Int

  """
  The path context used to reach the ParentOrganisation node (VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The % owned by this parent organisation"""
  percentageOwned: BigFloat

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int

  """The website for this parent organisation"""
  website: String
}

"""
A filter to be used against many `Address` object types. All fields are combined with a logical ‘and.’
"""
input ParentOrganisationToManyAddressFilter {
  """
  Every related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AddressFilter

  """
  No related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AddressFilter

  """
  Some related `Address` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AddressFilter
}

"""A connection to a list of `ParentOrganisation` values."""
type ParentOrganisationsConnection {
  """
  A list of edges which contains the `ParentOrganisation` and cursor to aid in pagination.
  """
  edges: [ParentOrganisationsEdge!]!

  """A list of `ParentOrganisation` objects."""
  nodes: [ParentOrganisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ParentOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ParentOrganisation` edge in the connection."""
type ParentOrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ParentOrganisation` at the end of the edge."""
  node: ParentOrganisation
}

"""Methods to use when ordering `ParentOrganisation`."""
enum ParentOrganisationsOrderBy {
  BUSINESS_LEGAL_NAME_ASC
  BUSINESS_LEGAL_NAME_DESC
  DUNS_ASC
  DUNS_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  ENGLISH_TRADE_NAME_ASC
  ENGLISH_TRADE_NAME_DESC
  FRENCH_TRADE_NAME_ASC
  FRENCH_TRADE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  PERCENTAGE_OWNED_ASC
  PERCENTAGE_OWNED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  WEBSITE_ASC
  WEBSITE_DESC
}

type Permit implements Node {
  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """Reads a single `Facility` that is related to this `Permit`."""
  facilityByFacilityId: Facility

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The issuing agency for this permit"""
  issuingAgency: String

  """The issuing agency program for this permit"""
  issuingDeptAgencyProgram: String

  """
  The context of the parent path (from VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The permit number"""
  permitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!
}

"""
A condition to be used against `Permit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PermitCondition {
  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `issuingAgency` field."""
  issuingAgency: String

  """
  Checks for equality with the object’s `issuingDeptAgencyProgram` field.
  """
  issuingDeptAgencyProgram: String

  """Checks for equality with the object’s `pathContext` field."""
  pathContext: String

  """Checks for equality with the object’s `permitNumber` field."""
  permitNumber: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `Permit` object types. All fields are combined with a logical ‘and.’
"""
input PermitFilter {
  """Checks for all expressions in this list."""
  and: [PermitFilter!]

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `facilityByFacilityId` relation."""
  facilityByFacilityId: FacilityFilter

  """A related `facilityByFacilityId` exists."""
  facilityByFacilityIdExists: Boolean

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `issuingAgency` field."""
  issuingAgency: StringFilter

  """Filter by the object’s `issuingDeptAgencyProgram` field."""
  issuingDeptAgencyProgram: StringFilter

  """Negates the expression."""
  not: PermitFilter

  """Checks for any expressions in this list."""
  or: [PermitFilter!]

  """Filter by the object’s `pathContext` field."""
  pathContext: StringFilter

  """Filter by the object’s `permitNumber` field."""
  permitNumber: StringFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter
}

"""An input for mutations affecting `Permit`"""
input PermitInput {
  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The issuing agency for this permit"""
  issuingAgency: String

  """The issuing agency program for this permit"""
  issuingDeptAgencyProgram: String

  """
  The context of the parent path (from VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The permit number"""
  permitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int!
}

"""
Represents an update to a `Permit`. Fields that are set will be updated.
"""
input PermitPatch {
  """The foreign key reference to swrs.eccc_xml_file"""
  ecccXmlFileId: Int

  """A foreign key reference to swrs.facility"""
  facilityId: Int

  """The issuing agency for this permit"""
  issuingAgency: String

  """The issuing agency program for this permit"""
  issuingDeptAgencyProgram: String

  """
  The context of the parent path (from VerifyTombstone or RegistrationData
  """
  pathContext: String

  """The permit number"""
  permitNumber: String

  """A foreign key reference to swrs.report"""
  reportId: Int

  """The primary key"""
  rowId: Int
}

"""A connection to a list of `Permit` values."""
type PermitsConnection {
  """
  A list of edges which contains the `Permit` and cursor to aid in pagination.
  """
  edges: [PermitsEdge!]!

  """A list of `Permit` objects."""
  nodes: [Permit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Permit` you could get from the connection."""
  totalCount: Int!
}

"""A `Permit` edge in the connection."""
type PermitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Permit` at the end of the edge."""
  node: Permit
}

"""Methods to use when ordering `Permit`."""
enum PermitsOrderBy {
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  ID_ASC
  ID_DESC
  ISSUING_AGENCY_ASC
  ISSUING_AGENCY_DESC
  ISSUING_DEPT_AGENCY_PROGRAM_ASC
  ISSUING_DEPT_AGENCY_PROGRAM_DESC
  NATURAL
  PATH_CONTEXT_ASC
  PATH_CONTEXT_DESC
  PERMIT_NUMBER_ASC
  PERMIT_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
}

type ProRatedCarbonTaxRate {
  endDuration: Int
  endRate: BigFloat
  fuelType: String
  proRatedCarbonTaxRate: BigFloat
  reportingYear: Int
  startDuration: Int
  startRate: BigFloat
  yearLength: Int
}

"""
A condition to be used against `ProRatedCarbonTaxRate` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProRatedCarbonTaxRateCondition {
  """Checks for equality with the object’s `endDuration` field."""
  endDuration: Int

  """Checks for equality with the object’s `endRate` field."""
  endRate: BigFloat

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """Checks for equality with the object’s `proRatedCarbonTaxRate` field."""
  proRatedCarbonTaxRate: BigFloat

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `startDuration` field."""
  startDuration: Int

  """Checks for equality with the object’s `startRate` field."""
  startRate: BigFloat

  """Checks for equality with the object’s `yearLength` field."""
  yearLength: Int
}

"""
A filter to be used against `ProRatedCarbonTaxRate` object types. All fields are combined with a logical ‘and.’
"""
input ProRatedCarbonTaxRateFilter {
  """Checks for all expressions in this list."""
  and: [ProRatedCarbonTaxRateFilter!]

  """Filter by the object’s `endDuration` field."""
  endDuration: IntFilter

  """Filter by the object’s `endRate` field."""
  endRate: BigFloatFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: ProRatedCarbonTaxRateFilter

  """Checks for any expressions in this list."""
  or: [ProRatedCarbonTaxRateFilter!]

  """Filter by the object’s `proRatedCarbonTaxRate` field."""
  proRatedCarbonTaxRate: BigFloatFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `startDuration` field."""
  startDuration: IntFilter

  """Filter by the object’s `startRate` field."""
  startRate: BigFloatFilter

  """Filter by the object’s `yearLength` field."""
  yearLength: IntFilter
}

"""A connection to a list of `ProRatedCarbonTaxRate` values."""
type ProRatedCarbonTaxRatesConnection {
  """
  A list of edges which contains the `ProRatedCarbonTaxRate` and cursor to aid in pagination.
  """
  edges: [ProRatedCarbonTaxRatesEdge!]!

  """A list of `ProRatedCarbonTaxRate` objects."""
  nodes: [ProRatedCarbonTaxRate]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProRatedCarbonTaxRate` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProRatedCarbonTaxRate` edge in the connection."""
type ProRatedCarbonTaxRatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProRatedCarbonTaxRate` at the end of the edge."""
  node: ProRatedCarbonTaxRate
}

"""Methods to use when ordering `ProRatedCarbonTaxRate`."""
enum ProRatedCarbonTaxRatesOrderBy {
  END_DURATION_ASC
  END_DURATION_DESC
  END_RATE_ASC
  END_RATE_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NATURAL
  PRO_RATED_CARBON_TAX_RATE_ASC
  PRO_RATED_CARBON_TAX_RATE_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  START_DURATION_ASC
  START_DURATION_DESC
  START_RATE_ASC
  START_RATE_DESC
  YEAR_LENGTH_ASC
  YEAR_LENGTH_DESC
}

type ProRatedImpliedEmissionFactor {
  endDuration: Int
  endRate: BigFloat
  fuelMappingId: Int
  fuelType: String
  proRatedImpliedEmissionFactor: BigFloat
  reportingYear: Int
  startDuration: Int
  startRate: BigFloat
  yearLength: Int
}

"""
A condition to be used against `ProRatedImpliedEmissionFactor` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProRatedImpliedEmissionFactorCondition {
  """Checks for equality with the object’s `endDuration` field."""
  endDuration: Int

  """Checks for equality with the object’s `endRate` field."""
  endRate: BigFloat

  """Checks for equality with the object’s `fuelMappingId` field."""
  fuelMappingId: Int

  """Checks for equality with the object’s `fuelType` field."""
  fuelType: String

  """
  Checks for equality with the object’s `proRatedImpliedEmissionFactor` field.
  """
  proRatedImpliedEmissionFactor: BigFloat

  """Checks for equality with the object’s `reportingYear` field."""
  reportingYear: Int

  """Checks for equality with the object’s `startDuration` field."""
  startDuration: Int

  """Checks for equality with the object’s `startRate` field."""
  startRate: BigFloat

  """Checks for equality with the object’s `yearLength` field."""
  yearLength: Int
}

"""
A filter to be used against `ProRatedImpliedEmissionFactor` object types. All fields are combined with a logical ‘and.’
"""
input ProRatedImpliedEmissionFactorFilter {
  """Checks for all expressions in this list."""
  and: [ProRatedImpliedEmissionFactorFilter!]

  """Filter by the object’s `endDuration` field."""
  endDuration: IntFilter

  """Filter by the object’s `endRate` field."""
  endRate: BigFloatFilter

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: ProRatedImpliedEmissionFactorFilter

  """Checks for any expressions in this list."""
  or: [ProRatedImpliedEmissionFactorFilter!]

  """Filter by the object’s `proRatedImpliedEmissionFactor` field."""
  proRatedImpliedEmissionFactor: BigFloatFilter

  """Filter by the object’s `reportingYear` field."""
  reportingYear: IntFilter

  """Filter by the object’s `startDuration` field."""
  startDuration: IntFilter

  """Filter by the object’s `startRate` field."""
  startRate: BigFloatFilter

  """Filter by the object’s `yearLength` field."""
  yearLength: IntFilter
}

"""A connection to a list of `ProRatedImpliedEmissionFactor` values."""
type ProRatedImpliedEmissionFactorsConnection {
  """
  A list of edges which contains the `ProRatedImpliedEmissionFactor` and cursor to aid in pagination.
  """
  edges: [ProRatedImpliedEmissionFactorsEdge!]!

  """A list of `ProRatedImpliedEmissionFactor` objects."""
  nodes: [ProRatedImpliedEmissionFactor]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProRatedImpliedEmissionFactor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProRatedImpliedEmissionFactor` edge in the connection."""
type ProRatedImpliedEmissionFactorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProRatedImpliedEmissionFactor` at the end of the edge."""
  node: ProRatedImpliedEmissionFactor
}

"""Methods to use when ordering `ProRatedImpliedEmissionFactor`."""
enum ProRatedImpliedEmissionFactorsOrderBy {
  END_DURATION_ASC
  END_DURATION_DESC
  END_RATE_ASC
  END_RATE_DESC
  FUEL_MAPPING_ID_ASC
  FUEL_MAPPING_ID_DESC
  FUEL_TYPE_ASC
  FUEL_TYPE_DESC
  NATURAL
  PRO_RATED_IMPLIED_EMISSION_FACTOR_ASC
  PRO_RATED_IMPLIED_EMISSION_FACTOR_DESC
  REPORTING_YEAR_ASC
  REPORTING_YEAR_DESC
  START_DURATION_ASC
  START_DURATION_DESC
  START_RATE_ASC
  START_RATE_DESC
  YEAR_LENGTH_ASC
  YEAR_LENGTH_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a single `AdditionalDatum` using its globally unique `ID`."""
  additionalDatum(
    """
    The globally unique `ID` to be used in selecting a single `AdditionalDatum`.
    """
    id: ID!
  ): AdditionalDatum
  additionalDatumByRowId(rowId: Int!): AdditionalDatum

  """Reads a single `Address` using its globally unique `ID`."""
  address(
    """The globally unique `ID` to be used in selecting a single `Address`."""
    id: ID!
  ): Address
  addressByRowId(rowId: Int!): Address

  """Reads and enables pagination through a set of `AdditionalDatum`."""
  allAdditionalData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalDatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalDatum`."""
    orderBy: [AdditionalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalDataConnection

  """Reads and enables pagination through a set of `Address`."""
  allAddresses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AddressCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AddressFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesConnection

  """Reads and enables pagination through a set of `AttributableEmission`."""
  allAttributableEmissions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributableEmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributableEmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AttributableEmission`."""
    orderBy: [AttributableEmissionsOrderBy!] = [NATURAL]
  ): AttributableEmissionsConnection

  """
  Reads and enables pagination through a set of `AttributableEmissionsWithDetail`.
  """
  allAttributableEmissionsWithDetails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributableEmissionsWithDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributableEmissionsWithDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AttributableEmissionsWithDetail`."""
    orderBy: [AttributableEmissionsWithDetailsOrderBy!] = [NATURAL]
  ): AttributableEmissionsWithDetailsConnection

  """Reads and enables pagination through a set of `CarbonTaxActFuelType`."""
  allCarbonTaxActFuelTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarbonTaxActFuelTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CarbonTaxActFuelTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesConnection

  """Reads and enables pagination through a set of `CarbonTaxCalculation`."""
  allCarbonTaxCalculations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarbonTaxCalculationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CarbonTaxCalculationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CarbonTaxCalculation`."""
    orderBy: [CarbonTaxCalculationsOrderBy!] = [NATURAL]
  ): CarbonTaxCalculationsConnection

  """Reads and enables pagination through a set of `CarbonTaxRateMapping`."""
  allCarbonTaxRateMappings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarbonTaxRateMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CarbonTaxRateMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CarbonTaxRateMapping`."""
    orderBy: [CarbonTaxRateMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxRateMappingsConnection

  """Reads and enables pagination through a set of `Contact`."""
  allContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection

  """Reads and enables pagination through a set of `EcccAttachment`."""
  allEcccAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsConnection

  """Reads and enables pagination through a set of `EcccFileDownloadLog`."""
  allEcccFileDownloadLogs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccFileDownloadLogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccFileDownloadLogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsConnection

  """Reads and enables pagination through a set of `EcccXmlFile`."""
  allEcccXmlFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccXmlFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccXmlFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccXmlFile`."""
    orderBy: [EcccXmlFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccXmlFilesConnection

  """Reads and enables pagination through a set of `EcccZipFile`."""
  allEcccZipFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EcccZipFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EcccZipFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EcccZipFile`."""
    orderBy: [EcccZipFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccZipFilesConnection

  """Reads and enables pagination through a set of `EmissionCategory`."""
  allEmissionCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesConnection

  """Reads and enables pagination through a set of `Emission`."""
  allEmissions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection

  """Reads and enables pagination through a set of `Facility`."""
  allFacilities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesConnection

  """Reads and enables pagination through a set of `FacilityDetail`."""
  allFacilityDetails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FacilityDetail`."""
    orderBy: [FacilityDetailsOrderBy!] = [NATURAL]
  ): FacilityDetailsConnection

  """Reads and enables pagination through a set of `FuelCarbonTaxDetail`."""
  allFuelCarbonTaxDetails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCarbonTaxDetailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelCarbonTaxDetailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsConnection

  """Reads and enables pagination through a set of `FuelCharge`."""
  allFuelCharges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelChargeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelChargeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesConnection

  """Reads and enables pagination through a set of `FuelMapping`."""
  allFuelMappings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsConnection

  """Reads and enables pagination through a set of `Fuel`."""
  allFuels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection

  """Reads and enables pagination through a set of `GgircsUser`."""
  allGgircsUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GgircsUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GgircsUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersConnection

  """Reads and enables pagination through a set of `GhgrImport`."""
  allGhgrImports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GhgrImportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GhgrImportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GhgrImport`."""
    orderBy: [GhgrImportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GhgrImportsConnection

  """Reads and enables pagination through a set of `Identifier`."""
  allIdentifiers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdentifierCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdentifierFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersConnection

  """Reads and enables pagination through a set of `ImpliedEmissionFactor`."""
  allImpliedEmissionFactors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImpliedEmissionFactorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImpliedEmissionFactorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ImpliedEmissionFactor`."""
    orderBy: [ImpliedEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImpliedEmissionFactorsConnection

  """
  Reads and enables pagination through a set of `MeasuredEmissionFactor`.
  """
  allMeasuredEmissionFactors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasuredEmissionFactorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasuredEmissionFactorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MeasuredEmissionFactor`."""
    orderBy: [MeasuredEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeasuredEmissionFactorsConnection

  """Reads and enables pagination through a set of `Naic`."""
  allNaics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsConnection

  """Reads and enables pagination through a set of `NaicsCategory`."""
  allNaicsCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesConnection

  """Reads and enables pagination through a set of `NaicsCategoryMapping`."""
  allNaicsCategoryMappings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsCategoryMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsCategoryMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsCategoryMapping`."""
    orderBy: [NaicsCategoryMappingsOrderBy!] = [NATURAL]
  ): NaicsCategoryMappingsConnection

  """Reads and enables pagination through a set of `NaicsCategoryType`."""
  allNaicsCategoryTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsCategoryTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsCategoryTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsCategoryType`."""
    orderBy: [NaicsCategoryTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoryTypesConnection

  """Reads and enables pagination through a set of `NaicsMapping`."""
  allNaicsMappings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsMapping`."""
    orderBy: [NaicsMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsMappingsConnection

  """Reads and enables pagination through a set of `NaicsNaicsCategory`."""
  allNaicsNaicsCategories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicsNaicsCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicsNaicsCategoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesConnection

  """
  Reads and enables pagination through a set of `OrganisationBcRegistryId`.
  """
  allOrganisationBcRegistryIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationBcRegistryIdCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationBcRegistryIdFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganisationBcRegistryId`."""
    orderBy: [OrganisationBcRegistryIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationBcRegistryIdsConnection

  """Reads and enables pagination through a set of `Organisation`."""
  allOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsConnection

  """Reads and enables pagination through a set of `ParentOrganisation`."""
  allParentOrganisations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentOrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ParentOrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationsConnection

  """Reads and enables pagination through a set of `Permit`."""
  allPermits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PermitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Permit`."""
    orderBy: [PermitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermitsConnection

  """Reads and enables pagination through a set of `ProRatedCarbonTaxRate`."""
  allProRatedCarbonTaxRates(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProRatedCarbonTaxRateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProRatedCarbonTaxRateFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProRatedCarbonTaxRate`."""
    orderBy: [ProRatedCarbonTaxRatesOrderBy!] = [NATURAL]
  ): ProRatedCarbonTaxRatesConnection

  """
  Reads and enables pagination through a set of `ProRatedImpliedEmissionFactor`.
  """
  allProRatedImpliedEmissionFactors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProRatedImpliedEmissionFactorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProRatedImpliedEmissionFactorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProRatedImpliedEmissionFactor`."""
    orderBy: [ProRatedImpliedEmissionFactorsOrderBy!] = [NATURAL]
  ): ProRatedImpliedEmissionFactorsConnection

  """Reads and enables pagination through a set of `ReportAttachment`."""
  allReportAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection

  """Reads and enables pagination through a set of `ReportWithOrg`."""
  allReportWithOrgs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportWithOrgCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportWithOrgFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportWithOrg`."""
    orderBy: [ReportWithOrgsOrderBy!] = [NATURAL]
  ): ReportWithOrgsConnection

  """Reads and enables pagination through a set of `Report`."""
  allReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Report`."""
    orderBy: [ReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportsConnection

  """
  Reads and enables pagination through a set of `TaxedVentingEmissionType`.
  """
  allTaxedVentingEmissionTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaxedVentingEmissionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaxedVentingEmissionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesConnection

  """Reads and enables pagination through a set of `Unit`."""
  allUnits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsConnection

  """Reads a single `CarbonTaxActFuelType` using its globally unique `ID`."""
  carbonTaxActFuelType(
    """
    The globally unique `ID` to be used in selecting a single `CarbonTaxActFuelType`.
    """
    id: ID!
  ): CarbonTaxActFuelType
  carbonTaxActFuelTypeByRowId(rowId: Int!): CarbonTaxActFuelType

  """Reads a single `CarbonTaxRateMapping` using its globally unique `ID`."""
  carbonTaxRateMapping(
    """
    The globally unique `ID` to be used in selecting a single `CarbonTaxRateMapping`.
    """
    id: ID!
  ): CarbonTaxRateMapping
  carbonTaxRateMappingByRowId(rowId: Int!): CarbonTaxRateMapping

  """Reads a single `Contact` using its globally unique `ID`."""
  contact(
    """The globally unique `ID` to be used in selecting a single `Contact`."""
    id: ID!
  ): Contact
  contactByRowId(rowId: Int!): Contact

  """Reads a single `EcccAttachment` using its globally unique `ID`."""
  ecccAttachment(
    """
    The globally unique `ID` to be used in selecting a single `EcccAttachment`.
    """
    id: ID!
  ): EcccAttachment
  ecccAttachmentByRowId(rowId: Int!): EcccAttachment

  """Reads a single `EcccFileDownloadLog` using its globally unique `ID`."""
  ecccFileDownloadLog(
    """
    The globally unique `ID` to be used in selecting a single `EcccFileDownloadLog`.
    """
    id: ID!
  ): EcccFileDownloadLog
  ecccFileDownloadLogByRowId(rowId: Int!): EcccFileDownloadLog

  """Reads a single `EcccXmlFile` using its globally unique `ID`."""
  ecccXmlFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccXmlFile`.
    """
    id: ID!
  ): EcccXmlFile
  ecccXmlFileByRowId(rowId: Int!): EcccXmlFile

  """Reads a single `EcccZipFile` using its globally unique `ID`."""
  ecccZipFile(
    """
    The globally unique `ID` to be used in selecting a single `EcccZipFile`.
    """
    id: ID!
  ): EcccZipFile
  ecccZipFileByRowId(rowId: Int!): EcccZipFile

  """Reads a single `Emission` using its globally unique `ID`."""
  emission(
    """The globally unique `ID` to be used in selecting a single `Emission`."""
    id: ID!
  ): Emission
  emissionByRowId(rowId: Int!): Emission

  """Reads a single `EmissionCategory` using its globally unique `ID`."""
  emissionCategory(
    """
    The globally unique `ID` to be used in selecting a single `EmissionCategory`.
    """
    id: ID!
  ): EmissionCategory
  emissionCategoryByRowId(rowId: Int!): EmissionCategory
  emissionCategoryBySwrsEmissionCategory(swrsEmissionCategory: String!): EmissionCategory

  """Reads a single `Facility` using its globally unique `ID`."""
  facility(
    """The globally unique `ID` to be used in selecting a single `Facility`."""
    id: ID!
  ): Facility
  facilityByRowId(rowId: Int!): Facility

  """Reads a single `Fuel` using its globally unique `ID`."""
  fuel(
    """The globally unique `ID` to be used in selecting a single `Fuel`."""
    id: ID!
  ): Fuel
  fuelByRowId(rowId: Int!): Fuel

  """Reads a single `FuelCarbonTaxDetail` using its globally unique `ID`."""
  fuelCarbonTaxDetail(
    """
    The globally unique `ID` to be used in selecting a single `FuelCarbonTaxDetail`.
    """
    id: ID!
  ): FuelCarbonTaxDetail
  fuelCarbonTaxDetailByRowId(rowId: Int!): FuelCarbonTaxDetail

  """Reads a single `FuelCharge` using its globally unique `ID`."""
  fuelCharge(
    """
    The globally unique `ID` to be used in selecting a single `FuelCharge`.
    """
    id: ID!
  ): FuelCharge
  fuelChargeByRowId(rowId: Int!): FuelCharge

  """Reads a single `FuelMapping` using its globally unique `ID`."""
  fuelMapping(
    """
    The globally unique `ID` to be used in selecting a single `FuelMapping`.
    """
    id: ID!
  ): FuelMapping
  fuelMappingByRowId(rowId: Int!): FuelMapping

  """Reads a single `GgircsUser` using its globally unique `ID`."""
  ggircsUser(
    """
    The globally unique `ID` to be used in selecting a single `GgircsUser`.
    """
    id: ID!
  ): GgircsUser
  ggircsUserByRowId(rowId: Int!): GgircsUser

  """Reads a single `GhgrImport` using its globally unique `ID`."""
  ghgrImport(
    """
    The globally unique `ID` to be used in selecting a single `GhgrImport`.
    """
    id: ID!
  ): GhgrImport
  ghgrImportByRowId(rowId: Int!): GhgrImport

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Reads a single `Identifier` using its globally unique `ID`."""
  identifier(
    """
    The globally unique `ID` to be used in selecting a single `Identifier`.
    """
    id: ID!
  ): Identifier
  identifierByRowId(rowId: Int!): Identifier

  """Reads a single `ImpliedEmissionFactor` using its globally unique `ID`."""
  impliedEmissionFactor(
    """
    The globally unique `ID` to be used in selecting a single `ImpliedEmissionFactor`.
    """
    id: ID!
  ): ImpliedEmissionFactor
  impliedEmissionFactorByRowId(rowId: Int!): ImpliedEmissionFactor

  """
  Reads a single `MeasuredEmissionFactor` using its globally unique `ID`.
  """
  measuredEmissionFactor(
    """
    The globally unique `ID` to be used in selecting a single `MeasuredEmissionFactor`.
    """
    id: ID!
  ): MeasuredEmissionFactor
  measuredEmissionFactorByRowId(rowId: Int!): MeasuredEmissionFactor

  """Reads a single `Naic` using its globally unique `ID`."""
  naic(
    """The globally unique `ID` to be used in selecting a single `Naic`."""
    id: ID!
  ): Naic
  naicByRowId(rowId: Int!): Naic

  """Reads a single `NaicsCategory` using its globally unique `ID`."""
  naicsCategory(
    """
    The globally unique `ID` to be used in selecting a single `NaicsCategory`.
    """
    id: ID!
  ): NaicsCategory
  naicsCategoryByRowId(rowId: Int!): NaicsCategory

  """Reads a single `NaicsCategoryType` using its globally unique `ID`."""
  naicsCategoryType(
    """
    The globally unique `ID` to be used in selecting a single `NaicsCategoryType`.
    """
    id: ID!
  ): NaicsCategoryType
  naicsCategoryTypeByRowId(rowId: Int!): NaicsCategoryType

  """Reads a single `NaicsMapping` using its globally unique `ID`."""
  naicsMapping(
    """
    The globally unique `ID` to be used in selecting a single `NaicsMapping`.
    """
    id: ID!
  ): NaicsMapping
  naicsMappingByRowId(rowId: Int!): NaicsMapping

  """Reads a single `NaicsNaicsCategory` using its globally unique `ID`."""
  naicsNaicsCategory(
    """
    The globally unique `ID` to be used in selecting a single `NaicsNaicsCategory`.
    """
    id: ID!
  ): NaicsNaicsCategory
  naicsNaicsCategoryByRowId(rowId: Int!): NaicsNaicsCategory

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Organisation` using its globally unique `ID`."""
  organisation(
    """
    The globally unique `ID` to be used in selecting a single `Organisation`.
    """
    id: ID!
  ): Organisation

  """
  Reads a single `OrganisationBcRegistryId` using its globally unique `ID`.
  """
  organisationBcRegistryId(
    """
    The globally unique `ID` to be used in selecting a single `OrganisationBcRegistryId`.
    """
    id: ID!
  ): OrganisationBcRegistryId
  organisationBcRegistryIdBySwrsOrganisationId(swrsOrganisationId: Int!): OrganisationBcRegistryId
  organisationByRowId(rowId: Int!): Organisation

  """Reads a single `ParentOrganisation` using its globally unique `ID`."""
  parentOrganisation(
    """
    The globally unique `ID` to be used in selecting a single `ParentOrganisation`.
    """
    id: ID!
  ): ParentOrganisation
  parentOrganisationByRowId(rowId: Int!): ParentOrganisation

  """Reads a single `Permit` using its globally unique `ID`."""
  permit(
    """The globally unique `ID` to be used in selecting a single `Permit`."""
    id: ID!
  ): Permit
  permitByRowId(rowId: Int!): Permit

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Report` using its globally unique `ID`."""
  report(
    """The globally unique `ID` to be used in selecting a single `Report`."""
    id: ID!
  ): Report

  """Reads a single `ReportAttachment` using its globally unique `ID`."""
  reportAttachment(
    """
    The globally unique `ID` to be used in selecting a single `ReportAttachment`.
    """
    id: ID!
  ): ReportAttachment
  reportAttachmentByRowId(rowId: Int!): ReportAttachment
  reportByRowId(rowId: Int!): Report
  session: JwtToken

  """
  Reads a single `TaxedVentingEmissionType` using its globally unique `ID`.
  """
  taxedVentingEmissionType(
    """
    The globally unique `ID` to be used in selecting a single `TaxedVentingEmissionType`.
    """
    id: ID!
  ): TaxedVentingEmissionType
  taxedVentingEmissionTypeByRowId(rowId: Int!): TaxedVentingEmissionType

  """Reads a single `Unit` using its globally unique `ID`."""
  unit(
    """The globally unique `ID` to be used in selecting a single `Unit`."""
    id: ID!
  ): Unit
  unitByRowId(rowId: Int!): Unit

  """
  A custom function to return fuel types that are not mapped to a fuel type in the fuel_mapping table.
  """
  unmappedFuel(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UnmappedFuelRecordFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UnmappedFuelConnection
}

type Report implements Node {
  co2Bioc: BigFloat

  """Reads a single `EcccXmlFile` that is related to this `Report`."""
  ecccXmlFileByEcccXmlFileId: EcccXmlFile

  """The internal primary key for the file"""
  ecccXmlFileId: Int
  grandTotalLessCo2Bioc: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The timestamp noting when the file was imported"""
  importedAt: Datetime

  """The person who last modified the report"""
  lastModifiedBy: String

  """The timestamp recorded in SWRS when the report was last modified"""
  lastModifiedDate: Datetime
  latestSwrsReport: Report

  """The prepop report id"""
  prepopReportId: Int

  """Reads and enables pagination through a set of `ReportAttachment`."""
  reportAttachmentsByReportId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportAttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportAttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportAttachment`."""
    orderBy: [ReportAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportAttachmentsConnection!

  """The type of report"""
  reportType: String
  reportingOnlyGrandTotal: BigFloat

  """The length of the reporting period contained in report"""
  reportingPeriodDuration: Int

  """The primary key"""
  rowId: Int!

  """The raw xml file imported from GHGR"""
  sourceXml: String

  """The status of the report"""
  status: String

  """The date the report was submitted"""
  submissionDate: Datetime

  """The ID for the reporting facility"""
  swrsFacilityId: Int

  """The ID for the reporting organisation"""
  swrsOrganisationId: Int

  """The swrs report id"""
  swrsReportId: Int!

  """
  The total quantity of CO2bioC reported in this report. Used by compliance and enforcement
  """
  updateComment: String

  """The report version"""
  version: String
}

type ReportAttachment implements Node {
  comment: String

  """The file_number corresponds to the type of attachment"""
  fileNumber: Int

  """The complete filepath to the attachment within zip_file_name"""
  filePath: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Denotes whether or not this attachment is required. Can be one of [Optional, Required]
  """
  informationRequirement: String

  """Comments relating to a specific attachment or the report itself"""
  md5Hash: String

  """
  The process_name in this context describes the type of attachment (ie: Process Flow Diagram)
  """
  processName: String

  """Reads a single `Report` that is related to this `ReportAttachment`."""
  reportByReportId: Report

  """The foreign key to the report this attachment belongs to"""
  reportId: Int

  """A generated index used for keying in the ggircs schema"""
  rowId: Int!

  """
  The sub_process_name in this context is a more in-depth description of this attachment
  """
  subProcessName: String

  """The date of upload"""
  uploadedAt: Datetime

  """The name of the user who uploaded the attachment file"""
  uploadedBy: String

  """The name of the attachment file that was uploaded"""
  uploadedFileName: String

  """The name of the zip file containing the attachment"""
  zipFileName: String
}

"""
A condition to be used against `ReportAttachment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportAttachmentCondition {
  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `fileNumber` field."""
  fileNumber: Int

  """Checks for equality with the object’s `filePath` field."""
  filePath: String

  """Checks for equality with the object’s `informationRequirement` field."""
  informationRequirement: String

  """Checks for equality with the object’s `md5Hash` field."""
  md5Hash: String

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `subProcessName` field."""
  subProcessName: String

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Datetime

  """Checks for equality with the object’s `uploadedBy` field."""
  uploadedBy: String

  """Checks for equality with the object’s `uploadedFileName` field."""
  uploadedFileName: String

  """Checks for equality with the object’s `zipFileName` field."""
  zipFileName: String
}

"""
A filter to be used against `ReportAttachment` object types. All fields are combined with a logical ‘and.’
"""
input ReportAttachmentFilter {
  """Checks for all expressions in this list."""
  and: [ReportAttachmentFilter!]

  """Filter by the object’s `comment` field."""
  comment: StringFilter

  """Filter by the object’s `fileNumber` field."""
  fileNumber: IntFilter

  """Filter by the object’s `filePath` field."""
  filePath: StringFilter

  """Filter by the object’s `informationRequirement` field."""
  informationRequirement: StringFilter

  """Filter by the object’s `md5Hash` field."""
  md5Hash: StringFilter

  """Negates the expression."""
  not: ReportAttachmentFilter

  """Checks for any expressions in this list."""
  or: [ReportAttachmentFilter!]

  """Filter by the object’s `processName` field."""
  processName: StringFilter

  """Filter by the object’s `reportByReportId` relation."""
  reportByReportId: ReportFilter

  """A related `reportByReportId` exists."""
  reportByReportIdExists: Boolean

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `subProcessName` field."""
  subProcessName: StringFilter

  """Filter by the object’s `uploadedAt` field."""
  uploadedAt: DatetimeFilter

  """Filter by the object’s `uploadedBy` field."""
  uploadedBy: StringFilter

  """Filter by the object’s `uploadedFileName` field."""
  uploadedFileName: StringFilter

  """Filter by the object’s `zipFileName` field."""
  zipFileName: StringFilter
}

"""A connection to a list of `ReportAttachment` values."""
type ReportAttachmentsConnection {
  """
  A list of edges which contains the `ReportAttachment` and cursor to aid in pagination.
  """
  edges: [ReportAttachmentsEdge!]!

  """A list of `ReportAttachment` objects."""
  nodes: [ReportAttachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportAttachment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReportAttachment` edge in the connection."""
type ReportAttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportAttachment` at the end of the edge."""
  node: ReportAttachment
}

"""Methods to use when ordering `ReportAttachment`."""
enum ReportAttachmentsOrderBy {
  COMMENT_ASC
  COMMENT_DESC
  FILE_NUMBER_ASC
  FILE_NUMBER_DESC
  FILE_PATH_ASC
  FILE_PATH_DESC
  ID_ASC
  ID_DESC
  INFORMATION_REQUIREMENT_ASC
  INFORMATION_REQUIREMENT_DESC
  MD5_HASH_ASC
  MD5_HASH_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SUB_PROCESS_NAME_ASC
  SUB_PROCESS_NAME_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  UPLOADED_BY_ASC
  UPLOADED_BY_DESC
  UPLOADED_FILE_NAME_ASC
  UPLOADED_FILE_NAME_DESC
  ZIP_FILE_NAME_ASC
  ZIP_FILE_NAME_DESC
}

"""
A condition to be used against `Report` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReportCondition {
  """Checks for equality with the object’s `co2Bioc` field."""
  co2Bioc: BigFloat

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """Checks for equality with the object’s `grandTotalLessCo2Bioc` field."""
  grandTotalLessCo2Bioc: BigFloat

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `lastModifiedBy` field."""
  lastModifiedBy: String

  """Checks for equality with the object’s `lastModifiedDate` field."""
  lastModifiedDate: Datetime

  """Checks for equality with the object’s `prepopReportId` field."""
  prepopReportId: Int

  """Checks for equality with the object’s `reportType` field."""
  reportType: String

  """Checks for equality with the object’s `reportingOnlyGrandTotal` field."""
  reportingOnlyGrandTotal: BigFloat

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sourceXml` field."""
  sourceXml: String

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `submissionDate` field."""
  submissionDate: Datetime

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int

  """Checks for equality with the object’s `updateComment` field."""
  updateComment: String

  """Checks for equality with the object’s `version` field."""
  version: String
}

"""
A filter to be used against `Report` object types. All fields are combined with a logical ‘and.’
"""
input ReportFilter {
  """Checks for all expressions in this list."""
  and: [ReportFilter!]

  """Filter by the object’s `co2Bioc` field."""
  co2Bioc: BigFloatFilter

  """Filter by the object’s `ecccXmlFileByEcccXmlFileId` relation."""
  ecccXmlFileByEcccXmlFileId: EcccXmlFileFilter

  """A related `ecccXmlFileByEcccXmlFileId` exists."""
  ecccXmlFileByEcccXmlFileIdExists: Boolean

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `grandTotalLessCo2Bioc` field."""
  grandTotalLessCo2Bioc: BigFloatFilter

  """Filter by the object’s `importedAt` field."""
  importedAt: DatetimeFilter

  """Filter by the object’s `lastModifiedBy` field."""
  lastModifiedBy: StringFilter

  """Filter by the object’s `lastModifiedDate` field."""
  lastModifiedDate: DatetimeFilter

  """Negates the expression."""
  not: ReportFilter

  """Checks for any expressions in this list."""
  or: [ReportFilter!]

  """Filter by the object’s `prepopReportId` field."""
  prepopReportId: IntFilter

  """Filter by the object’s `reportAttachmentsByReportId` relation."""
  reportAttachmentsByReportId: ReportToManyReportAttachmentFilter

  """Some related `reportAttachmentsByReportId` exist."""
  reportAttachmentsByReportIdExist: Boolean

  """Filter by the object’s `reportType` field."""
  reportType: StringFilter

  """Filter by the object’s `reportingOnlyGrandTotal` field."""
  reportingOnlyGrandTotal: BigFloatFilter

  """Filter by the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `submissionDate` field."""
  submissionDate: DatetimeFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter

  """Filter by the object’s `updateComment` field."""
  updateComment: StringFilter

  """Filter by the object’s `version` field."""
  version: StringFilter
}

"""
A filter to be used against many `ReportAttachment` object types. All fields are combined with a logical ‘and.’
"""
input ReportToManyReportAttachmentFilter {
  """
  Every related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportAttachmentFilter

  """
  No related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportAttachmentFilter

  """
  Some related `ReportAttachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportAttachmentFilter
}

type ReportWithOrg {
  businessLegalName: String
  facilityId: Int
  facilityName: String
  facilityType: String
  naicsClassification: String
  naicsCode: Int
  organisationId: Int
  reportId: Int
  reportingPeriodDuration: Int
  swrsFacilityId: Int
  swrsOrganisationId: Int
  swrsReportId: Int
}

"""
A condition to be used against `ReportWithOrg` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReportWithOrgCondition {
  """Checks for equality with the object’s `businessLegalName` field."""
  businessLegalName: String

  """Checks for equality with the object’s `facilityId` field."""
  facilityId: Int

  """Checks for equality with the object’s `facilityName` field."""
  facilityName: String

  """Checks for equality with the object’s `facilityType` field."""
  facilityType: String

  """Checks for equality with the object’s `naicsClassification` field."""
  naicsClassification: String

  """Checks for equality with the object’s `naicsCode` field."""
  naicsCode: Int

  """Checks for equality with the object’s `organisationId` field."""
  organisationId: Int

  """Checks for equality with the object’s `reportId` field."""
  reportId: Int

  """Checks for equality with the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: Int

  """Checks for equality with the object’s `swrsFacilityId` field."""
  swrsFacilityId: Int

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsReportId` field."""
  swrsReportId: Int
}

"""
A filter to be used against `ReportWithOrg` object types. All fields are combined with a logical ‘and.’
"""
input ReportWithOrgFilter {
  """Checks for all expressions in this list."""
  and: [ReportWithOrgFilter!]

  """Filter by the object’s `businessLegalName` field."""
  businessLegalName: StringFilter

  """Filter by the object’s `facilityId` field."""
  facilityId: IntFilter

  """Filter by the object’s `facilityName` field."""
  facilityName: StringFilter

  """Filter by the object’s `facilityType` field."""
  facilityType: StringFilter

  """Filter by the object’s `naicsClassification` field."""
  naicsClassification: StringFilter

  """Filter by the object’s `naicsCode` field."""
  naicsCode: IntFilter

  """Negates the expression."""
  not: ReportWithOrgFilter

  """Checks for any expressions in this list."""
  or: [ReportWithOrgFilter!]

  """Filter by the object’s `organisationId` field."""
  organisationId: IntFilter

  """Filter by the object’s `reportId` field."""
  reportId: IntFilter

  """Filter by the object’s `reportingPeriodDuration` field."""
  reportingPeriodDuration: IntFilter

  """Filter by the object’s `swrsFacilityId` field."""
  swrsFacilityId: IntFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsReportId` field."""
  swrsReportId: IntFilter
}

"""A connection to a list of `ReportWithOrg` values."""
type ReportWithOrgsConnection {
  """
  A list of edges which contains the `ReportWithOrg` and cursor to aid in pagination.
  """
  edges: [ReportWithOrgsEdge!]!

  """A list of `ReportWithOrg` objects."""
  nodes: [ReportWithOrg]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportWithOrg` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportWithOrg` edge in the connection."""
type ReportWithOrgsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportWithOrg` at the end of the edge."""
  node: ReportWithOrg
}

"""Methods to use when ordering `ReportWithOrg`."""
enum ReportWithOrgsOrderBy {
  BUSINESS_LEGAL_NAME_ASC
  BUSINESS_LEGAL_NAME_DESC
  FACILITY_ID_ASC
  FACILITY_ID_DESC
  FACILITY_NAME_ASC
  FACILITY_NAME_DESC
  FACILITY_TYPE_ASC
  FACILITY_TYPE_DESC
  NAICS_CLASSIFICATION_ASC
  NAICS_CLASSIFICATION_DESC
  NAICS_CODE_ASC
  NAICS_CODE_DESC
  NATURAL
  ORGANISATION_ID_ASC
  ORGANISATION_ID_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  REPORT_ID_ASC
  REPORT_ID_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
}

"""A connection to a list of `Report` values."""
type ReportsConnection {
  """
  A list of edges which contains the `Report` and cursor to aid in pagination.
  """
  edges: [ReportsEdge!]!

  """A list of `Report` objects."""
  nodes: [Report]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Report` you could get from the connection."""
  totalCount: Int!
}

"""A `Report` edge in the connection."""
type ReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Report` at the end of the edge."""
  node: Report
}

"""Methods to use when ordering `Report`."""
enum ReportsOrderBy {
  CO2BIOC_ASC
  CO2BIOC_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  GRAND_TOTAL_LESS_CO2BIOC_ASC
  GRAND_TOTAL_LESS_CO2BIOC_DESC
  ID_ASC
  ID_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  LAST_MODIFIED_BY_ASC
  LAST_MODIFIED_BY_DESC
  LAST_MODIFIED_DATE_ASC
  LAST_MODIFIED_DATE_DESC
  NATURAL
  PREPOP_REPORT_ID_ASC
  PREPOP_REPORT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_ONLY_GRAND_TOTAL_ASC
  REPORTING_ONLY_GRAND_TOTAL_DESC
  REPORTING_PERIOD_DURATION_ASC
  REPORTING_PERIOD_DURATION_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_DESC
  SOURCE_XML_ASC
  SOURCE_XML_DESC
  STATUS_ASC
  STATUS_DESC
  SUBMISSION_DATE_ASC
  SUBMISSION_DATE_DESC
  SWRS_FACILITY_ID_ASC
  SWRS_FACILITY_ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_REPORT_ID_ASC
  SWRS_REPORT_ID_DESC
  UPDATE_COMMENT_ASC
  UPDATE_COMMENT_DESC
  VERSION_ASC
  VERSION_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

type TaxedVentingEmissionType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!

  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""
A condition to be used against `TaxedVentingEmissionType` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TaxedVentingEmissionTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `taxedEmissionType` field."""
  taxedEmissionType: String
}

"""
A filter to be used against `TaxedVentingEmissionType` object types. All fields are combined with a logical ‘and.’
"""
input TaxedVentingEmissionTypeFilter {
  """Checks for all expressions in this list."""
  and: [TaxedVentingEmissionTypeFilter!]

  """Negates the expression."""
  not: TaxedVentingEmissionTypeFilter

  """Checks for any expressions in this list."""
  or: [TaxedVentingEmissionTypeFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `taxedEmissionType` field."""
  taxedEmissionType: StringFilter
}

"""An input for mutations affecting `TaxedVentingEmissionType`"""
input TaxedVentingEmissionTypeInput {
  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""
Represents an update to a `TaxedVentingEmissionType`. Fields that are set will be updated.
"""
input TaxedVentingEmissionTypePatch {
  """The name of the carbon taxed emission type"""
  taxedEmissionType: String
}

"""A connection to a list of `TaxedVentingEmissionType` values."""
type TaxedVentingEmissionTypesConnection {
  """
  A list of edges which contains the `TaxedVentingEmissionType` and cursor to aid in pagination.
  """
  edges: [TaxedVentingEmissionTypesEdge!]!

  """A list of `TaxedVentingEmissionType` objects."""
  nodes: [TaxedVentingEmissionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TaxedVentingEmissionType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TaxedVentingEmissionType` edge in the connection."""
type TaxedVentingEmissionTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TaxedVentingEmissionType` at the end of the edge."""
  node: TaxedVentingEmissionType
}

"""Methods to use when ordering `TaxedVentingEmissionType`."""
enum TaxedVentingEmissionTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAXED_EMISSION_TYPE_ASC
  TAXED_EMISSION_TYPE_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

type Unit implements Node {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity"""
  activityName: String

  """The cycle type of the cogen unit"""
  cogenCycleType: String

  """The nameplate capacity] of the cogen unit"""
  cogenNameplateCapacity: BigFloat

  """The net power of the cogen unit"""
  cogenNetPower: BigFloat

  """The steam heat name of the cogen unit"""
  cogenSteamHeatAcqName: String

  """The steam heat quantity of the cogen unit"""
  cogenSteamHeatAcqQuantity: BigFloat

  """The firing purpose of the cogen unit"""
  cogenSupplementalFiringPurpose: String

  """The thermal output of the cogen unit"""
  cogenThermalOutputQuantity: BigFloat

  """The name of the cogen unit"""
  cogenUnitName: String

  """A foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """Reads and enables pagination through a set of `Facility`."""
  facilitiesByEmissionUnitIdAndFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FacilityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FacilityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitFacilitiesByEmissionUnitIdAndFacilityIdManyToManyConnection!

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByEmissionUnitIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitFuelMappingsByEmissionUnitIdAndFuelMappingIdManyToManyConnection!

  """Reads and enables pagination through a set of `FuelMapping`."""
  fuelMappingsByFuelUnitIdAndFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelMappingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelMappingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitFuelMappingsByFuelUnitIdAndFuelMappingIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByEmissionUnitIdAndFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitFuelsByEmissionUnitIdAndFuelIdManyToManyConnection!

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByUnitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Naic`."""
  naicsByEmissionUnitIdAndNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NaicCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NaicFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitNaicsByEmissionUnitIdAndNaicsIdManyToManyConnection!

  """The nameplate capacity of the non-cogen unit"""
  nonCogenNameplateCapacity: BigFloat

  """The net power of the non-cogen unit"""
  nonCogenNetPower: BigFloat

  """The name of the non-cogen unit"""
  nonCogenUnitName: String

  """Reads and enables pagination through a set of `Organisation`."""
  organisationsByEmissionUnitIdAndOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganisationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitOrganisationsByEmissionUnitIdAndOrganisationIdManyToManyConnection!

  """The primary key"""
  rowId: Int!

  """The description of the unit of machinery emitting greenhouse gas"""
  unitDescription: String

  """The name of the unit of machinery emitting greenhouse gas"""
  unitName: String
}

"""
A condition to be used against `Unit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UnitCondition {
  """Checks for equality with the object’s `activityId` field."""
  activityId: Int

  """Checks for equality with the object’s `activityName` field."""
  activityName: String

  """Checks for equality with the object’s `cogenCycleType` field."""
  cogenCycleType: String

  """Checks for equality with the object’s `cogenNameplateCapacity` field."""
  cogenNameplateCapacity: BigFloat

  """Checks for equality with the object’s `cogenNetPower` field."""
  cogenNetPower: BigFloat

  """Checks for equality with the object’s `cogenSteamHeatAcqName` field."""
  cogenSteamHeatAcqName: String

  """
  Checks for equality with the object’s `cogenSteamHeatAcqQuantity` field.
  """
  cogenSteamHeatAcqQuantity: BigFloat

  """
  Checks for equality with the object’s `cogenSupplementalFiringPurpose` field.
  """
  cogenSupplementalFiringPurpose: String

  """
  Checks for equality with the object’s `cogenThermalOutputQuantity` field.
  """
  cogenThermalOutputQuantity: BigFloat

  """Checks for equality with the object’s `cogenUnitName` field."""
  cogenUnitName: String

  """Checks for equality with the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: Int

  """
  Checks for equality with the object’s `nonCogenNameplateCapacity` field.
  """
  nonCogenNameplateCapacity: BigFloat

  """Checks for equality with the object’s `nonCogenNetPower` field."""
  nonCogenNetPower: BigFloat

  """Checks for equality with the object’s `nonCogenUnitName` field."""
  nonCogenUnitName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `unitDescription` field."""
  unitDescription: String

  """Checks for equality with the object’s `unitName` field."""
  unitName: String
}

"""
A connection to a list of `Facility` values, with data from `Emission`.
"""
type UnitFacilitiesByEmissionUnitIdAndFacilityIdManyToManyConnection {
  """
  A list of edges which contains the `Facility`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [UnitFacilitiesByEmissionUnitIdAndFacilityIdManyToManyEdge!]!

  """A list of `Facility` objects."""
  nodes: [Facility]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Facility` you could get from the connection."""
  totalCount: Int!
}

"""A `Facility` edge in the connection, with data from `Emission`."""
type UnitFacilitiesByEmissionUnitIdAndFacilityIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFacilityId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Facility` at the end of the edge."""
  node: Facility
}

"""
A filter to be used against `Unit` object types. All fields are combined with a logical ‘and.’
"""
input UnitFilter {
  """Filter by the object’s `activityId` field."""
  activityId: IntFilter

  """Filter by the object’s `activityName` field."""
  activityName: StringFilter

  """Checks for all expressions in this list."""
  and: [UnitFilter!]

  """Filter by the object’s `cogenCycleType` field."""
  cogenCycleType: StringFilter

  """Filter by the object’s `cogenNameplateCapacity` field."""
  cogenNameplateCapacity: BigFloatFilter

  """Filter by the object’s `cogenNetPower` field."""
  cogenNetPower: BigFloatFilter

  """Filter by the object’s `cogenSteamHeatAcqName` field."""
  cogenSteamHeatAcqName: StringFilter

  """Filter by the object’s `cogenSteamHeatAcqQuantity` field."""
  cogenSteamHeatAcqQuantity: BigFloatFilter

  """Filter by the object’s `cogenSupplementalFiringPurpose` field."""
  cogenSupplementalFiringPurpose: StringFilter

  """Filter by the object’s `cogenThermalOutputQuantity` field."""
  cogenThermalOutputQuantity: BigFloatFilter

  """Filter by the object’s `cogenUnitName` field."""
  cogenUnitName: StringFilter

  """Filter by the object’s `ecccXmlFileId` field."""
  ecccXmlFileId: IntFilter

  """Filter by the object’s `emissionsByUnitId` relation."""
  emissionsByUnitId: UnitToManyEmissionFilter

  """Some related `emissionsByUnitId` exist."""
  emissionsByUnitIdExist: Boolean

  """Filter by the object’s `fuelsByUnitId` relation."""
  fuelsByUnitId: UnitToManyFuelFilter

  """Some related `fuelsByUnitId` exist."""
  fuelsByUnitIdExist: Boolean

  """Filter by the object’s `nonCogenNameplateCapacity` field."""
  nonCogenNameplateCapacity: BigFloatFilter

  """Filter by the object’s `nonCogenNetPower` field."""
  nonCogenNetPower: BigFloatFilter

  """Filter by the object’s `nonCogenUnitName` field."""
  nonCogenUnitName: StringFilter

  """Negates the expression."""
  not: UnitFilter

  """Checks for any expressions in this list."""
  or: [UnitFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `unitDescription` field."""
  unitDescription: StringFilter

  """Filter by the object’s `unitName` field."""
  unitName: StringFilter
}

"""
A connection to a list of `FuelMapping` values, with data from `Emission`.
"""
type UnitFuelMappingsByEmissionUnitIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [UnitFuelMappingsByEmissionUnitIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Emission`."""
type UnitFuelMappingsByEmissionUnitIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""A connection to a list of `FuelMapping` values, with data from `Fuel`."""
type UnitFuelMappingsByFuelUnitIdAndFuelMappingIdManyToManyConnection {
  """
  A list of edges which contains the `FuelMapping`, info from the `Fuel`, and the cursor to aid in pagination.
  """
  edges: [UnitFuelMappingsByFuelUnitIdAndFuelMappingIdManyToManyEdge!]!

  """A list of `FuelMapping` objects."""
  nodes: [FuelMapping]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FuelMapping` you could get from the connection."""
  totalCount: Int!
}

"""A `FuelMapping` edge in the connection, with data from `Fuel`."""
type UnitFuelMappingsByFuelUnitIdAndFuelMappingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Fuel`."""
  fuelsByFuelMappingId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FuelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FuelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsConnection!

  """The `FuelMapping` at the end of the edge."""
  node: FuelMapping
}

"""A connection to a list of `Fuel` values, with data from `Emission`."""
type UnitFuelsByEmissionUnitIdAndFuelIdManyToManyConnection {
  """
  A list of edges which contains the `Fuel`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [UnitFuelsByEmissionUnitIdAndFuelIdManyToManyEdge!]!

  """A list of `Fuel` objects."""
  nodes: [Fuel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fuel` you could get from the connection."""
  totalCount: Int!
}

"""A `Fuel` edge in the connection, with data from `Emission`."""
type UnitFuelsByEmissionUnitIdAndFuelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByFuelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Fuel` at the end of the edge."""
  node: Fuel
}

"""An input for mutations affecting `Unit`"""
input UnitInput {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity"""
  activityName: String

  """The cycle type of the cogen unit"""
  cogenCycleType: String

  """The nameplate capacity] of the cogen unit"""
  cogenNameplateCapacity: BigFloat

  """The net power of the cogen unit"""
  cogenNetPower: BigFloat

  """The steam heat name of the cogen unit"""
  cogenSteamHeatAcqName: String

  """The steam heat quantity of the cogen unit"""
  cogenSteamHeatAcqQuantity: BigFloat

  """The firing purpose of the cogen unit"""
  cogenSupplementalFiringPurpose: String

  """The thermal output of the cogen unit"""
  cogenThermalOutputQuantity: BigFloat

  """The name of the cogen unit"""
  cogenUnitName: String

  """A foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """The nameplate capacity of the non-cogen unit"""
  nonCogenNameplateCapacity: BigFloat

  """The net power of the non-cogen unit"""
  nonCogenNetPower: BigFloat

  """The name of the non-cogen unit"""
  nonCogenUnitName: String

  """The primary key"""
  rowId: Int!

  """The description of the unit of machinery emitting greenhouse gas"""
  unitDescription: String

  """The name of the unit of machinery emitting greenhouse gas"""
  unitName: String
}

"""A connection to a list of `Naic` values, with data from `Emission`."""
type UnitNaicsByEmissionUnitIdAndNaicsIdManyToManyConnection {
  """
  A list of edges which contains the `Naic`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [UnitNaicsByEmissionUnitIdAndNaicsIdManyToManyEdge!]!

  """A list of `Naic` objects."""
  nodes: [Naic]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Naic` you could get from the connection."""
  totalCount: Int!
}

"""A `Naic` edge in the connection, with data from `Emission`."""
type UnitNaicsByEmissionUnitIdAndNaicsIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByNaicsId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Naic` at the end of the edge."""
  node: Naic
}

"""
A connection to a list of `Organisation` values, with data from `Emission`.
"""
type UnitOrganisationsByEmissionUnitIdAndOrganisationIdManyToManyConnection {
  """
  A list of edges which contains the `Organisation`, info from the `Emission`, and the cursor to aid in pagination.
  """
  edges: [UnitOrganisationsByEmissionUnitIdAndOrganisationIdManyToManyEdge!]!

  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection, with data from `Emission`."""
type UnitOrganisationsByEmissionUnitIdAndOrganisationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Emission`."""
  emissionsByOrganisationId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsConnection!

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Represents an update to a `Unit`. Fields that are set will be updated."""
input UnitPatch {
  """A foreign key reference to swrs.activity"""
  activityId: Int

  """The name of the activity"""
  activityName: String

  """The cycle type of the cogen unit"""
  cogenCycleType: String

  """The nameplate capacity] of the cogen unit"""
  cogenNameplateCapacity: BigFloat

  """The net power of the cogen unit"""
  cogenNetPower: BigFloat

  """The steam heat name of the cogen unit"""
  cogenSteamHeatAcqName: String

  """The steam heat quantity of the cogen unit"""
  cogenSteamHeatAcqQuantity: BigFloat

  """The firing purpose of the cogen unit"""
  cogenSupplementalFiringPurpose: String

  """The thermal output of the cogen unit"""
  cogenThermalOutputQuantity: BigFloat

  """The name of the cogen unit"""
  cogenUnitName: String

  """A foreign key reference to swrs.eccc_xml_file.id"""
  ecccXmlFileId: Int

  """The nameplate capacity of the non-cogen unit"""
  nonCogenNameplateCapacity: BigFloat

  """The net power of the non-cogen unit"""
  nonCogenNetPower: BigFloat

  """The name of the non-cogen unit"""
  nonCogenUnitName: String

  """The primary key"""
  rowId: Int

  """The description of the unit of machinery emitting greenhouse gas"""
  unitDescription: String

  """The name of the unit of machinery emitting greenhouse gas"""
  unitName: String
}

"""
A filter to be used against many `Emission` object types. All fields are combined with a logical ‘and.’
"""
input UnitToManyEmissionFilter {
  """
  Every related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionFilter

  """
  No related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionFilter

  """
  Some related `Emission` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionFilter
}

"""
A filter to be used against many `Fuel` object types. All fields are combined with a logical ‘and.’
"""
input UnitToManyFuelFilter {
  """
  Every related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FuelFilter

  """
  No related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FuelFilter

  """
  Some related `Fuel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FuelFilter
}

"""A connection to a list of `Unit` values."""
type UnitsConnection {
  """
  A list of edges which contains the `Unit` and cursor to aid in pagination.
  """
  edges: [UnitsEdge!]!

  """A list of `Unit` objects."""
  nodes: [Unit]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

"""A `Unit` edge in the connection."""
type UnitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""Methods to use when ordering `Unit`."""
enum UnitsOrderBy {
  ACTIVITY_ID_ASC
  ACTIVITY_ID_DESC
  ACTIVITY_NAME_ASC
  ACTIVITY_NAME_DESC
  COGEN_CYCLE_TYPE_ASC
  COGEN_CYCLE_TYPE_DESC
  COGEN_NAMEPLATE_CAPACITY_ASC
  COGEN_NAMEPLATE_CAPACITY_DESC
  COGEN_NET_POWER_ASC
  COGEN_NET_POWER_DESC
  COGEN_STEAM_HEAT_ACQ_NAME_ASC
  COGEN_STEAM_HEAT_ACQ_NAME_DESC
  COGEN_STEAM_HEAT_ACQ_QUANTITY_ASC
  COGEN_STEAM_HEAT_ACQ_QUANTITY_DESC
  COGEN_SUPPLEMENTAL_FIRING_PURPOSE_ASC
  COGEN_SUPPLEMENTAL_FIRING_PURPOSE_DESC
  COGEN_THERMAL_OUTPUT_QUANTITY_ASC
  COGEN_THERMAL_OUTPUT_QUANTITY_DESC
  COGEN_UNIT_NAME_ASC
  COGEN_UNIT_NAME_DESC
  ECCC_XML_FILE_ID_ASC
  ECCC_XML_FILE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NON_COGEN_NAMEPLATE_CAPACITY_ASC
  NON_COGEN_NAMEPLATE_CAPACITY_DESC
  NON_COGEN_NET_POWER_ASC
  NON_COGEN_NET_POWER_DESC
  NON_COGEN_UNIT_NAME_ASC
  NON_COGEN_UNIT_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UNIT_DESCRIPTION_ASC
  UNIT_DESCRIPTION_DESC
  UNIT_NAME_ASC
  UNIT_NAME_DESC
}

"""A connection to a list of `UnmappedFuelRecord` values."""
type UnmappedFuelConnection {
  """
  A list of edges which contains the `UnmappedFuelRecord` and cursor to aid in pagination.
  """
  edges: [UnmappedFuelEdge!]!

  """A list of `UnmappedFuelRecord` objects."""
  nodes: [UnmappedFuelRecord]!

  """
  The count of *all* `UnmappedFuelRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UnmappedFuelRecord` edge in the connection."""
type UnmappedFuelEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UnmappedFuelRecord` at the end of the edge."""
  node: UnmappedFuelRecord
}

"""The return type of our `unmappedFuel` query."""
type UnmappedFuelRecord {
  fuelMappingId: Int
  fuelType: String
}

"""
A filter to be used against `UnmappedFuelRecord` object types. All fields are combined with a logical ‘and.’
"""
input UnmappedFuelRecordFilter {
  """Checks for all expressions in this list."""
  and: [UnmappedFuelRecordFilter!]

  """Filter by the object’s `fuelMappingId` field."""
  fuelMappingId: IntFilter

  """Filter by the object’s `fuelType` field."""
  fuelType: StringFilter

  """Negates the expression."""
  not: UnmappedFuelRecordFilter

  """Checks for any expressions in this list."""
  or: [UnmappedFuelRecordFilter!]
}

"""All input for the `updateAdditionalDatumByRowId` mutation."""
input UpdateAdditionalDatumByRowIdInput {
  """
  An object where the defined keys will be set on the `AdditionalDatum` being updated.
  """
  additionalDatumPatch: AdditionalDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateAdditionalDatum` mutation."""
input UpdateAdditionalDatumInput {
  """
  An object where the defined keys will be set on the `AdditionalDatum` being updated.
  """
  additionalDatumPatch: AdditionalDatumPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalDatum` to be updated.
  """
  id: ID!
}

"""The output of our update `AdditionalDatum` mutation."""
type UpdateAdditionalDatumPayload {
  """The `AdditionalDatum` that was updated by this mutation."""
  additionalDatum: AdditionalDatum

  """An edge for our `AdditionalDatum`. May be used by Relay 1."""
  additionalDatumEdge(
    """The method to use when ordering `AdditionalDatum`."""
    orderBy: [AdditionalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalDataEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAddressByRowId` mutation."""
input UpdateAddressByRowIdInput {
  """
  An object where the defined keys will be set on the `Address` being updated.
  """
  addressPatch: AddressPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateAddress` mutation."""
input UpdateAddressInput {
  """
  An object where the defined keys will be set on the `Address` being updated.
  """
  addressPatch: AddressPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Address` to be updated.
  """
  id: ID!
}

"""The output of our update `Address` mutation."""
type UpdateAddressPayload {
  """The `Address` that was updated by this mutation."""
  address: Address

  """An edge for our `Address`. May be used by Relay 1."""
  addressEdge(
    """The method to use when ordering `Address`."""
    orderBy: [AddressesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AddressesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Address`."""
  facilityByFacilityId: Facility

  """Reads a single `Organisation` that is related to this `Address`."""
  organisationByOrganisationId: Organisation

  """Reads a single `ParentOrganisation` that is related to this `Address`."""
  parentOrganisationByParentOrganisationId: ParentOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCarbonTaxActFuelTypeByRowId` mutation."""
input UpdateCarbonTaxActFuelTypeByRowIdInput {
  """
  An object where the defined keys will be set on the `CarbonTaxActFuelType` being updated.
  """
  carbonTaxActFuelTypePatch: CarbonTaxActFuelTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `updateCarbonTaxActFuelType` mutation."""
input UpdateCarbonTaxActFuelTypeInput {
  """
  An object where the defined keys will be set on the `CarbonTaxActFuelType` being updated.
  """
  carbonTaxActFuelTypePatch: CarbonTaxActFuelTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxActFuelType` to be updated.
  """
  id: ID!
}

"""The output of our update `CarbonTaxActFuelType` mutation."""
type UpdateCarbonTaxActFuelTypePayload {
  """The `CarbonTaxActFuelType` that was updated by this mutation."""
  carbonTaxActFuelType: CarbonTaxActFuelType

  """An edge for our `CarbonTaxActFuelType`. May be used by Relay 1."""
  carbonTaxActFuelTypeEdge(
    """The method to use when ordering `CarbonTaxActFuelType`."""
    orderBy: [CarbonTaxActFuelTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxActFuelTypesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCarbonTaxRateMappingByRowId` mutation."""
input UpdateCarbonTaxRateMappingByRowIdInput {
  """
  An object where the defined keys will be set on the `CarbonTaxRateMapping` being updated.
  """
  carbonTaxRateMappingPatch: CarbonTaxRateMappingPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateCarbonTaxRateMapping` mutation."""
input UpdateCarbonTaxRateMappingInput {
  """
  An object where the defined keys will be set on the `CarbonTaxRateMapping` being updated.
  """
  carbonTaxRateMappingPatch: CarbonTaxRateMappingPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarbonTaxRateMapping` to be updated.
  """
  id: ID!
}

"""The output of our update `CarbonTaxRateMapping` mutation."""
type UpdateCarbonTaxRateMappingPayload {
  """The `CarbonTaxRateMapping` that was updated by this mutation."""
  carbonTaxRateMapping: CarbonTaxRateMapping

  """An edge for our `CarbonTaxRateMapping`. May be used by Relay 1."""
  carbonTaxRateMappingEdge(
    """The method to use when ordering `CarbonTaxRateMapping`."""
    orderBy: [CarbonTaxRateMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CarbonTaxRateMappingsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateContactByRowId` mutation."""
input UpdateContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Contact` being updated.
  """
  contactPatch: ContactPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateContact` mutation."""
input UpdateContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Contact` being updated.
  """
  contactPatch: ContactPatch!

  """
  The globally unique `ID` which will identify a single `Contact` to be updated.
  """
  id: ID!
}

"""The output of our update `Contact` mutation."""
type UpdateContactPayload {
  """Reads a single `Address` that is related to this `Contact`."""
  addressByAddressId: Address

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Contact` that was updated by this mutation."""
  contact: Contact

  """An edge for our `Contact`. May be used by Relay 1."""
  contactEdge(
    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge

  """Reads a single `Facility` that is related to this `Contact`."""
  facilityByFacilityId: Facility

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEcccAttachmentByRowId` mutation."""
input UpdateEcccAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccAttachment` being updated.
  """
  ecccAttachmentPatch: EcccAttachmentPatch!

  """The internal primary key for the file"""
  rowId: Int!
}

"""All input for the `updateEcccAttachment` mutation."""
input UpdateEcccAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccAttachment` being updated.
  """
  ecccAttachmentPatch: EcccAttachmentPatch!

  """
  The globally unique `ID` which will identify a single `EcccAttachment` to be updated.
  """
  id: ID!
}

"""The output of our update `EcccAttachment` mutation."""
type UpdateEcccAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccAttachment` that was updated by this mutation."""
  ecccAttachment: EcccAttachment

  """An edge for our `EcccAttachment`. May be used by Relay 1."""
  ecccAttachmentEdge(
    """The method to use when ordering `EcccAttachment`."""
    orderBy: [EcccAttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccAttachmentsEdge

  """Reads a single `EcccZipFile` that is related to this `EcccAttachment`."""
  ecccZipFileByZipFileId: EcccZipFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEcccFileDownloadLogByRowId` mutation."""
input UpdateEcccFileDownloadLogByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """An internal, generated unique id for the record"""
  rowId: Int!
}

"""All input for the `updateEcccFileDownloadLog` mutation."""
input UpdateEcccFileDownloadLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EcccFileDownloadLog` being updated.
  """
  ecccFileDownloadLogPatch: EcccFileDownloadLogPatch!

  """
  The globally unique `ID` which will identify a single `EcccFileDownloadLog` to be updated.
  """
  id: ID!
}

"""The output of our update `EcccFileDownloadLog` mutation."""
type UpdateEcccFileDownloadLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EcccFileDownloadLog` that was updated by this mutation."""
  ecccFileDownloadLog: EcccFileDownloadLog

  """An edge for our `EcccFileDownloadLog`. May be used by Relay 1."""
  ecccFileDownloadLogEdge(
    """The method to use when ordering `EcccFileDownloadLog`."""
    orderBy: [EcccFileDownloadLogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EcccFileDownloadLogsEdge

  """
  Reads a single `GgircsUser` that is related to this `EcccFileDownloadLog`.
  """
  ggircsUserByDownloadedBy: GgircsUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionByRowId` mutation."""
input UpdateEmissionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Emission` being updated.
  """
  emissionPatch: EmissionPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateEmissionCategoryByRowId` mutation."""
input UpdateEmissionCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """Unique ID for the emission_category"""
  rowId: Int!
}

"""
All input for the `updateEmissionCategoryBySwrsEmissionCategory` mutation.
"""
input UpdateEmissionCategoryBySwrsEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """The emission category name as displayed in the swrs xml reports"""
  swrsEmissionCategory: String!
}

"""All input for the `updateEmissionCategory` mutation."""
input UpdateEmissionCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionCategory` being updated.
  """
  emissionCategoryPatch: EmissionCategoryPatch!

  """
  The globally unique `ID` which will identify a single `EmissionCategory` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionCategory` mutation."""
type UpdateEmissionCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionCategory` that was updated by this mutation."""
  emissionCategory: EmissionCategory

  """An edge for our `EmissionCategory`. May be used by Relay 1."""
  emissionCategoryEdge(
    """The method to use when ordering `EmissionCategory`."""
    orderBy: [EmissionCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmission` mutation."""
input UpdateEmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Emission` being updated.
  """
  emissionPatch: EmissionPatch!

  """
  The globally unique `ID` which will identify a single `Emission` to be updated.
  """
  id: ID!
}

"""The output of our update `Emission` mutation."""
type UpdateEmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Emission` that was updated by this mutation."""
  emission: Emission

  """An edge for our `Emission`. May be used by Relay 1."""
  emissionEdge(
    """The method to use when ordering `Emission`."""
    orderBy: [EmissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionsEdge

  """Reads a single `Facility` that is related to this `Emission`."""
  facilityByFacilityId: Facility

  """Reads a single `Fuel` that is related to this `Emission`."""
  fuelByFuelId: Fuel

  """Reads a single `FuelMapping` that is related to this `Emission`."""
  fuelMappingByFuelMappingId: FuelMapping

  """Reads a single `Naic` that is related to this `Emission`."""
  naicByNaicsId: Naic

  """Reads a single `Organisation` that is related to this `Emission`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Emission`."""
  unitByUnitId: Unit
}

"""All input for the `updateFacilityByRowId` mutation."""
input UpdateFacilityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateFacility` mutation."""
input UpdateFacilityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Facility` being updated.
  """
  facilityPatch: FacilityPatch!

  """
  The globally unique `ID` which will identify a single `Facility` to be updated.
  """
  id: ID!
}

"""The output of our update `Facility` mutation."""
type UpdateFacilityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Facility` that was updated by this mutation."""
  facility: Facility

  """Reads a single `Facility` that is related to this `Facility`."""
  facilityByParentFacilityId: Facility

  """An edge for our `Facility`. May be used by Relay 1."""
  facilityEdge(
    """The method to use when ordering `Facility`."""
    orderBy: [FacilitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FacilitiesEdge

  """Reads a single `Organisation` that is related to this `Facility`."""
  organisationByOrganisationId: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelByRowId` mutation."""
input UpdateFuelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateFuelCarbonTaxDetailByRowId` mutation."""
input UpdateFuelCarbonTaxDetailByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCarbonTaxDetail` being updated.
  """
  fuelCarbonTaxDetailPatch: FuelCarbonTaxDetailPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateFuelCarbonTaxDetail` mutation."""
input UpdateFuelCarbonTaxDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCarbonTaxDetail` being updated.
  """
  fuelCarbonTaxDetailPatch: FuelCarbonTaxDetailPatch!

  """
  The globally unique `ID` which will identify a single `FuelCarbonTaxDetail` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelCarbonTaxDetail` mutation."""
type UpdateFuelCarbonTaxDetailPayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCarbonTaxDetail`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCarbonTaxDetail` that was updated by this mutation."""
  fuelCarbonTaxDetail: FuelCarbonTaxDetail

  """An edge for our `FuelCarbonTaxDetail`. May be used by Relay 1."""
  fuelCarbonTaxDetailEdge(
    """The method to use when ordering `FuelCarbonTaxDetail`."""
    orderBy: [FuelCarbonTaxDetailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelCarbonTaxDetailsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuelChargeByRowId` mutation."""
input UpdateFuelChargeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCharge` being updated.
  """
  fuelChargePatch: FuelChargePatch!

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `updateFuelCharge` mutation."""
input UpdateFuelChargeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelCharge` being updated.
  """
  fuelChargePatch: FuelChargePatch!

  """
  The globally unique `ID` which will identify a single `FuelCharge` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelCharge` mutation."""
type UpdateFuelChargePayload {
  """
  Reads a single `CarbonTaxActFuelType` that is related to this `FuelCharge`.
  """
  carbonTaxActFuelTypeByCarbonTaxActFuelTypeId: CarbonTaxActFuelType

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FuelCharge` that was updated by this mutation."""
  fuelCharge: FuelCharge

  """An edge for our `FuelCharge`. May be used by Relay 1."""
  fuelChargeEdge(
    """The method to use when ordering `FuelCharge`."""
    orderBy: [FuelChargesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelChargesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFuel` mutation."""
input UpdateFuelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fuel` being updated.
  """
  fuelPatch: FuelPatch!

  """
  The globally unique `ID` which will identify a single `Fuel` to be updated.
  """
  id: ID!
}

"""All input for the `updateFuelMappingByRowId` mutation."""
input UpdateFuelMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelMapping` being updated.
  """
  fuelMappingPatch: FuelMappingPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateFuelMapping` mutation."""
input UpdateFuelMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FuelMapping` being updated.
  """
  fuelMappingPatch: FuelMappingPatch!

  """
  The globally unique `ID` which will identify a single `FuelMapping` to be updated.
  """
  id: ID!
}

"""The output of our update `FuelMapping` mutation."""
type UpdateFuelMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelCarbonTaxDetail` that is related to this `FuelMapping`.
  """
  fuelCarbonTaxDetailByFuelCarbonTaxDetailsId: FuelCarbonTaxDetail

  """The `FuelMapping` that was updated by this mutation."""
  fuelMapping: FuelMapping

  """An edge for our `FuelMapping`. May be used by Relay 1."""
  fuelMappingEdge(
    """The method to use when ordering `FuelMapping`."""
    orderBy: [FuelMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Fuel` mutation."""
type UpdateFuelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fuel` that was updated by this mutation."""
  fuel: Fuel

  """An edge for our `Fuel`. May be used by Relay 1."""
  fuelEdge(
    """The method to use when ordering `Fuel`."""
    orderBy: [FuelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FuelsEdge

  """Reads a single `FuelMapping` that is related to this `Fuel`."""
  fuelMappingByFuelMappingId: FuelMapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Unit` that is related to this `Fuel`."""
  unitByUnitId: Unit
}

"""All input for the `updateGgircsUserByRowId` mutation."""
input UpdateGgircsUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateGgircsUser` mutation."""
input UpdateGgircsUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GgircsUser` being updated.
  """
  ggircsUserPatch: GgircsUserPatch!

  """
  The globally unique `ID` which will identify a single `GgircsUser` to be updated.
  """
  id: ID!
}

"""The output of our update `GgircsUser` mutation."""
type UpdateGgircsUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GgircsUser` that was updated by this mutation."""
  ggircsUser: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByCreatedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByDeletedBy: GgircsUser

  """Reads a single `GgircsUser` that is related to this `GgircsUser`."""
  ggircsUserByUpdatedBy: GgircsUser

  """An edge for our `GgircsUser`. May be used by Relay 1."""
  ggircsUserEdge(
    """The method to use when ordering `GgircsUser`."""
    orderBy: [GgircsUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GgircsUsersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateIdentifierByRowId` mutation."""
input UpdateIdentifierByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Identifier` being updated.
  """
  identifierPatch: IdentifierPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateIdentifier` mutation."""
input UpdateIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Identifier` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Identifier` being updated.
  """
  identifierPatch: IdentifierPatch!
}

"""The output of our update `Identifier` mutation."""
type UpdateIdentifierPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityBcghgidId: Facility

  """Reads a single `Facility` that is related to this `Identifier`."""
  facilityByFacilityId: Facility

  """The `Identifier` that was updated by this mutation."""
  identifier: Identifier

  """An edge for our `Identifier`. May be used by Relay 1."""
  identifierEdge(
    """The method to use when ordering `Identifier`."""
    orderBy: [IdentifiersOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdentifiersEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateImpliedEmissionFactorByRowId` mutation."""
input UpdateImpliedEmissionFactorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ImpliedEmissionFactor` being updated.
  """
  impliedEmissionFactorPatch: ImpliedEmissionFactorPatch!

  """The internal primary key"""
  rowId: Int!
}

"""All input for the `updateImpliedEmissionFactor` mutation."""
input UpdateImpliedEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImpliedEmissionFactor` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ImpliedEmissionFactor` being updated.
  """
  impliedEmissionFactorPatch: ImpliedEmissionFactorPatch!
}

"""The output of our update `ImpliedEmissionFactor` mutation."""
type UpdateImpliedEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FuelMapping` that is related to this `ImpliedEmissionFactor`.
  """
  fuelMappingByFuelMappingId: FuelMapping

  """The `ImpliedEmissionFactor` that was updated by this mutation."""
  impliedEmissionFactor: ImpliedEmissionFactor

  """An edge for our `ImpliedEmissionFactor`. May be used by Relay 1."""
  impliedEmissionFactorEdge(
    """The method to use when ordering `ImpliedEmissionFactor`."""
    orderBy: [ImpliedEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImpliedEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMeasuredEmissionFactorByRowId` mutation."""
input UpdateMeasuredEmissionFactorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MeasuredEmissionFactor` being updated.
  """
  measuredEmissionFactorPatch: MeasuredEmissionFactorPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateMeasuredEmissionFactor` mutation."""
input UpdateMeasuredEmissionFactorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MeasuredEmissionFactor` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MeasuredEmissionFactor` being updated.
  """
  measuredEmissionFactorPatch: MeasuredEmissionFactorPatch!
}

"""The output of our update `MeasuredEmissionFactor` mutation."""
type UpdateMeasuredEmissionFactorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Fuel` that is related to this `MeasuredEmissionFactor`.
  """
  fuelByFuelId: Fuel

  """The `MeasuredEmissionFactor` that was updated by this mutation."""
  measuredEmissionFactor: MeasuredEmissionFactor

  """An edge for our `MeasuredEmissionFactor`. May be used by Relay 1."""
  measuredEmissionFactorEdge(
    """The method to use when ordering `MeasuredEmissionFactor`."""
    orderBy: [MeasuredEmissionFactorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeasuredEmissionFactorsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicByRowId` mutation."""
input UpdateNaicByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Naic` being updated.
  """
  naicPatch: NaicPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateNaic` mutation."""
input UpdateNaicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Naic` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Naic` being updated.
  """
  naicPatch: NaicPatch!
}

"""The output of our update `Naic` mutation."""
type UpdateNaicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByFacilityId: Facility

  """Reads a single `Facility` that is related to this `Naic`."""
  facilityByRegistrationDataFacilityId: Facility

  """The `Naic` that was updated by this mutation."""
  naic: Naic

  """An edge for our `Naic`. May be used by Relay 1."""
  naicEdge(
    """The method to use when ordering `Naic`."""
    orderBy: [NaicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsCategoryByRowId` mutation."""
input UpdateNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsCategory` being updated.
  """
  naicsCategoryPatch: NaicsCategoryPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsCategory` mutation."""
input UpdateNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategory` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsCategory` being updated.
  """
  naicsCategoryPatch: NaicsCategoryPatch!
}

"""The output of our update `NaicsCategory` mutation."""
type UpdateNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategory` that was updated by this mutation."""
  naicsCategory: NaicsCategory

  """An edge for our `NaicsCategory`. May be used by Relay 1."""
  naicsCategoryEdge(
    """The method to use when ordering `NaicsCategory`."""
    orderBy: [NaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsCategoryTypeByRowId` mutation."""
input UpdateNaicsCategoryTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsCategoryType` being updated.
  """
  naicsCategoryTypePatch: NaicsCategoryTypePatch!

  """The internal primary key for the type mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsCategoryType` mutation."""
input UpdateNaicsCategoryTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsCategoryType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsCategoryType` being updated.
  """
  naicsCategoryTypePatch: NaicsCategoryTypePatch!
}

"""The output of our update `NaicsCategoryType` mutation."""
type UpdateNaicsCategoryTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsCategoryType` that was updated by this mutation."""
  naicsCategoryType: NaicsCategoryType

  """An edge for our `NaicsCategoryType`. May be used by Relay 1."""
  naicsCategoryTypeEdge(
    """The method to use when ordering `NaicsCategoryType`."""
    orderBy: [NaicsCategoryTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsCategoryTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsMappingByRowId` mutation."""
input UpdateNaicsMappingByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsMapping` being updated.
  """
  naicsMappingPatch: NaicsMappingPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsMapping` mutation."""
input UpdateNaicsMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsMapping` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsMapping` being updated.
  """
  naicsMappingPatch: NaicsMappingPatch!
}

"""The output of our update `NaicsMapping` mutation."""
type UpdateNaicsMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsMapping` that was updated by this mutation."""
  naicsMapping: NaicsMapping

  """An edge for our `NaicsMapping`. May be used by Relay 1."""
  naicsMappingEdge(
    """The method to use when ordering `NaicsMapping`."""
    orderBy: [NaicsMappingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsMappingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNaicsNaicsCategoryByRowId` mutation."""
input UpdateNaicsNaicsCategoryByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NaicsNaicsCategory` being updated.
  """
  naicsNaicsCategoryPatch: NaicsNaicsCategoryPatch!

  """The internal primary key for the mapping"""
  rowId: Int!
}

"""All input for the `updateNaicsNaicsCategory` mutation."""
input UpdateNaicsNaicsCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NaicsNaicsCategory` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `NaicsNaicsCategory` being updated.
  """
  naicsNaicsCategoryPatch: NaicsNaicsCategoryPatch!
}

"""The output of our update `NaicsNaicsCategory` mutation."""
type UpdateNaicsNaicsCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NaicsNaicsCategory` that was updated by this mutation."""
  naicsNaicsCategory: NaicsNaicsCategory

  """An edge for our `NaicsNaicsCategory`. May be used by Relay 1."""
  naicsNaicsCategoryEdge(
    """The method to use when ordering `NaicsNaicsCategory`."""
    orderBy: [NaicsNaicsCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): NaicsNaicsCategoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateOrganisationBcRegistryIdBySwrsOrganisationId` mutation.
"""
input UpdateOrganisationBcRegistryIdBySwrsOrganisationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganisationBcRegistryId` being updated.
  """
  organisationBcRegistryIdPatch: OrganisationBcRegistryIdPatch!

  """The SWRS ID of the organisation"""
  swrsOrganisationId: Int!
}

"""All input for the `updateOrganisationBcRegistryId` mutation."""
input UpdateOrganisationBcRegistryIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganisationBcRegistryId` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `OrganisationBcRegistryId` being updated.
  """
  organisationBcRegistryIdPatch: OrganisationBcRegistryIdPatch!
}

"""The output of our update `OrganisationBcRegistryId` mutation."""
type UpdateOrganisationBcRegistryIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganisationBcRegistryId` that was updated by this mutation."""
  organisationBcRegistryId: OrganisationBcRegistryId

  """An edge for our `OrganisationBcRegistryId`. May be used by Relay 1."""
  organisationBcRegistryIdEdge(
    """The method to use when ordering `OrganisationBcRegistryId`."""
    orderBy: [OrganisationBcRegistryIdsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationBcRegistryIdsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganisationByRowId` mutation."""
input UpdateOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateOrganisation` mutation."""
input UpdateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""The output of our update `Organisation` mutation."""
type UpdateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was updated by this mutation."""
  organisation: Organisation

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateParentOrganisationByRowId` mutation."""
input UpdateParentOrganisationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ParentOrganisation` being updated.
  """
  parentOrganisationPatch: ParentOrganisationPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updateParentOrganisation` mutation."""
input UpdateParentOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ParentOrganisation` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ParentOrganisation` being updated.
  """
  parentOrganisationPatch: ParentOrganisationPatch!
}

"""The output of our update `ParentOrganisation` mutation."""
type UpdateParentOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organisation` that is related to this `ParentOrganisation`.
  """
  organisationByOrganisationId: Organisation

  """The `ParentOrganisation` that was updated by this mutation."""
  parentOrganisation: ParentOrganisation

  """An edge for our `ParentOrganisation`. May be used by Relay 1."""
  parentOrganisationEdge(
    """The method to use when ordering `ParentOrganisation`."""
    orderBy: [ParentOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentOrganisationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePermitByRowId` mutation."""
input UpdatePermitByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Permit` being updated.
  """
  permitPatch: PermitPatch!

  """The primary key"""
  rowId: Int!
}

"""All input for the `updatePermit` mutation."""
input UpdatePermitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Permit` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Permit` being updated.
  """
  permitPatch: PermitPatch!
}

"""The output of our update `Permit` mutation."""
type UpdatePermitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Facility` that is related to this `Permit`."""
  facilityByFacilityId: Facility

  """The `Permit` that was updated by this mutation."""
  permit: Permit

  """An edge for our `Permit`. May be used by Relay 1."""
  permitEdge(
    """The method to use when ordering `Permit`."""
    orderBy: [PermitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermitsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTaxedVentingEmissionTypeByRowId` mutation."""
input UpdateTaxedVentingEmissionTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the taxed_venting_emission_type table"""
  rowId: Int!

  """
  An object where the defined keys will be set on the `TaxedVentingEmissionType` being updated.
  """
  taxedVentingEmissionTypePatch: TaxedVentingEmissionTypePatch!
}

"""All input for the `updateTaxedVentingEmissionType` mutation."""
input UpdateTaxedVentingEmissionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaxedVentingEmissionType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `TaxedVentingEmissionType` being updated.
  """
  taxedVentingEmissionTypePatch: TaxedVentingEmissionTypePatch!
}

"""The output of our update `TaxedVentingEmissionType` mutation."""
type UpdateTaxedVentingEmissionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TaxedVentingEmissionType` that was updated by this mutation."""
  taxedVentingEmissionType: TaxedVentingEmissionType

  """An edge for our `TaxedVentingEmissionType`. May be used by Relay 1."""
  taxedVentingEmissionTypeEdge(
    """The method to use when ordering `TaxedVentingEmissionType`."""
    orderBy: [TaxedVentingEmissionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TaxedVentingEmissionTypesEdge
}

"""All input for the `updateUnitByRowId` mutation."""
input UpdateUnitByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary key"""
  rowId: Int!

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
}

"""All input for the `updateUnit` mutation."""
input UpdateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
}

"""The output of our update `Unit` mutation."""
type UpdateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unit` that was updated by this mutation."""
  unit: Unit

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}
